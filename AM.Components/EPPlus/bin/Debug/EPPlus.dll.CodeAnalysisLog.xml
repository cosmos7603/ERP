<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Namespaces>
  <Namespace Name="Ionic.Zlib">
   <Messages>
    <Message Id="Zlib" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Zlib' in namespace name 'Ionic.Zlib'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="OfficeOpenXml.Drawing.Vml">
   <Messages>
    <Message Id="Vml" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vml' in namespace name 'OfficeOpenXml.Drawing.Vml'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="OfficeOpenXml.FormulaParsing.Excel">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'OfficeOpenXml.FormulaParsing.Excel' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="OfficeOpenXml.FormulaParsing.Excel.Functions.Numeric">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'OfficeOpenXml.FormulaParsing.Excel.Functions.Numeric' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="OfficeOpenXml.FormulaParsing.Excel.Operators">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'OfficeOpenXml.FormulaParsing.Excel.Operators' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="OfficeOpenXml.FormulaParsing.Exceptions">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'OfficeOpenXml.FormulaParsing.Exceptions' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="OfficeOpenXml.Style.Dxf">
   <Messages>
    <Message Id="Dxf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dxf' in namespace name 'OfficeOpenXml.Style.Dxf'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="OfficeOpenXml.Utils">
   <Messages>
    <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in namespace name 'OfficeOpenXml.Utils'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="OfficeOpenXml.VBA">
   <Messages>
    <Message Id="VBA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'VBA' in namespace name 'OfficeOpenXml.VBA' by changing it to 'Vba'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\bin\Debug\EPPlus.dll">
   <Modules>
    <Module Name="epplus.dll">
     <Messages>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'EPPlus.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="">
       <Types>
        <Type Name="CellStore`1" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#_col" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'CellStore&lt;T&gt;._col' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPage(ColumnIndex,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1352">The 'this' parameter (or 'Me' in Visual Basic) of 'CellStore&lt;T&gt;.AddPage(ColumnIndex, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPageRowOffset(PageIndex,System.Int16)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1316">The 'this' parameter (or 'Me' in Visual Basic) of 'CellStore&lt;T&gt;.AddPageRowOffset(PageIndex, short)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AdjustIndex(ColumnIndex,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1285">The 'this' parameter (or 'Me' in Visual Basic) of 'CellStore&lt;T&gt;.AdjustIndex(ColumnIndex, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Clone()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="361">In method 'CellStore&lt;T&gt;.Clone()', object 'ret' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'ret' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyMergePage(PageIndex,System.Int32,System.Int32,System.Int32,PageIndex)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1147">The 'this' parameter (or 'Me' in Visual Basic) of 'CellStore&lt;T&gt;.CopyMergePage(PageIndex, int, int, int, PageIndex)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="startRow" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1148">'CellStore&lt;T&gt;.CopyMergePage(PageIndex, int, int, int, PageIndex)' declares a variable, 'startRow', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyNew(PageIndex,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1190">The 'this' parameter (or 'Me' in Visual Basic) of 'CellStore&lt;T&gt;.CopyNew(PageIndex, int, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Delete(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="724">'CellStore&lt;T&gt;.Delete(int, int, int, int, bool)' has a cyclomatic complexity of 30. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteCells(PageIndex,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="943">The 'this' parameter (or 'Me' in Visual Basic) of 'CellStore&lt;T&gt;.DeleteCells(PageIndex, int, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeletePage(System.Int32,System.Int32,ColumnIndex,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="882">The 'this' parameter (or 'Me' in Visual Basic) of 'CellStore&lt;T&gt;.DeletePage(int, int, ColumnIndex, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="offset" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="882">'CellStore&lt;T&gt;.DeletePage(int, int, ColumnIndex, int)' declares a variable, 'offset', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="prevOffset" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="889">'CellStore&lt;T&gt;.DeletePage(int, int, ColumnIndex, int)' declares a variable, 'prevOffset', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalledWithFinalizer" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1390">Change 'CellStore&lt;T&gt;.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNextCell(System.Int32&amp;,System.Int32&amp;,System.Int32,System.Int32,System.Int32,System.Int32[]&amp;,System.Int32[]&amp;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="endRow" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1559">Parameter 'endRow' of 'CellStore&lt;T&gt;.GetNextCell(ref int, ref int, int, int, int, ref int[], ref int[])' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MergePage(ColumnIndex,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1166">In method 'CellStore&lt;T&gt;.MergePage(ColumnIndex, int)', object 'newPage' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'newPage' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1162">The 'this' parameter (or 'Me' in Visual Basic) of 'CellStore&lt;T&gt;.MergePage(ColumnIndex, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValue(System.Int32,System.Int32,!0)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="620">'CellStore&lt;T&gt;.SetValue(int, int, T)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SplitPage(ColumnIndex,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1261">In method 'CellStore&lt;T&gt;.SplitPage(ColumnIndex, int)', object 'newPage' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'newPage' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1262">In method 'CellStore&lt;T&gt;.SplitPage(ColumnIndex, int)', object 'nextPage' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'nextPage' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1240">The 'this' parameter (or 'Me' in Visual Basic) of 'CellStore&lt;T&gt;.SplitPage(ColumnIndex, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SplitPageInsert(ColumnIndex,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="newRows" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1108">'CellStore&lt;T&gt;.SplitPageInsert(ColumnIndex, int, int, int, int, int)' declares a variable, 'newRows', of type 'IndexItem[]', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="row" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1129">'CellStore&lt;T&gt;.SplitPageInsert(ColumnIndex, int, int, int, int, int)' declares a variable, 'row', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ColumnIndex" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalledWithFinalizer" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="204">Change 'ColumnIndex.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Finalize()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message TypeName="RemoveEmptyFinalizers" Category="Microsoft.Performance" CheckId="CA1821" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="62">'ColumnIndex' implements a finalizer that only calls conditionally emitted methods or the base type finalizer. Remove the finalizer or ensure that it is only conditionally compiled into the assembly. If this violation occurs against a finalizer that is entirely wrapped in a conditionally-emitted block of code, suppress this message.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eFillStyle" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DeclareTypesInNamespaces" Category="Microsoft.Design" CheckId="CA1050" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">'eFillStyle' should be declared inside a namespace.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eFillStyle' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eShapeStyle" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DeclareTypesInNamespaces" Category="Microsoft.Design" CheckId="CA1050" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">'eShapeStyle' should be declared inside a namespace.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eShapeStyle' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#DiagStripe" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Diag" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Diag' in member name 'eShapeStyle.DiagStripe' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartAlternateProcess" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartAlternateProcess' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartCollate" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartCollate' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartConnector" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartConnector' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartDecision" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartDecision' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartDelay" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartDelay' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartDisplay" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartDisplay' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartDocument" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartDocument' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartExtract" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartExtract' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartInputOutput" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartInputOutput' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartInternalStorage" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartInternalStorage' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartMagneticDisk" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartMagneticDisk' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartMagneticDrum" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartMagneticDrum' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartMagneticTape" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartMagneticTape' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartManualInput" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartManualInput' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartManualOperation" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartManualOperation' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartMerge" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartMerge' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartMultidocument" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartMultidocument' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Multidocument" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multidocument' in member name 'eShapeStyle.FlowChartMultidocument' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartOfflineStorage" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartOfflineStorage' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartOffpageConnector" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartOffpageConnector' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Offpage" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Offpage' in member name 'eShapeStyle.FlowChartOffpageConnector' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartOnlineStorage" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartOnlineStorage' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartOr" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartOr' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartPredefinedProcess" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartPredefinedProcess' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartPreparation" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartPreparation' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartProcess" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartProcess' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartPunchedCard" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartPunchedCard' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartPunchedTape" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartPunchedTape' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartSort" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartSort' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartSummingJunction" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartSummingJunction' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FlowChartTerminator" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FlowChart" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'FlowChart' in member name 'eShapeStyle.FlowChartTerminator' exists as a discrete term. If your usage is intended to be single word, case it as 'Flowchart' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LineInv" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inv" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Inv' in member name 'eShapeStyle.LineInv' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Round2DiagRect" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Diag" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Diag' in member name 'eShapeStyle.Round2DiagRect' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RtTriangle" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Rt" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Rt' in member name 'eShapeStyle.RtTriangle' by changing it to 'RT'.</Issue>
            </Message>
            <Message Id="Rt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rt' in member name 'eShapeStyle.RtTriangle' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Snip2DiagRect" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Diag" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Diag' in member name 'eShapeStyle.Snip2DiagRect' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UturnArrow" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Uturn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Uturn' in member name 'eShapeStyle.UturnArrow' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eTextAlignment" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DeclareTypesInNamespaces" Category="Microsoft.Design" CheckId="CA1050" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">'eTextAlignment' should be declared inside a namespace.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eTextAlignment' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="FlagCellStore" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#SetFlagValue(System.Int32,System.Int32,System.Boolean,OfficeOpenXml.CellFlags)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="1913">Parameter 'value' of 'FlagCellStore.SetFlagValue(int, int, bool, CellFlags)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IndexBase" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#CompareTo(IndexBase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'IndexBase.CompareTo(IndexBase)', validate parameter 'other' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PageIndex" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalledWithFinalizer" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="CellStore.cs" Line="318">Change 'PageIndex.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Ionic">
       <Types>
        <Type Name="AttributesCriterion" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#AttributeString" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_AttributeString(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="380">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'AttributesCriterion.AttributeString.set(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="386">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'AttributesCriterion.AttributeString.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="392">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'AttributesCriterion.AttributeString.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="398">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'AttributesCriterion.AttributeString.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="404">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'AttributesCriterion.AttributeString.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="410">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'AttributesCriterion.AttributeString.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="416">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'AttributesCriterion.AttributeString.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="EnumUtil" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Parse(System.Type,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1469">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'EnumUtil.Parse(Type, string, bool)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1479">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'EnumUtil.Parse(Type, string, bool)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileSelector" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#_ParseCriterion(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="997">'FileSelector._ParseCriterion(string)' has a cyclomatic complexity of 78. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="997">'FileSelector._ParseCriterion(string)' has a maintainability index of 18. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1023">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1036">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1118">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1120">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1122">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1124">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1126">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1128">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int64.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1119">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1121">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1123">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1125">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1127">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1129">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1130">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1118">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1120">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1122">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1124">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1126">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1128">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1157">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1004">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="1157">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector._ParseCriterion(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectEntries(Ionic.Zip.ZipFile,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Selector.cs" Line="1449">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'FileSelector.SelectEntries(ZipFile, string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectionCriteria" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_SelectionCriteria(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="848">Replace the call to 'string.operator ==(string, string)' in 'FileSelector.SelectionCriteria.set(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="FileSelector+RegexAssertions" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#FollowedByEvenNumberOfSingleQuotesAndLineEnd" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'FileSelector.RegexAssertions.FollowedByEvenNumberOfSingleQuotesAndLineEnd' is declared as 'static readonly' but is initialized with a constant value '(?=(?:[^']*'[^']*')*[^']*$)'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FollowedByOddNumberOfSingleQuotesAndLineEnd" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'FileSelector.RegexAssertions.FollowedByOddNumberOfSingleQuotesAndLineEnd' is declared as 'static readonly' but is initialized with a constant value '(?=[^']*'(?:[^']*'[^']*')*[^']*$)'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PrecededByEvenNumberOfSingleQuotes" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'FileSelector.RegexAssertions.PrecededByEvenNumberOfSingleQuotes' is declared as 'static readonly' but is initialized with a constant value '(?&lt;=(?:[^']*'[^']*')*[^']*)'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PrecededByOddNumberOfSingleQuotes" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'FileSelector.RegexAssertions.PrecededByOddNumberOfSingleQuotes' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'FileSelector.RegexAssertions.PrecededByOddNumberOfSingleQuotes' is declared as 'static readonly' but is initialized with a constant value '(?&lt;=(?:[^']*'[^']*')*'[^']*)'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SizeCriterion" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="125">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'SizeCriterion.ToString()' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TimeCriterion" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="FileSelector.cs" Line="179">Because the behavior of 'DateTime.ToString(string)' could vary based on the current user's locale settings, replace this call in 'TimeCriterion.ToString()' with a call to 'DateTime.ToString(string, IFormatProvider)'. If the result of 'DateTime.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Ionic.Crc">
       <Types>
        <Type Name="CRC32" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="CRC32.cs" Line="94">'CRC32.GetCrc32AndCopy(Stream, Stream)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#gf2_matrix_times(System.UInt32[],System.UInt32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="CRC32.cs" Line="303">The 'this' parameter (or 'Me' in Visual Basic) of 'CRC32.gf2_matrix_times(uint[], uint)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SlurpBlock(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="CRC32.cs" Line="146">'CRC32.SlurpBlock(byte[], int, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CrcCalculatorStream" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(System.IO.Stream,System.Int64)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="CRC32.cs" Line="562">Method 'CrcCalculatorStream.CrcCalculatorStream(Stream, long)' passes parameter name 'length' as the 'message' argument to a 'ArgumentException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.Stream,System.Int64,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="CRC32.cs" Line="584">Method 'CrcCalculatorStream.CrcCalculatorStream(Stream, long, bool)' passes parameter name 'length' as the 'message' argument to a 'ArgumentException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.Stream,System.Int64,System.Boolean,Ionic.Crc.CRC32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectMessage" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="CRC32.cs" Line="608">Method 'CrcCalculatorStream.CrcCalculatorStream(Stream, long, bool, CRC32)' passes parameter name 'length' as the 'message' argument to a 'ArgumentException' constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnsetLengthLimit" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'CrcCalculatorStream.UnsetLengthLimit' is declared as 'static readonly' but is initialized with a constant value '-99'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Ionic.Zip">
       <Types>
        <Type Name="BadCrcException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Crc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Crc' in type name 'BadCrcException'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'BadCrcException': public BadCrcException(String, Exception).</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="CloseDelegate" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'CloseDelegate' so that it does not end in 'Delegate'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ComHelper" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#CheckZip(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ComHelper.cs" Line="76">The 'this' parameter (or 'Me' in Visual Basic) of 'ComHelper.CheckZip(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckZipPassword(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ComHelper.cs" Line="90">The 'this' parameter (or 'Me' in Visual Basic) of 'ComHelper.CheckZipPassword(string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FixZipDirectory(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ComHelper.cs" Line="99">The 'this' parameter (or 'Me' in Visual Basic) of 'ComHelper.FixZipDirectory(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetZipLibraryVersion()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ComHelper.cs" Line="111">The 'this' parameter (or 'Me' in Visual Basic) of 'ComHelper.GetZipLibraryVersion()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsZipFile(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ComHelper.cs" Line="50">The 'this' parameter (or 'Me' in Visual Basic) of 'ComHelper.IsZipFile(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsZipFileWithExtract(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ComHelper.cs" Line="64">The 'this' parameter (or 'Me' in Visual Basic) of 'ComHelper.IsZipFileWithExtract(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CountingStream" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="730">Modify 'CountingStream.CountingStream(Stream)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OpenDelegate" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'OpenDelegate' so that it does not end in 'Delegate'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SfxGenerationException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Sfx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Sfx' in type name 'SfxGenerationException'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SfxGenerationException': public SfxGenerationException(String, Exception).</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SharedUtilities" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#_ReadFourBytes(System.IO.Stream,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="278">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'SharedUtilities._ReadFourBytes(Stream, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NormalizePathForUseInZipFile(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="156">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'SharedUtilities.NormalizePathForUseInZipFile(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PackedToDateTime(System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="478">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'SharedUtilities.PackedToDateTime(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="477">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'SharedUtilities.PackedToDateTime(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadEntrySignature(System.IO.Stream)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Ionic.Zip.SharedUtilities._ReadFourBytes(System.IO.Stream,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="214">Method 'SharedUtilities.ReadEntrySignature(Stream)' passes a literal string as parameter 'message' of a call to 'SharedUtilities._ReadFourBytes(Stream, string)'. Retrieve the following string(s) from a resource table instead: "n/a".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="221">Method 'SharedUtilities.ReadEntrySignature(Stream)' passes a literal string as parameter 'message' of a call to 'SharedUtilities._ReadFourBytes(Stream, string)'. Retrieve the following string(s) from a resource table instead: "n/a".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="229">Method 'SharedUtilities.ReadEntrySignature(Stream)' passes a literal string as parameter 'message' of a call to 'SharedUtilities._ReadFourBytes(Stream, string)'. Retrieve the following string(s) from a resource table instead: "n/a".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="236">Method 'SharedUtilities.ReadEntrySignature(Stream)' passes a literal string as parameter 'message' of a call to 'SharedUtilities._ReadFourBytes(Stream, string)'. Retrieve the following string(s) from a resource table instead: "n/a".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadInt(System.IO.Stream)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Ionic.Zip.SharedUtilities._ReadFourBytes(System.IO.Stream,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="248">Method 'SharedUtilities.ReadInt(Stream)' passes a literal string as parameter 'message' of a call to 'SharedUtilities._ReadFourBytes(Stream, string)'. Retrieve the following string(s) from a resource table instead: "Could not read block - no data!  (position 0x{0:X8})".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadSignature(System.IO.Stream)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Ionic.Zip.SharedUtilities._ReadFourBytes(System.IO.Stream,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="201">Method 'SharedUtilities.ReadSignature(Stream)' passes a literal string as parameter 'message' of a call to 'SharedUtilities._ReadFourBytes(Stream, string)'. Retrieve the following string(s) from a resource table instead: "n/a".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadWithRetry(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="618">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'SharedUtilities.ReadWithRetry(Stream, byte[], int, int, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="621">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'SharedUtilities.ReadWithRetry(Stream, byte[], int, int, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SimplifyFwdSlashPath(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="Shared.cs" Line="127">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'SharedUtilities.SimplifyFwdSlashPath(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WriteDelegate" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'WriteDelegate' so that it does not end in 'Delegate'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ZipCrypto" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#EncryptMessage(System.Byte[],System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipCrypto.cs" Line="228">Method 'ZipCrypto.EncryptMessage(byte[], int)' passes 'plaintext' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZipEntry" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#_CheckRead(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="1005">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry._CheckRead(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_WriteEntryData(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Write.cs" Line="1349">Modify 'ZipEntry._WriteEntryData(Stream)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckExtractExistingFile(System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="982">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.CheckExtractExistingFile(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="992">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.CheckExtractExistingFile(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyThroughWithRecompute(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Write.cs" Line="2418">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.CopyThroughWithRecompute(Stream)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Create(System.String,Ionic.Zip.ZipEntrySource,System.Object,System.Object)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.cs" Line="2423">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Create(string, ZipEntrySource, object, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FigureCrc32()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Write.cs" Line="1196">In method 'ZipEntry.FigureCrc32()', call System.IDisposable.Dispose on object 'input' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FileName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_FileName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message Id="ZipInputStream" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.cs" Line="867">Correct the spelling of the unrecognized token 'ZipInputStream' in the literal '"Cannot rename; this is not supported in ZipOutputStream/ZipInputStream."'.</Issue>
              </Message>
              <Message Id="ZipOutputStream" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.cs" Line="867">Correct the spelling of the unrecognized token 'ZipOutputStream' in the literal '"Cannot rename; this is not supported in ZipOutputStream/ZipInputStream."'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#FinishOutputStream(System.IO.Stream,Ionic.Zip.CountingStream,System.IO.Stream,System.IO.Stream,Ionic.Crc.CrcCalculatorStream)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="s" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Write.cs" Line="1500">Parameter 's' of 'ZipEntry.FinishOutputStream(Stream, CountingStream, Stream, Stream, CrcCalculatorStream)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Info" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Info()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="73">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="73">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="73">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="82">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="82">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="82">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="82">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="82">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="88">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="90">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="93">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="96">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="96">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="96">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="96">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="102">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="105">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#InternalExtract(System.String,System.IO.Stream,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="680">'ZipEntry.InternalExtract(string, Stream, string)' has a cyclomatic complexity of 33. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="770">In method 'ZipEntry.InternalExtract(string, Stream, string)', call System.IDisposable.Dispose on object 'output' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="ZipFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="687">Correct the spelling of the unrecognized token 'ZipFile' in the literal '"Use Extract() only with ZipFile."'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="692">Correct the spelling of the unrecognized token 'ZipFile' in the literal '"You must call ZipFile.Save before calling any Extract method"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InternalOpenReader(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="OpenReader" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="589">Correct the spelling of the unrecognized token 'OpenReader' in the literal '"You must call ZipFile.Save before calling OpenReader"'.</Issue>
            </Message>
            <Message Id="ZipFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="589">Correct the spelling of the unrecognized token 'ZipFile' in the literal '"You must call ZipFile.Save before calling OpenReader"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MarkAsDirectory()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.cs" Line="2444">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.MarkAsDirectory()' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OpenReader()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="OpenReader" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="548">Correct the spelling of the unrecognized token 'OpenReader' in the literal '"Use OpenReader() only with ZipFile."'.</Issue>
            </Message>
            <Message Id="ZipFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="548">Correct the spelling of the unrecognized token 'ZipFile' in the literal '"Use OpenReader() only with ZipFile."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OpenReader(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="OpenReader" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="574">Correct the spelling of the unrecognized token 'OpenReader' in the literal '"Use OpenReader() only with ZipFile."'.</Issue>
            </Message>
            <Message Id="ZipFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="574">Correct the spelling of the unrecognized token 'ZipFile' in the literal '"Use OpenReader() only with ZipFile."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Password" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Password()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.cs" Line="1948">'ZipEntry.Password.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#PostProcessOutput(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Write.cs" Line="1549">'ZipEntry.PostProcessOutput(Stream)' has a cyclomatic complexity of 27. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PrepSourceStream()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Write.cs" Line="1241">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.PrepSourceStream()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessExtraFieldInfoZipTimes(System.Byte[],System.Int32,System.Int16,System.Int64)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="InfoZip" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Read.cs" Line="675">Correct the spelling of the unrecognized token 'InfoZip' in the literal '") for InfoZip v1 extra field at position 0x"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Read.cs" Line="675">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ProcessExtraFieldInfoZipTimes(byte[], int, short, long)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessExtraFieldUnixTimes(System.Byte[],System.Int32,System.Int16,System.Int64)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Read.cs" Line="699">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ProcessExtraFieldUnixTimes(byte[], int, short, long)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessExtraFieldWindowsTimes(System.Byte[],System.Int32,System.Int16,System.Int64)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Read.cs" Line="754">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ProcessExtraFieldWindowsTimes(byte[], int, short, long)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessExtraFieldZip64(System.Byte[],System.Int32,System.Int16,System.Int64)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Read.cs" Line="649">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ProcessExtraFieldZip64(byte[], int, short, long)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Read.cs" Line="643">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ProcessExtraFieldZip64(byte[], int, short, long)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadDirEntry(Ionic.Zip.ZipFile,System.Collections.Generic.Dictionary`2&lt;System.String,System.Object&gt;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="212">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ReadDirEntry(ZipFile, Dictionary&lt;string, object&gt;)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="283">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ReadDirEntry(ZipFile, Dictionary&lt;string, object&gt;)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadHeader(Ionic.Zip.ZipEntry,System.Text.Encoding)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="defaultEncoding" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Read.cs" Line="67">Parameter 'defaultEncoding' of 'ZipEntry.ReadHeader(ZipEntry, Encoding)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Read.cs" Line="92">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ReadHeader(ZipEntry, Encoding)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Read.cs" Line="153">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ReadHeader(ZipEntry, Encoding)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Read.cs" Line="161">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ReadHeader(ZipEntry, Encoding)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadWeakEncryptionHeader(System.IO.Stream,System.Byte[])" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Read.cs" Line="330">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ReadWeakEncryptionHeader(Stream, byte[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetFdpLoh()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.cs" Line="2589">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.SetFdpLoh()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetZip64Flags()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="ZipFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Write.cs" Line="1874">Correct the spelling of the unrecognized token 'ZipFile' in the literal '"Compressed or Uncompressed size, or offset exceeds the maximum value. Consider s..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.cs" Line="2548">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ToString()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TraceWriteLine(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.Write(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Write.cs" Line="2572">Method 'ZipEntry.TraceWriteLine(string, params object[])' passes a literal string as parameter 'format' of a call to 'Console.Write(string, object)'. Retrieve the following string(s) from a resource table instead: "{0:000} ZipEntry.Write ".</Issue>
            </Message>
            <Message Id="ZipEntry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Write.cs" Line="2572">Correct the spelling of the unrecognized token 'ZipEntry' in the literal '"{0:000} ZipEntry.Write "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnsupportedAlgorithm" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_UnsupportedAlgorithm()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="1260">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.UnsupportedAlgorithm.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#UnsupportedCompressionMethod" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_UnsupportedCompressionMethod()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="1300">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.UnsupportedCompressionMethod.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ValidateCompression()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="1336">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ValidateCompression()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateEncryption()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="DotNetZip" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="1319">Correct the spelling of the unrecognized token 'DotNetZip' in the literal '" is encrypted with an algorithm not supported by DotNetZip: "'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="1319">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ValidateEncryption()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="1322">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ValidateEncryption()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateOutput(System.String,System.IO.Stream,System.String&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="1420">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ValidateOutput(string, Stream, out string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="1441">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ValidateOutput(string, Stream, out string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="1405">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.ValidateOutput(string, Stream, out string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VerifyCrcAfterExtract(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Extract.cs" Line="955">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.VerifyCrcAfterExtract(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteHeader(System.IO.Stream,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="ZipFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipEntry.Write.cs" Line="1138">Correct the spelling of the unrecognized token 'ZipFile' in the literal '"Offset within the zip archive exceeds 0xFFFFFFFF. Consider setting the UseZip64W..."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZipEntry+CopyHelper" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">'ZipEntry.CopyHelper' is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AppendCopyToFileName(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="136">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.CopyHelper.AppendCopyToFileName(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="152">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.CopyHelper.AppendCopyToFileName(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="137">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.CopyHelper.AppendCopyToFileName(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="142">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.CopyHelper.AppendCopyToFileName(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="153">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.CopyHelper.AppendCopyToFileName(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="158">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.CopyHelper.AppendCopyToFileName(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipDirEntry.cs" Line="128">Because the behavior of 'string.LastIndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ZipEntry.CopyHelper.AppendCopyToFileName(string)' with a call to 'string.LastIndexOf(string, StringComparison)'. If the result of 'string.LastIndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZipFile" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="90" Level="Error">'ZipFile' is coupled with 106 different types from 17 different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above 95 indicates poor maintainability, a class coupling between 95 and 80 indicates moderate maintainability, and a class coupling below 80 indicates good maintainability.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.cs" Line="2489">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.ZipFile(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.IO.TextWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.cs" Line="2709">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.ZipFile(string, TextWriter)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.IO.TextWriter,System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.cs" Line="2783">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.ZipFile(string, TextWriter, Encoding)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.cs" Line="2541">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.ZipFile(string, Encoding)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_AddOrUpdateSelectedFiles(System.String,System.String,System.String,System.Boolean,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Selector.cs" Line="662">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipFile._AddOrUpdateSelectedFiles(string, string, string, bool, bool)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_InternalExtractAll(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Extract.cs" Line="246">Because the behavior of 'DateTime.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ZipFile._InternalExtractAll(string, bool)' with a call to 'DateTime.ToString(string, IFormatProvider)'. If the result of 'DateTime.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Extract.cs" Line="276">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipFile._InternalExtractAll(string, bool)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Extract.cs" Line="278">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipFile._InternalExtractAll(string, bool)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_SaveSfxStub(System.String,Ionic.Zip.SelfExtractorSaveOptions)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="737">'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' is coupled with 35 different types from 12 different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above 40 indicates poor maintainability, a class coupling between 40 and 30 indicates moderate maintainability, and a class coupling below 30 indicates good maintainability.</Issue>
            </Message>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="737">'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' has a cyclomatic complexity of 54. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidExcessiveLocals" Category="Microsoft.Performance" CheckId="CA1809" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Compiler" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="737">'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' has 81 local variables, 46 of which were generated by the compiler. Refactor 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' so that it uses fewer than 64 local variables.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="737">'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' has a maintainability index of 19. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="977">Object 's' can be disposed more than once in method 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 977</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="887">Because the behavior of 'DateTime.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' with a call to 'DateTime.ToString(string, IFormatProvider)'. If the result of 'DateTime.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="968">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="784">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="854">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="857">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="922">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="925">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="953">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="1026">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="1017">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="748">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipFile._SaveSfxStub(string, SelfExtractorSaveOptions)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddEntry(System.String,System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.AddUpdate.cs" Line="1849">In method 'ZipFile.AddEntry(string, byte[])', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddEntry(System.String,System.String,System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.AddUpdate.cs" Line="1196">In method 'ZipFile.AddEntry(string, string, Encoding)', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddItem(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.AddUpdate.cs" Line="211">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.AddItem(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddOrUpdateDirectoryImpl(System.String,System.String,Ionic.Zip.AddOrUpdateAction,System.Boolean,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.AddUpdate.cs" Line="2111">Replace the call to 'string.operator !=(string, string)' in 'ZipFile.AddOrUpdateDirectoryImpl(string, string, AddOrUpdateAction, bool, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckZip(System.String,System.Boolean,System.IO.TextWriter)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Check.cs" Line="190">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.CheckZip(string, bool, TextWriter)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteFileWithRetry(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Save.cs" Line="65">Method 'ZipFile.DeleteFileWithRetry(string)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: "************************************************** Retry delete.".</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Save.cs" Line="53">The 'this' parameter (or 'Me' in Visual Basic) of 'ZipFile.DeleteFileWithRetry(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnsureendInSlash(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Selector.cs" Line="640">The 'this' parameter (or 'Me' in Visual Basic) of 'ZipFile.EnsureendInSlash(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Selector.cs" Line="641">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipFile.EnsureendInSlash(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExtractResourceToFile(System.Reflection.Assembly,System.String,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="722">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.ExtractResourceToFile(Assembly, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenerateTempPathname(System.String,System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="1088">Because the behavior of 'DateTime.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ZipFile.GenerateTempPathname(string, string)' with a call to 'DateTime.ToString(string, IFormatProvider)'. If the result of 'DateTime.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.SaveSelfExtractor.cs" Line="1088">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ZipFile.GenerateTempPathname(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Info" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Info()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Check.cs" Line="319">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Check.cs" Line="322">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Check.cs" Line="326">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Check.cs" Line="330">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Check.cs" Line="333">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Check.cs" Line="335">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Check.cs" Line="337">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Check.cs" Line="339">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.Info.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Initialize(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.cs" Line="2820">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.Initialize(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParallelDeflateMaxBufferPairs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_ParallelDeflateMaxBufferPairs(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.cs" Line="2292">Method 'ZipFile.ParallelDeflateMaxBufferPairs.set(int)' passes 'ParallelDeflateMaxBufferPairs' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ParallelDeflateThreshold" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_ParallelDeflateThreshold(System.Int64)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.cs" Line="2198">Method 'ZipFile.ParallelDeflateThreshold.set(long)' passes 'ParallelDeflateThreshold should be -1, 0, or &gt; 65536' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Read(System.IO.Stream,System.IO.TextWriter,System.Text.Encoding,System.EventHandler`1&lt;Ionic.Zip.ReadProgressEventArgs&gt;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Read.cs" Line="531">In method 'ZipFile.Read(Stream, TextWriter, Encoding, EventHandler&lt;ReadProgressEventArgs&gt;)', object 'zf' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'zf' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Read(System.String,System.IO.TextWriter,System.Text.Encoding,System.EventHandler`1&lt;Ionic.Zip.ReadProgressEventArgs&gt;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Read.cs" Line="325">In method 'ZipFile.Read(string, TextWriter, Encoding, EventHandler&lt;ReadProgressEventArgs&gt;)', object 'zf' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'zf' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadCentralDirectoryFooter(Ionic.Zip.ZipFile)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Read.cs" Line="894">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.ReadCentralDirectoryFooter(ZipFile)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadIntoInstance(Ionic.Zip.ZipFile)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="ZipFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Read.cs" Line="661">Correct the spelling of the unrecognized token 'ZipFile' in the literal '"Cannot read that as a ZipFile"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReplaceLeadingDirectory(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Selector.cs" Line="707">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ZipFile.ReplaceLeadingDirectory(string, string, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Selector.cs" Line="708">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ZipFile.ReplaceLeadingDirectory(string, string, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Selector.cs" Line="709">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ZipFile.ReplaceLeadingDirectory(string, string, string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Save.cs" Line="130">'ZipFile.Save()' has a cyclomatic complexity of 33. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Save.cs" Line="308">Modify 'ZipFile.Save()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="ZipFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Save.cs" Line="158">Correct the spelling of the unrecognized token 'ZipFile' in the literal '"The number of entries is 65535 or greater. Consider setting the UseZip64WhenSavi..."'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Save.cs" Line="141">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipFile.Save()' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TempFileFolder" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_TempFileFolder(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.cs" Line="1527">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.TempFileFolder.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.cs" Line="2304">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.ToString()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateItem(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.AddUpdate.cs" Line="1080">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.UpdateItem(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Zip64SeekToCentralDirectory(Ionic.Zip.ZipFile)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="EoCD" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Read.cs" Line="689">Correct the spelling of the unrecognized token 'EoCD' in the literal '") looking for ZIP64 EoCD Record at position 0x"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Read.cs" Line="689">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipFile.Zip64SeekToCentralDirectory(ZipFile)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZipInputStream" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipInputStream.cs" Line="312">In method 'ZipInputStream.ZipInputStream(string)', call System.IDisposable.Dispose on object 'stream' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose methods should call base class dispose" Category="Microsoft.Usage" CheckId="CA2215" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipInputStream.cs" Line="710">Ensure that method 'ZipInputStream.Dispose(bool)' calls base.'ZipInputStream.Dispose(bool)' in all possible control flow paths.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipInputStream.cs" Line="363">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipInputStream.ToString()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZipOutput" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#WriteCentralDirectoryStructure(System.IO.Stream,System.Collections.Generic.ICollection`1&lt;Ionic.Zip.ZipEntry&gt;,System.UInt32,Ionic.Zip.Zip64Option,System.String,Ionic.Zip.ZipContainer)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="ZipFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Save.cs" Line="671">Correct the spelling of the unrecognized token 'ZipFile' in the literal '"The archive requires a ZIP64 Central Directory. Consider setting the ZipFile.Use..."'.</Issue>
            </Message>
            <Message Id="ZipOutputStream" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipFile.Save.cs" Line="673">Correct the spelling of the unrecognized token 'ZipOutputStream' in the literal '"The archive requires a ZIP64 Central Directory. Consider setting the ZipOutputSt..."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZipOutputStream" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipOutputStream.cs" Line="316">In method 'ZipOutputStream.ZipOutputStream(string)', call System.IDisposable.Dispose on object 'stream' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_InitiateCurrentEntry(System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="ZipOutputStream" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipOutputStream.cs" Line="1421">Correct the spelling of the unrecognized token 'ZipOutputStream' in the literal '"Too many entries. Consider setting ZipOutputStream.EnableZip64."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose methods should call base class dispose" Category="Microsoft.Usage" CheckId="CA2215" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipOutputStream.cs" Line="1535">Ensure that method 'ZipOutputStream.Dispose(bool)' calls base.'ZipOutputStream.Dispose(bool)' in all possible control flow paths.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsureUniqueEntry(Ionic.Zip.ZipEntry)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipOutputStream.cs" Line="1202">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipOutputStream.InsureUniqueEntry(ZipEntry)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParallelDeflateMaxBufferPairs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_ParallelDeflateMaxBufferPairs(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipOutputStream.cs" Line="1189">Method 'ZipOutputStream.ParallelDeflateMaxBufferPairs.set(int)' passes 'ParallelDeflateMaxBufferPairs' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ParallelDeflateThreshold" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_ParallelDeflateThreshold(System.Int64)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipOutputStream.cs" Line="1093">Method 'ZipOutputStream.ParallelDeflateThreshold.set(long)' passes 'value must be greater than 64k, or 0, or -1' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#PutNextEntry(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipOutputStream.cs" Line="1394">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipOutputStream.PutNextEntry(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipOutputStream.cs" Line="371">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipOutputStream.ToString()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Write(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="PutNextEntry" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipOutputStream.cs" Line="1272">Correct the spelling of the unrecognized token 'PutNextEntry' in the literal '"You must call PutNextEntry() before calling Write()."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZipSegmentedStream" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#_NameForSegment(System.UInt32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipSegmentedStream.cs" Line="217">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipSegmentedStream._NameForSegment(uint)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ForReading(System.String,System.UInt32,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipSegmentedStream.cs" Line="75">In method 'ZipSegmentedStream.ForReading(string, uint, uint)', object 'new ZipSegmentedStream()' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new ZipSegmentedStream()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ForUpdate(System.String,System.UInt32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipSegmentedStream.cs" Line="138">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipSegmentedStream.ForUpdate(string, uint)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ForWriting(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipSegmentedStream.cs" Line="94">In method 'ZipSegmentedStream.ForWriting(string, int)', object 'new ZipSegmentedStream()' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'new ZipSegmentedStream()' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipSegmentedStream.cs" Line="104">Replace the call to 'string.operator ==(string, string)' in 'ZipSegmentedStream.ForWriting(string, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Read(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipSegmentedStream.cs" Line="292">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZipSegmentedStream.Read(byte[], int, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip" File="ZipSegmentedStream.cs" Line="241">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ZipSegmentedStream.ToString()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Ionic.Zlib">
       <Types>
        <Type Name="Adler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'Adler' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="buf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Zlib.cs" Line="495">In method 'Adler.Adler32(uint, byte[], int, int)', correct the spelling of 'buf' in parameter name 'buf' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BASE" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'Adler.BASE' is declared as 'static readonly' but is initialized with a constant value '65521'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NMAX" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'Adler.NMAX' is declared as 'static readonly' but is initialized with a constant value '5552'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DeflateManager" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Buf_size" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.Buf_size' is declared as 'static readonly' but is initialized with a constant value '16'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BUSY_STATE" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.BUSY_STATE' is declared as 'static readonly' but is initialized with a constant value '113'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Deflate(Ionic.Zlib.FlushType)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Deflate.cs" Line="1708">'DeflateManager.Deflate(FlushType)' has a cyclomatic complexity of 36. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Deflate.cs" Line="1716">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'DeflateManager.Deflate(FlushType)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeflateSlow(Ionic.Zlib.FlushType)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Deflate.cs" Line="1272">'DeflateManager.DeflateSlow(FlushType)' has a cyclomatic complexity of 27. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DYN_TREES" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.DYN_TREES' is declared as 'static readonly' but is initialized with a constant value '2'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#END_BLOCK" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.END_BLOCK' is declared as 'static readonly' but is initialized with a constant value '256'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FINISH_STATE" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.FINISH_STATE' is declared as 'static readonly' but is initialized with a constant value '666'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#INIT_STATE" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.INIT_STATE' is declared as 'static readonly' but is initialized with a constant value '42'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Initialize(Ionic.Zlib.ZlibCodec,Ionic.Zlib.CompressionLevel,System.Int32,Ionic.Zlib.CompressionStrategy)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="compressionStrategy" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Deflate.cs" Line="1531">'compressionStrategy', a parameter declared in 'DeflateManager.Initialize(ZlibCodec, CompressionLevel, int, CompressionStrategy)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Initialize(Ionic.Zlib.ZlibCodec,Ionic.Zlib.CompressionLevel,System.Int32,System.Int32,Ionic.Zlib.CompressionStrategy)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Deflate.cs" Line="1545">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'DeflateManager.Initialize(ZlibCodec, CompressionLevel, int, int, CompressionStrategy)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MAX_MATCH" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.MAX_MATCH' is declared as 'static readonly' but is initialized with a constant value '258'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MEM_LEVEL_DEFAULT" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.MEM_LEVEL_DEFAULT' is declared as 'static readonly' but is initialized with a constant value '8'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MEM_LEVEL_MAX" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.MEM_LEVEL_MAX' is declared as 'static readonly' but is initialized with a constant value '9'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MIN_MATCH" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.MIN_MATCH' is declared as 'static readonly' but is initialized with a constant value '3'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PRESET_DICT" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.PRESET_DICT' is declared as 'static readonly' but is initialized with a constant value '32'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#STATIC_TREES" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.STATIC_TREES' is declared as 'static readonly' but is initialized with a constant value '1'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#STORED_BLOCK" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.STORED_BLOCK' is declared as 'static readonly' but is initialized with a constant value '0'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z_ASCII" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.Z_ASCII' is declared as 'static readonly' but is initialized with a constant value '1'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z_BINARY" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.Z_BINARY' is declared as 'static readonly' but is initialized with a constant value '0'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z_DEFLATED" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.Z_DEFLATED' is declared as 'static readonly' but is initialized with a constant value '8'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z_UNKNOWN" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'DeflateManager.Z_UNKNOWN' is declared as 'static readonly' but is initialized with a constant value '2'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DeflateManager+Config" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Deflate.cs" Line="134">Initialize all static fields in 'DeflateManager.Config' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DeflateStream" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BufferSize" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_BufferSize(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="DeflateStream.cs" Line="359">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'DeflateStream.BufferSize.set(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CompressBuffer(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="DeflateStream.cs" Line="674">In method 'DeflateStream.CompressBuffer(byte[])', consider providing a more meaningful name than parameter name 'b'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompressString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="DeflateStream.cs" Line="644">In method 'DeflateStream.CompressString(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Length" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Length()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="DeflateStream.cs" Line="505">'DeflateStream.Length.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#UncompressBuffer(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Uncompress" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="DeflateStream.cs" Line="727">Correct the spelling of 'Uncompress' in member name 'DeflateStream.UncompressBuffer(byte[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UncompressString(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Uncompress" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="DeflateStream.cs" Line="701">Correct the spelling of 'Uncompress' in member name 'DeflateStream.UncompressString(byte[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GZipStream" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BufferSize" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_BufferSize(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="GZipStream.cs" Line="585">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'GZipStream.BufferSize.set(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CompressBuffer(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="GZipStream.cs" Line="974">In method 'GZipStream.CompressBuffer(byte[])', consider providing a more meaningful name than parameter name 'b'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompressString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="GZipStream.cs" Line="946">In method 'GZipStream.CompressString(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Crc32" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Crc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="GZipStream.cs" Line="220">Correct the spelling of 'Crc' in member name 'GZipStream.Crc32' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FileName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_FileName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="GZipStream.cs" Line="193">'GZipStream.FileName.set(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="GZipStream.cs" Line="192">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'GZipStream.FileName.set(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
              <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="GZipStream.cs" Line="188">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'GZipStream.FileName.set(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="GZipStream.cs" Line="194">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'GZipStream.FileName.set(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#LastModified" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'GZipStream.LastModified' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Length" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Length()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="GZipStream.cs" Line="713">'GZipStream.Length.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#UncompressBuffer(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Uncompress" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="GZipStream.cs" Line="1021">Correct the spelling of 'Uncompress' in member name 'GZipStream.UncompressBuffer(byte[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UncompressString(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Uncompress" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="GZipStream.cs" Line="999">Correct the spelling of 'Uncompress' in member name 'GZipStream.UncompressString(byte[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InflateBlocks" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Process(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="145">'InflateBlocks.Process(int)' has a cyclomatic complexity of 70. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="90" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="145">'InflateBlocks.Process(int)' has a maintainability index of 8. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InflateCodes" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#InflateFast(System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32,Ionic.Zlib.InflateBlocks,Ionic.Zlib.ZlibCodec)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="1166">'InflateCodes.InflateFast(int, int, int[], int, int[], int, InflateBlocks, ZlibCodec)' has a cyclomatic complexity of 29. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="1166">The 'this' parameter (or 'Me' in Visual Basic) of 'InflateCodes.InflateFast(int, int, int[], int, int[], int, InflateBlocks, ZlibCodec)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Process(Ionic.Zlib.InflateBlocks,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="804">'InflateCodes.Process(InflateBlocks, int)' has a cyclomatic complexity of 57. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="804">'InflateCodes.Process(InflateBlocks, int)' has a maintainability index of 15. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InflateManager" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Inflate(Ionic.Zlib.FlushType)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="1514">'InflateManager.Inflate(FlushType)' has a cyclomatic complexity of 35. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="flush" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="1514">Parameter 'flush' of 'InflateManager.Inflate(FlushType)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="1540">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'InflateManager.Inflate(FlushType)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="1547">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'InflateManager.Inflate(FlushType)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="1690">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'InflateManager.Inflate(FlushType)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SyncPoint(Ionic.Zlib.ZlibCodec)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="z" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Inflate.cs" Line="1792">Parameter 'z' of 'InflateManager.SyncPoint(ZlibCodec)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InfTree" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#huft_build(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="InfTree.cs" Line="118">'InfTree.huft_build(int[], int, int, int, int[], int[], int[], int[], int[], int[], int[])' has a cyclomatic complexity of 33. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="hn" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="InfTree.cs" Line="118">'hn', a parameter declared in 'InfTree.huft_build(int[], int, int, int, int[], int[], int[], int[], int[], int[], int[])', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
            <Message Id="v" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="InfTree.cs" Line="118">'v', a parameter declared in 'InfTree.huft_build(int[], int, int, int, int[], int[], int[], int[], int[], int[], int[])', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#inflate_trees_bits(System.Int32[],System.Int32[],System.Int32[],System.Int32[],Ionic.Zlib.ZlibCodec)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="c" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="InfTree.cs" Line="332">'c', a parameter declared in 'InfTree.inflate_trees_bits(int[], int[], int[], int[], ZlibCodec)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#inflate_trees_dynamic(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[],Ionic.Zlib.ZlibCodec)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="c" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="InfTree.cs" Line="351">'c', a parameter declared in 'InfTree.inflate_trees_dynamic(int, int, int[], int[], int[], int[], int[], int[], ZlibCodec)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#inflate_trees_fixed(System.Int32[],System.Int32[],System.Int32[][],System.Int32[][],Ionic.Zlib.ZlibCodec)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="z" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="InfTree.cs" Line="399">Parameter 'z' of 'InfTree.inflate_trees_fixed(int[], int[], int[][], int[][], ZlibCodec)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ParallelDeflateOutputStream" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.IO.Stream,Ionic.Zlib.CompressionLevel,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="level" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="273">Parameter 'level' of 'ParallelDeflateOutputStream.ParallelDeflateOutputStream(Stream, CompressionLevel, bool)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_DeflateOne(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="1186">Modify 'ParallelDeflateOutputStream._DeflateOne(object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="myItem" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="1157">'ParallelDeflateOutputStream._DeflateOne(object)' declares a variable, 'myItem', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_FlushFinish()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="667">'ParallelDeflateOutputStream._FlushFinish()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BufferPairsPerCore" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'ParallelDeflateOutputStream.BufferPairsPerCore' is declared as 'static readonly' but is initialized with a constant value '4'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BufferSize" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_BufferSize(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="453">Method 'ParallelDeflateOutputStream.BufferSize.set(int)' passes 'BufferSize' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Crc32" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Crc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="465">Correct the spelling of 'Crc' in member name 'ParallelDeflateOutputStream.Crc32' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeflateOneSegment(Ionic.Zlib.WorkItem)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="1201">The 'this' parameter (or 'Me' in Visual Basic) of 'ParallelDeflateOutputStream.DeflateOneSegment(WorkItem)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="rc" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="1203">'ParallelDeflateOutputStream.DeflateOneSegment(WorkItem)' declares a variable, 'rc', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="782">Change 'ParallelDeflateOutputStream.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="782">Modify 'ParallelDeflateOutputStream.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="782">Ensure that 'ParallelDeflateOutputStream.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose(System.Boolean)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="_newlyCompressedBlob" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="796">'ParallelDeflateOutputStream' contains field 'ParallelDeflateOutputStream._newlyCompressedBlob' that is of IDisposable type: 'AutoResetEvent'. Change the Dispose method on 'ParallelDeflateOutputStream' to call Dispose or Close on this field.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IO_BUFFER_SIZE_DEFAULT" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning">Field 'ParallelDeflateOutputStream.IO_BUFFER_SIZE_DEFAULT' is declared as 'static readonly' but is initialized with a constant value '65536'. Mark this field as 'const' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MaxBufferPairs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_MaxBufferPairs(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="401">Method 'ParallelDeflateOutputStream.MaxBufferPairs.set(int)' passes 'Value must be 4 or greater.' as the 'paramName' argument to a 'ArgumentException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#TraceOutput(Ionic.Zlib.ParallelDeflateOutputStream+TraceBits,System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.Write(System.String,System.Object)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="1237">Method 'ParallelDeflateOutputStream.TraceOutput(ParallelDeflateOutputStream.TraceBits, string, params object[])' passes a literal string as parameter 'format' of a call to 'Console.Write(string, object)'. Retrieve the following string(s) from a resource table instead: "{0:000} PDOS ".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Write(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="632">'ParallelDeflateOutputStream.Write(byte[], int, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="workitem" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="632">Correct the spelling of the unrecognized token 'workitem' in the literal '"Cannot enqueue workitem"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StaticTree" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Zlib.cs" Line="384">Initialize all static fields in 'StaticTree' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Tree" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#build_tree(Ionic.Zlib.DeflateManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="max_code" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Tree.cs" Line="285">'max_code', a variable declared in 'Tree.build_tree(DeflateManager)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WorkItem" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(System.Int32,Ionic.Zlib.CompressionLevel,Ionic.Zlib.CompressionStrategy,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="strategy" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ParallelDeflateOutputStream.cs" Line="47">Parameter 'strategy' of 'WorkItem.WorkItem(int, CompressionLevel, CompressionStrategy, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZlibBaseStream" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#finish()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibBaseStream.cs" Line="256">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ZlibBaseStream.finish()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibBaseStream.cs" Line="193">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZlibBaseStream.finish()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibBaseStream.cs" Line="271">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZlibBaseStream.finish()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibBaseStream.cs" Line="274">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZlibBaseStream.finish()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Read(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibBaseStream.cs" Line="418">'ZlibBaseStream.Read(byte[], int, int)' has a cyclomatic complexity of 36. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibBaseStream.cs" Line="514">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZlibBaseStream.Read(byte[], int, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibBaseStream.cs" Line="485">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ZlibBaseStream.Read(byte[], int, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UncompressBuffer(System.Byte[],System.IO.Stream)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="compressed" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibBaseStream.cs" Line="607">Parameter 'compressed' of 'ZlibBaseStream.UncompressBuffer(byte[], Stream)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UncompressString(System.Byte[],System.IO.Stream)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="compressed" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibBaseStream.cs" Line="584">Parameter 'compressed' of 'ZlibBaseStream.UncompressString(byte[], Stream)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZlibCodec" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Zlib" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Zlib' in type name 'ZlibCodec'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AvailableBytesIn" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.AvailableBytesIn' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AvailableBytesOut" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.AvailableBytesOut' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompressLevel" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.CompressLevel' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#flush_pending()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibCodec.cs" Line="673">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZlibCodec.flush_pending()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Rfc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibCodec.cs" Line="467">In method 'ZlibCodec.InitializeDeflate(CompressionLevel, bool)', correct the spelling of 'Rfc' in parameter name 'wantRfc1950Header' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Rfc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibCodec.cs" Line="501">In method 'ZlibCodec.InitializeDeflate(CompressionLevel, int, bool)', correct the spelling of 'Rfc' in parameter name 'wantRfc1950Header' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeInflate(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Rfc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibCodec.cs" Line="248">In method 'ZlibCodec.InitializeInflate(bool)', correct the spelling of 'Rfc' in parameter name 'expectRfc1950Header' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeInflate(System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Rfc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibCodec.cs" Line="284">In method 'ZlibCodec.InitializeInflate(int, bool)', correct the spelling of 'Rfc' in parameter name 'expectRfc1950Header' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InputBuffer" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.InputBuffer' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Message" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.Message' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NextIn" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.NextIn' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NextOut" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.NextOut' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OutputBuffer" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.OutputBuffer' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetDeflateParams(Ionic.Zlib.CompressionLevel,Ionic.Zlib.CompressionStrategy)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Params" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibCodec.cs" Line="632">Correct the spelling of 'Params' in member name 'ZlibCodec.SetDeflateParams(CompressionLevel, CompressionStrategy)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Strategy" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.Strategy' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TotalBytesIn" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.TotalBytesIn' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TotalBytesOut" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.TotalBytesOut' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WindowBits" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZlibCodec.WindowBits' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZlibConstants" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Zlib" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Zlib' in type name 'ZlibConstants'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Z_BUF_ERROR" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="BUF" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'BUF' in member name 'ZlibConstants.Z_BUF_ERROR' by changing it to 'Buf'.</Issue>
            </Message>
            <Message Id="ERROR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ERROR' in member name 'ZlibConstants.Z_BUF_ERROR' by changing it to 'Error'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ZlibConstants.Z_BUF_ERROR'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z_DATA_ERROR" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DATA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'DATA' in member name 'ZlibConstants.Z_DATA_ERROR' by changing it to 'Data'.</Issue>
            </Message>
            <Message Id="ERROR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ERROR' in member name 'ZlibConstants.Z_DATA_ERROR' by changing it to 'Error'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ZlibConstants.Z_DATA_ERROR'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z_NEED_DICT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DICT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'DICT' in member name 'ZlibConstants.Z_NEED_DICT' by changing it to 'Dict'.</Issue>
            </Message>
            <Message Id="NEED" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'NEED' in member name 'ZlibConstants.Z_NEED_DICT' by changing it to 'Need'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ZlibConstants.Z_NEED_DICT'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z_OK" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="OK" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error">Correct the casing of 'OK' in member name 'ZlibConstants.Z_OK' by changing it to 'Ok'. 'Ok' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ZlibConstants.Z_OK'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z_STREAM_END" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="END" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'END' in member name 'ZlibConstants.Z_STREAM_END' by changing it to 'End'.</Issue>
            </Message>
            <Message Id="STREAM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'STREAM' in member name 'ZlibConstants.Z_STREAM_END' by changing it to 'Stream'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ZlibConstants.Z_STREAM_END'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Z_STREAM_ERROR" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ERROR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ERROR' in member name 'ZlibConstants.Z_STREAM_ERROR' by changing it to 'Error'.</Issue>
            </Message>
            <Message Id="STREAM" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'STREAM' in member name 'ZlibConstants.Z_STREAM_ERROR' by changing it to 'Stream'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ZlibConstants.Z_STREAM_ERROR'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZlibException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Zlib" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Zlib' in type name 'ZlibException'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ZlibException': protected ZlibException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ZlibException': public ZlibException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ZlibException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="Zlib.cs" Line="282">In method 'ZlibException.ZlibException(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZlibStream" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Zlib" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Zlib' in type name 'ZlibStream'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BufferSize" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_BufferSize(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibStream.cs" Line="368">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZlibStream.BufferSize.set(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CompressBuffer(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibStream.cs" Line="663">In method 'ZlibStream.CompressBuffer(byte[])', consider providing a more meaningful name than parameter name 'b'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompressString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibStream.cs" Line="635">In method 'ZlibStream.CompressString(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UncompressBuffer(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Uncompress" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibStream.cs" Line="712">Correct the spelling of 'Uncompress' in member name 'ZlibStream.UncompressBuffer(byte[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UncompressString(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Uncompress" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging\DotNetZip\Zlib" File="ZlibStream.cs" Line="688">Correct the spelling of 'Uncompress' in member name 'ZlibStream.UncompressString(byte[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml">
       <Types>
        <Type Name="CalculationExtension" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CalcChain(OfficeOpenXml.ExcelWorkbook,OfficeOpenXml.FormulaParsing.FormulaParser,OfficeOpenXml.FormulaParsing.DependencyChain)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="CalculateExtentions.cs" Line="138">Modify 'CalculationExtension.CalcChain(ExcelWorkbook, FormulaParser, DependencyChain)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="e" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="CalculateExtentions.cs" Line="138">'CalculationExtension.CalcChain(ExcelWorkbook, FormulaParser, DependencyChain)' declares a variable, 'e', of type 'Exception', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="CalculateExtentions.cs" Line="134">'CalculationExtension.CalcChain(ExcelWorkbook, FormulaParser, DependencyChain)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Calculate(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="CalculateExtentions.cs" Line="92">In externally visible method 'CalculationExtension.Calculate(this ExcelRangeBase, ExcelCalculationOption)', validate parameter 'range' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Calculate(OfficeOpenXml.ExcelWorkbook,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="CalculateExtentions.cs" Line="51">In externally visible method 'CalculationExtension.Calculate(this ExcelWorkbook, ExcelCalculationOption)', validate parameter 'workbook' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Calculate(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="CalculateExtentions.cs" Line="81">In externally visible method 'CalculationExtension.Calculate(this ExcelWorksheet, ExcelCalculationOption)', validate parameter 'worksheet' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Calculate(OfficeOpenXml.ExcelWorksheet,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Formula" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="CalculateExtentions.cs" Line="98">In member 'CalculationExtension.Calculate(this ExcelWorksheet, string)', correct the casing of 'Formula' in parameter name 'Formula' by changing it to 'formula'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Calculate(OfficeOpenXml.ExcelWorksheet,System.String,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="CalculateExtentions.cs" Line="118">Modify 'CalculationExtension.Calculate(this ExcelWorksheet, string, ExcelCalculationOption)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Formula" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="CalculateExtentions.cs" Line="102">In member 'CalculationExtension.Calculate(this ExcelWorksheet, string, ExcelCalculationOption)', correct the casing of 'Formula' in parameter name 'Formula' by changing it to 'formula'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="CalculateExtentions.cs" Line="105">In externally visible method 'CalculationExtension.Calculate(this ExcelWorksheet, string, ExcelCalculationOption)', validate parameter 'worksheet' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="CalculateExtentions.cs" Line="106">In externally visible method 'CalculationExtension.Calculate(this ExcelWorksheet, string, ExcelCalculationOption)', validate parameter 'Formula' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eDataTypes" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eDataTypes' by changing it to 'E'.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'eDataTypes' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eErrorType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eErrorType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Div0" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Div" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Div' in member name 'eErrorType.Div0' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Num" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Num' in member name 'eErrorType.Num' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EncryptionAlgorithm" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AES128" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AES" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'AES' in member name 'EncryptionAlgorithm.AES128' by changing it to 'Aes'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AES192" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AES" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'AES' in member name 'EncryptionAlgorithm.AES192' by changing it to 'Aes'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AES256" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AES" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'AES' in member name 'EncryptionAlgorithm.AES256' by changing it to 'Aes'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eOrientation" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eOrientation' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ePageOrder" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'ePageOrder' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ePaperSize" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Name="NotFlagsNoZeroValue" Certainty="95" Level="CriticalError">Add a member to 'ePaperSize' that has a value of zero with a suggested name of 'None'.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'ePaperSize' by changing it to 'E'.</Issue>
          </Message>
          <Message TypeName="MarkEnumsWithFlags" Category="Microsoft.Design" CheckId="CA1027" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">The constituent members of 'ePaperSize' appear to represent flags that can be combined rather than discrete values. If this is correct, mark the enumeration with FlagsAttribute.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#C" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="C" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'ePaperSize.C'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#D" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="D" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'ePaperSize.D'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#E" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="E" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'ePaperSize.E'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ISOB4" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ISOB" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ISOB' in member name 'ePaperSize.ISOB4' by changing it to 'Isob'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ISOB5" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ISOB" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'ISOB' in member name 'ePaperSize.ISOB5' by changing it to 'Isob'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#JISB5Transverse" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="JISB" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'JISB' in member name 'ePaperSize.JISB5Transverse' by changing it to 'Jisb'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Six3_4Envelope" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ePaperSize.Six3_4Envelope'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Standard10_14" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ePaperSize.Standard10_14'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Standard11_17" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ePaperSize.Standard11_17'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eWorkSheetHidden" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="WorkSheet" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'WorkSheet' in type name 'eWorkSheetHidden' exists as a discrete term. If your usage is intended to be single word, case it as 'Worksheet'.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eWorkSheetHidden' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelAddress" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,OfficeOpenXml.ExcelPackage,OfficeOpenXml.ExcelAddressBase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Address" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="1181">In member 'ExcelAddress.ExcelAddress(string, ExcelPackage, ExcelAddressBase)', correct the casing of 'Address' in parameter name 'Address' by changing it to 'address'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_package" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelAddress._package' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#fullAddress" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelAddress.fullAddress' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelAddressBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,OfficeOpenXml.ExcelPackage,OfficeOpenXml.ExcelAddressBase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="pck" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="55">In method 'ExcelAddressBase.ExcelAddressBase(string, ExcelPackage, ExcelAddressBase)', correct the spelling of 'pck' in parameter name 'pck' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_address" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelAddressBase._address' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_addresses" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelAddressBase._addresses' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;ExcelAddress&gt;' in 'ExcelAddressBase._addresses' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_fromCol" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelAddressBase._fromCol' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_fromRow" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelAddressBase._fromRow' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_toCol" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelAddressBase._toCol' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_toRow" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelAddressBase._toRow' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_wb" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelAddressBase._wb' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="wb" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'wb' in member name 'ExcelAddressBase._wb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_ws" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelAddressBase._ws' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="ws" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'ws' in member name 'ExcelAddressBase._ws' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExtractAddress(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="460">'ExcelAddressBase.ExtractAddress(string)' has a cyclomatic complexity of 26. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="548">Modify 'ExcelAddressBase.ExtractAddress(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="521">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.ExtractAddress(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="521">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.ExtractAddress(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAddress()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="331">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.GetAddress()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetString(System.String,System.Int32,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="prevStrIx" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="1135">'ExcelAddressBase.GetString(string, int, out int)' declares a variable, 'prevStrIx', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="1134">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.GetString(string, int, out int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="1139">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.GetString(string, int, out int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="1141">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.GetString(string, int, out int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWorksheetPart(System.String,System.String,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="1060">Replace the call to 'string.operator ==(string, string)' in 'ExcelAddressBase.GetWorksheetPart(string, string, ref int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleBrackets(System.String,System.String,System.Collections.Generic.List`1&lt;System.String&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="second" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="555">Parameter 'second' of 'ExcelAddressBase.HandleBrackets(string, string, List&lt;string&gt;)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="564">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.HandleBrackets(string, string, List&lt;string&gt;)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="562">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.HandleBrackets(string, string, List&lt;string&gt;)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Insert(OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.ExcelAddressBase+eShiftType)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="cols" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="720">'ExcelAddressBase.Insert(ExcelAddressBase, ExcelAddressBase.eShiftType)' declares a variable, 'cols', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="retAddress" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="721">'ExcelAddressBase.Insert(ExcelAddressBase, ExcelAddressBase.eShiftType)' declares a variable, 'retAddress', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="rows" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="719">'ExcelAddressBase.Insert(ExcelAddressBase, ExcelAddressBase.eShiftType)' declares a variable, 'rows', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsValidName(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="1010">'ExcelAddressBase.IsValidName(string)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetAddress(System.String)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.IndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="238">Because the behavior of 'string.IndexOf(string, int)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.SetAddress(string)' with a call to 'string.IndexOf(string, int, StringComparison)'. If the result of 'string.IndexOf(string, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="241">Because the behavior of 'string.IndexOf(string, int)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.SetAddress(string)' with a call to 'string.IndexOf(string, int, StringComparison)'. If the result of 'string.IndexOf(string, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="236">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.SetAddress(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="246">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.SetAddress(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="236">In externally visible method 'ExcelAddressBase.SetAddress(string)', validate parameter 'address' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetRCFromTable(OfficeOpenXml.ExcelPackage,OfficeOpenXml.ExcelAddressBase)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="118">'ExcelAddressBase.SetRCFromTable(ExcelPackage, ExcelAddressBase)' has a cyclomatic complexity of 34. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.String.Equals(System.String,System.StringComparison)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="StringComparison" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="125">'ExcelAddressBase.SetRCFromTable(ExcelPackage, ExcelAddressBase)' passes 'StringComparison.InvariantCultureIgnoreCase' as the 'StringComparison' parameter to 'string.Equals(string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetWbWs(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="282">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.SetWbWs(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="291">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelAddressBase.SetWbWs(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Validate()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="440">Method 'ExcelAddressBase.Validate()' passes 'Start cell Address must be less or equal to End cell address' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelBackgroundImage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DeletePrevImage()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelBackgroundImage.cs" Line="142">Replace the call to 'string.operator !=(string, string)' in 'ExcelBackgroundImage.DeletePrevImage()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetFromFile(System.IO.FileInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelBackgroundImage.cs" Line="103">Consider changing the type of parameter 'PictureFile' in 'ExcelBackgroundImage.SetFromFile(FileInfo)' from 'FileInfo' to its base type 'FileSystemInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="Picture" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelBackgroundImage.cs" Line="103">In member 'ExcelBackgroundImage.SetFromFile(FileInfo)', correct the casing of 'Picture' in parameter name 'PictureFile' by changing it to 'picture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelBackgroundImage.cs" Line="109">In externally visible method 'ExcelBackgroundImage.SetFromFile(FileInfo)', validate parameter 'PictureFile' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelCalcMode" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Calc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Calc' in type name 'ExcelCalcMode'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AutomaticNoTable" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NoTable" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'NoTable' in member name 'ExcelCalcMode.AutomaticNoTable' exists as a discrete term. If your usage is intended to be single word, case it as 'Notable' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelCellBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddToRowColumnTranslator(System.String,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="264">'ExcelCellBase.AddToRowColumnTranslator(string, int, int, int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="286">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.AddToRowColumnTranslator(string, int, int, int, int)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="296">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.AddToRowColumnTranslator(string, int, int, int, int)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAddress(System.Int32,System.Boolean,System.Int32,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Absolute" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="564">In member 'ExcelCellBase.GetAddress(int, bool, int, bool)', correct the casing of 'Absolute' in parameter name 'AbsoluteCol' by changing it to 'absolute'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="564">In member 'ExcelCellBase.GetAddress(int, bool, int, bool)', correct the casing of 'Absolute' in parameter name 'AbsoluteRow' by changing it to 'absolute'.</Issue>
            </Message>
            <Message Id="Column" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="564">In member 'ExcelCellBase.GetAddress(int, bool, int, bool)', correct the casing of 'Column' in parameter name 'Column' by changing it to 'column'.</Issue>
            </Message>
            <Message Id="Row" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="564">In member 'ExcelCellBase.GetAddress(int, bool, int, bool)', correct the casing of 'Row' in parameter name 'Row' by changing it to 'row'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="565">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetAddress(int, bool, int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAddress(System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Column" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="552">In member 'ExcelCellBase.GetAddress(int, int)', correct the casing of 'Column' in parameter name 'Column' by changing it to 'column'.</Issue>
            </Message>
            <Message Id="Row" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="552">In member 'ExcelCellBase.GetAddress(int, int)', correct the casing of 'Row' in parameter name 'Row' by changing it to 'row'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAddress(System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Absolute" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="575">In member 'ExcelCellBase.GetAddress(int, int, bool)', correct the casing of 'Absolute' in parameter name 'Absolute' by changing it to 'absolute'.</Issue>
            </Message>
            <Message Id="Column" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="575">In member 'ExcelCellBase.GetAddress(int, int, bool)', correct the casing of 'Column' in parameter name 'Column' by changing it to 'column'.</Issue>
            </Message>
            <Message Id="Row" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="575">In member 'ExcelCellBase.GetAddress(int, int, bool)', correct the casing of 'Row' in parameter name 'Row' by changing it to 'row'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="582">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetAddress(int, int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="586">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetAddress(int, int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAddress(System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="From" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="598">In member 'ExcelCellBase.GetAddress(int, int, int, int)', correct the casing of 'From' in parameter name 'FromColumn' by changing it to 'from'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="598">In member 'ExcelCellBase.GetAddress(int, int, int, int)', correct the casing of 'From' in parameter name 'FromRow' by changing it to 'from'.</Issue>
            </Message>
            <Message Id="To" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="598">In member 'ExcelCellBase.GetAddress(int, int, int, int)', correct the casing of 'To' in parameter name 'ToColumn' by changing it to 'to'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="598">In member 'ExcelCellBase.GetAddress(int, int, int, int)', correct the casing of 'To' in parameter name 'ToRow' by changing it to 'to'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Absolute" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="611">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool)', correct the casing of 'Absolute' in parameter name 'Absolute' by changing it to 'absolute'.</Issue>
            </Message>
            <Message Id="From" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="611">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool)', correct the casing of 'From' in parameter name 'FromColumn' by changing it to 'from'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="611">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool)', correct the casing of 'From' in parameter name 'FromRow' by changing it to 'from'.</Issue>
            </Message>
            <Message Id="To" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="611">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool)', correct the casing of 'To' in parameter name 'ToColumn' by changing it to 'to'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="611">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool)', correct the casing of 'To' in parameter name 'ToRow' by changing it to 'to'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="626">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetAddress(int, int, int, int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="626">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetAddress(int, int, int, int, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fixed" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="647">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool, bool, bool, bool)', correct the casing of 'Fixed' in parameter name 'FixedFromColumn' by changing it to 'fixed'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="647">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool, bool, bool, bool)', correct the casing of 'Fixed' in parameter name 'FixedFromRow' by changing it to 'fixed'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="647">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool, bool, bool, bool)', correct the casing of 'Fixed' in parameter name 'FixedToColumn' by changing it to 'fixed'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="647">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool, bool, bool, bool)', correct the casing of 'Fixed' in parameter name 'FixedToRow' by changing it to 'fixed'.</Issue>
            </Message>
            <Message Id="From" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="647">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool, bool, bool, bool)', correct the casing of 'From' in parameter name 'FromColumn' by changing it to 'from'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="647">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool, bool, bool, bool)', correct the casing of 'From' in parameter name 'FromRow' by changing it to 'from'.</Issue>
            </Message>
            <Message Id="To" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="647">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool, bool, bool, bool)', correct the casing of 'To' in parameter name 'ToColumn' by changing it to 'to'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="647">In member 'ExcelCellBase.GetAddress(int, int, int, int, bool, bool, bool, bool)', correct the casing of 'To' in parameter name 'ToRow' by changing it to 'to'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="660">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetAddress(int, int, int, int, bool, bool, bool, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="660">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetAddress(int, int, int, int, bool, bool, bool, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetColumnLetter(System.Int32)" Kind="Method" Static="True" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="359">In method 'ExcelCellBase.GetColumnLetter(int)', correct the spelling of 'i' in parameter name 'iColumnNumber' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetColumnLetter(System.Int32,System.Boolean)" Kind="Method" Static="True" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="363">In method 'ExcelCellBase.GetColumnLetter(int, bool)', correct the spelling of 'i' in parameter name 'iColumnNumber' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFullAddress(System.String,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="690">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetFullAddress(string, string, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="687">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetFullAddress(string, string, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="699">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetFullAddress(string, string, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="680">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetFullAddress(string, string, bool)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRC(System.String,System.Int32,System.Boolean&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="319">Replace the call to 'string.operator ==(string, string)' in 'ExcelCellBase.GetRC(string, int, out bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRCFmt(System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="307">'ExcelCellBase.GetRCFmt(int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="308">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetRCFmt(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="308">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetRCFmt(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRowCol(System.String,System.Int32&amp;,System.Int32&amp;,System.Boolean)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="512">'ExcelCellBase.GetRowCol(string, out int, out int, bool)' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="493">'ExcelCellBase.GetRowCol(string, out int, out int, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="477">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetRowCol(string, out int, out int, bool)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="493">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetRowCol(string, out int, out int, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="464">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetRowCol(string, out int, out int, bool)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="505">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.GetRowCol(string, out int, out int, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="516">Replace the call to 'string.operator ==(string, string)' in 'ExcelCellBase.GetRowCol(string, out int, out int, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRowColFromAddress(System.String,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="401">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.GetRowColFromAddress(string, out int, out int, out int, out int)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsValidAddress(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="712">'ExcelCellBase.IsValidAddress(string)' has a cyclomatic complexity of 40. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="713">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.IsValidAddress(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="765">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.IsValidAddress(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="769">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.IsValidAddress(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="772">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.IsValidAddress(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="783">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.IsValidAddress(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="785">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.IsValidAddress(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="722">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="728">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="763">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="763">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="767">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="767">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="767">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="767">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="776">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="776">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="781">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="781">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="763">Replace the call to 'string.operator ==(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="763">Replace the call to 'string.operator ==(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="776">Replace the call to 'string.operator ==(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="776">Replace the call to 'string.operator ==(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="781">Replace the call to 'string.operator ==(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="781">Replace the call to 'string.operator ==(string, string)' in 'ExcelCellBase.IsValidAddress(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="713">In externally visible method 'ExcelCellBase.IsValidAddress(string)', validate parameter 'address' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsValidCellAddress(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="811">Modify 'ExcelCellBase.IsValidCellAddress(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToAbs(System.String,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="216">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.ToAbs(string, int, int, int, int)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="218">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.ToAbs(string, int, int, int, int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="226">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.ToAbs(string, int, int, int, int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToR1C1(System.String,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="180">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.ToR1C1(string, int, int, int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="184">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.ToR1C1(string, int, int, int, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="193">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.ToR1C1(string, int, int, int, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="187">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelCellBase.ToR1C1(string, int, int, int, int)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Translate(System.String,OfficeOpenXml.ExcelCellBase+dlgTransl,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="110">'ExcelCellBase.Translate(string, ExcelCellBase.dlgTransl, int, int, int, int)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="122">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.Translate(string, ExcelCellBase.dlgTransl, int, int, int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="153">Replace the call to 'string.operator !=(string, string)' in 'ExcelCellBase.Translate(string, ExcelCellBase.dlgTransl, int, int, int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="111">Replace the call to 'string.operator ==(string, string)' in 'ExcelCellBase.Translate(string, ExcelCellBase.dlgTransl, int, int, int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateFormulaReferences(System.String,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="875">Modify 'ExcelCellBase.UpdateFormulaReferences(string, int, int, int, int)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="d" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCellBase.cs" Line="830">'ExcelCellBase.UpdateFormulaReferences(string, int, int, int, int)' declares a variable, 'd', of type 'Dictionary&lt;string, object&gt;', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChartsheet" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Chartsheet" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Chartsheet' in type name 'ExcelChartsheet'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Xml.XmlNamespaceManager,OfficeOpenXml.ExcelPackage,System.String,System.Uri,System.String,System.Int32,System.Int32,OfficeOpenXml.eWorkSheetHidden)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="98">In member 'ExcelChartsheet.ExcelChartsheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden)', correct the casing of 'ID' in parameter name 'positionID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="98">In member 'ExcelChartsheet.ExcelChartsheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden)', correct the casing of 'ID' in parameter name 'relID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="98">In member 'ExcelChartsheet.ExcelChartsheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden)', correct the casing of 'ID' in parameter name 'sheetID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="pck" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="98">In method 'ExcelChartsheet.ExcelChartsheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden)', correct the spelling of 'pck' in parameter name 'pck' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="rel" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="98">In method 'ExcelChartsheet.ExcelChartsheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden)', correct the spelling of 'rel' in parameter name 'relID' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Xml.XmlNamespaceManager,OfficeOpenXml.ExcelPackage,System.String,System.Uri,System.String,System.Int32,System.Int32,OfficeOpenXml.eWorkSheetHidden,OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="93">In member 'ExcelChartsheet.ExcelChartsheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden, eChartType)', correct the casing of 'ID' in parameter name 'positionID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="93">In member 'ExcelChartsheet.ExcelChartsheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden, eChartType)', correct the casing of 'ID' in parameter name 'relID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="93">In member 'ExcelChartsheet.ExcelChartsheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden, eChartType)', correct the casing of 'ID' in parameter name 'sheetID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="pck" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="93">In method 'ExcelChartsheet.ExcelChartsheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden, eChartType)', correct the spelling of 'pck' in parameter name 'pck' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="rel" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="93">In method 'ExcelChartsheet.ExcelChartsheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden, eChartType)', correct the spelling of 'rel' in parameter name 'relID' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelColumn" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelWorksheet,System.Int32)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="Worksheet" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="43">In member 'ExcelColumn.ExcelColumn(ExcelWorksheet, int)', correct the casing of 'Worksheet' in parameter name 'Worksheet' by changing it to 'worksheet'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="57">In externally visible method 'ExcelColumn.ExcelColumn(ExcelWorksheet, int)', validate parameter 'Worksheet' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AutoFit(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Minimum" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="279">In member 'ExcelColumn.AutoFit(double)', correct the casing of 'Minimum' in parameter name 'MinimumWidth' by changing it to 'minimum'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AutoFit(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Maximum" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="291">In member 'ExcelColumn.AutoFit(double, double)', correct the casing of 'Maximum' in parameter name 'MaximumWidth' by changing it to 'maximum'.</Issue>
            </Message>
            <Message Id="Minimum" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="291">In member 'ExcelColumn.AutoFit(double, double)', correct the casing of 'Minimum' in parameter name 'MinimumWidth' by changing it to 'minimum'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ColumnMax" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_ColumnMax(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="84">In method 'ExcelColumn.ColumnMax.set(int)', call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
              </Message>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="81">'ExcelColumn.ColumnMax.set(int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="90">'ExcelColumn.ColumnMax.set(int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="ColumnMax" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="90">Correct the spelling of the unrecognized token 'ColumnMax' in the literal '"ColumnMax can not span over existing column "'.</Issue>
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="81">Correct the spelling of the unrecognized token 'ColumnMax' in the literal '"ColumnMax out of range"'.</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="90">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelColumn.ColumnMax.set(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#StyleID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="236">Correct the casing of 'ID' in member name 'ExcelColumn.StyleID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelColumn.cs" Line="260">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelColumn.ToString()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelComment" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Author" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Author()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelComment.cs" Line="77">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelComment.Author.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Author(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelComment.cs" Line="82">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelComment.Author.set(string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelCommentCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">'ExcelCommentCollection' appears to be a non-generic, strongly typed collection. Add an implementation to the instance of IEnumerable&lt;T&gt; where T is the underlying element type of 'ExcelCommentCollection'.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'ExcelCommentCollection' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Add(OfficeOpenXml.ExcelRangeBase,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="159">In member 'ExcelCommentCollection.Add(ExcelRangeBase, string, string)', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="176">Replace the call to 'string.operator !=(string, string)' in 'ExcelCommentCollection.Add(ExcelRangeBase, string, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="161">In externally visible method 'ExcelCommentCollection.Add(ExcelRangeBase, string, string)', validate parameter 'cell' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddCommentsFromXml()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="80">In method 'ExcelCommentCollection.AddCommentsFromXml()', call System.IDisposable.Dispose on object 'new ExcelRangeBase(this.Worksheet, node.GetAttribute("ref"))' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CommentXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="88">Modify member 'ExcelCommentCollection.CommentXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[OfficeOpenXml.ExcelCellAddress]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseIntegralOrStringArgumentForIndexers" Category="Microsoft.Design" CheckId="CA1043" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="139">Use an integral value or string as the parameter to indexer 'ExcelCommentCollection.this[ExcelCellAddress]'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Item(OfficeOpenXml.ExcelCellAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="140">In externally visible method 'ExcelCommentCollection.this.get(ExcelCellAddress)', validate parameter 'cell' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="123">In member 'ExcelCommentCollection.this[int]', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Item(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="126">Method 'ExcelCommentCollection.this.get(int)' passes 'Comment index out of range' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Remove(OfficeOpenXml.ExcelComment)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="189">In externally visible method 'ExcelCommentCollection.Remove(ExcelComment)', validate parameter 'comment' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveAt(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="215">In member 'ExcelCommentCollection.RemoveAt(int)', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="221">Make 'ExcelCommentCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="206">Change 'ExcelCommentCollection.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="206">Modify 'ExcelCommentCollection.IDisposable.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="RenameDispose" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="206">Rename 'ExcelCommentCollection.IDisposable.Dispose()' to 'Dispose' and ensure that it is declared as public and sealed.</Issue>
            </Message>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelCommentCollection.cs" Line="206">Make 'ExcelCommentCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IDisposable.Dispose()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelErrorValue" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="181">'obj', a parameter, is cast to type 'ExcelErrorValue' multiple times in method 'ExcelErrorValue.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Addition(OfficeOpenXml.ExcelErrorValue,OfficeOpenXml.ExcelErrorValue)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="v" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="169">In method 'ExcelErrorValue.operator +(ExcelErrorValue, ExcelErrorValue)', correct the spelling of 'v' in parameter name 'v1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="169">In method 'ExcelErrorValue.operator +(ExcelErrorValue, ExcelErrorValue)', correct the spelling of 'v' in parameter name 'v2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="169">Provide a method named 'Add' as a friendly alternate for operator 'ExcelErrorValue.operator +(ExcelErrorValue, ExcelErrorValue)'.</Issue>
            </Message>
            <Message TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="169">Consider adding an overload of the equality operator for 'ExcelErrorValue' that takes the same parameters as 'ExcelErrorValue.operator +(ExcelErrorValue, ExcelErrorValue)'.</Issue>
            </Message>
            <Message Id="v2" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="169">Parameter 'v2' of 'ExcelErrorValue.operator +(ExcelErrorValue, ExcelErrorValue)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Addition(System.Object,OfficeOpenXml.ExcelErrorValue)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="v" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="165">In method 'ExcelErrorValue.operator +(object, ExcelErrorValue)', correct the spelling of 'v' in parameter name 'v1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="165">In method 'ExcelErrorValue.operator +(object, ExcelErrorValue)', correct the spelling of 'v' in parameter name 'v2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="165">Provide a method named 'Add' as a friendly alternate for operator 'ExcelErrorValue.operator +(object, ExcelErrorValue)'.</Issue>
            </Message>
            <Message Id="v1" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="165">Parameter 'v1' of 'ExcelErrorValue.operator +(object, ExcelErrorValue)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="NoAllowedExceptions" Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="161">'ExcelErrorValue.ToString()' creates an exception of type 'ArgumentException'. Exceptions should not be raised in this type of method. If this exception instance might be raised, change this method's logic so it no longer raises an exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="136">The property name 'ExcelErrorValue.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelErrorValue+Values" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelErrorValue.Values'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Div0" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Div" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Div' in member name 'ExcelErrorValue.Values.Div0' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Num" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Num' in member name 'ExcelErrorValue.Values.Num' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToErrorType(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelValues.cs" Line="104">In method 'ExcelErrorValue.Values.ToErrorType(string)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelFormulaAddress" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Addresses" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="1302">Change 'List&lt;ExcelFormulaAddress&gt;' in 'ExcelFormulaAddress.Addresses' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFixed(System.String,System.Boolean&amp;,System.Boolean&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="1256">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFormulaAddress.GetFixed(string, out bool, out bool)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetFixed()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelAddress.cs" Line="1241">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelFormulaAddress.SetFixed()' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelHeaderFooter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#differentFirst" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="different" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHeaderFooter.cs" Line="326">Correct the casing of 'different' in member name 'ExcelHeaderFooter.differentFirst' by changing it to 'Different'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#differentOddEven" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="different" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHeaderFooter.cs" Line="307">Correct the casing of 'different' in member name 'ExcelHeaderFooter.differentOddEven' by changing it to 'Different'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetText(OfficeOpenXml.ExcelHeaderFooterText)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHeaderFooter.cs" Line="534">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelHeaderFooter.GetText(ExcelHeaderFooterText)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelHeaderFooterText" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CenteredText" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelHeaderFooterText.CenteredText' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertPicture(System.Drawing.Image,OfficeOpenXml.PictureAlignment)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Alignment" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHeaderFooter.cs" Line="124">In member 'ExcelHeaderFooterText.InsertPicture(Image, PictureAlignment)', correct the casing of 'Alignment' in parameter name 'Alignment' by changing it to 'alignment'.</Issue>
            </Message>
            <Message Id="Picture" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHeaderFooter.cs" Line="124">In member 'ExcelHeaderFooterText.InsertPicture(Image, PictureAlignment)', correct the casing of 'Picture' in parameter name 'Picture' by changing it to 'picture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertPicture(System.IO.FileInfo,OfficeOpenXml.PictureAlignment)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHeaderFooter.cs" Line="140">Consider changing the type of parameter 'PictureFile' in 'ExcelHeaderFooterText.InsertPicture(FileInfo, PictureAlignment)' from 'FileInfo' to its base type 'FileSystemInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="Alignment" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHeaderFooter.cs" Line="140">In member 'ExcelHeaderFooterText.InsertPicture(FileInfo, PictureAlignment)', correct the casing of 'Alignment' in parameter name 'Alignment' by changing it to 'alignment'.</Issue>
            </Message>
            <Message Id="Picture" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHeaderFooter.cs" Line="140">In member 'ExcelHeaderFooterText.InsertPicture(FileInfo, PictureAlignment)', correct the casing of 'Picture' in parameter name 'PictureFile' by changing it to 'picture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHeaderFooter.cs" Line="148">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelHeaderFooterText.InsertPicture(FileInfo, PictureAlignment)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHeaderFooter.cs" Line="146">In externally visible method 'ExcelHeaderFooterText.InsertPicture(FileInfo, PictureAlignment)', validate parameter 'PictureFile' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LeftAlignedText" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelHeaderFooterText.LeftAlignedText' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RightAlignedText" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelHeaderFooterText.RightAlignedText' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelHyperLink" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="HyperLink" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'HyperLink' in type name 'ExcelHyperLink' exists as a discrete term. If your usage is intended to be single word, case it as 'Hyperlink'.</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">Add [Serializable] to 'ExcelHyperLink' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHyperLink.cs" Line="84">In member 'ExcelHyperLink.ExcelHyperLink(string)', consider replacing the data type identifier 'String' in parameter name 'uriString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHyperLink.cs" Line="84">Change the type of parameter 'uriString' of method 'ExcelHyperLink.ExcelHyperLink(string)' from string to System.Uri, or provide an overload of 'ExcelHyperLink.ExcelHyperLink(string)', that allows 'uriString' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.UriKind)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHyperLink.cs" Line="84">In member 'ExcelHyperLink.ExcelHyperLink(string, UriKind)', consider replacing the data type identifier 'String' in parameter name 'uriString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelHyperLink.cs" Line="84">Change the type of parameter 'uriString' of method 'ExcelHyperLink.ExcelHyperLink(string, UriKind)' from string to System.Uri, or provide an overload of 'ExcelHyperLink.ExcelHyperLink(string, UriKind)', that allows 'uriString' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelNamedRange" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ExcelNamedRange' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelNamedRangeCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(System.String,OfficeOpenXml.ExcelRangeBase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="70">In method 'ExcelNamedRangeCollection.Add(string, ExcelRangeBase)', object 'item' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'item' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="74">In method 'ExcelNamedRangeCollection.Add(string, ExcelRangeBase)', object 'item' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'item' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="65">In member 'ExcelNamedRangeCollection.Add(string, ExcelRangeBase)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="Range" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="65">In member 'ExcelNamedRangeCollection.Add(string, ExcelRangeBase)', correct the casing of 'Range' in parameter name 'Range' by changing it to 'range'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="67">In externally visible method 'ExcelNamedRangeCollection.Add(string, ExcelRangeBase)', validate parameter 'Range' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFormula(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="123">In method 'ExcelNamedRangeCollection.AddFormula(string, string)', object 'item' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'item' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Formula" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="122">In member 'ExcelNamedRangeCollection.AddFormula(string, string)', correct the casing of 'Formula' in parameter name 'Formula' by changing it to 'formula'.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="122">In member 'ExcelNamedRangeCollection.AddFormula(string, string)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddName(System.String,OfficeOpenXml.ExcelNamedRange)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="84">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelNamedRangeCollection.AddName(string, ExcelNamedRange)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddValue(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="95">In method 'ExcelNamedRangeCollection.AddValue(string, object)', object 'item' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'item' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="94">In member 'ExcelNamedRangeCollection.AddValue(string, object)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ContainsKey(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="156">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelNamedRangeCollection.ContainsKey(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="156">In externally visible method 'ExcelNamedRangeCollection.ContainsKey(string)', validate parameter 'key' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="186">In member 'ExcelNamedRangeCollection.this[int]', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="179">In member 'ExcelNamedRangeCollection.this[string]', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Item(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="180">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelNamedRangeCollection.this.get(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="180">In externally visible method 'ExcelNamedRangeCollection.this.get(string)', validate parameter 'Name' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Remove(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="133">In member 'ExcelNamedRangeCollection.Remove(string)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="134">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelNamedRangeCollection.Remove(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="141">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelNamedRangeCollection.Remove(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="143">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelNamedRangeCollection.Remove(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelNamedRangeCollection.cs" Line="134">In externally visible method 'ExcelNamedRangeCollection.Remove(string)', validate parameter 'Name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPackage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="245">In method 'ExcelPackage.ExcelPackage()', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.FileInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="255">In method 'ExcelPackage.ExcelPackage(FileInfo)', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.FileInfo,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="266">In method 'ExcelPackage.ExcelPackage(FileInfo, string)', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="329">In externally visible method 'ExcelPackage.ExcelPackage(Stream)', validate parameter 'newStream' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.Stream,System.IO.Stream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="372">'ExcelPackage.ExcelPackage(Stream, Stream)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="376">'ExcelPackage.ExcelPackage(Stream, Stream)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="370">In externally visible method 'ExcelPackage.ExcelPackage(Stream, Stream)', validate parameter 'newStream' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.Stream,System.IO.Stream,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="391">'ExcelPackage.ExcelPackage(Stream, Stream, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="395">'ExcelPackage.ExcelPackage(Stream, Stream, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Password" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="168">In member 'ExcelPackage.ExcelPackage(Stream, Stream, string)', correct the casing of 'Password' in parameter name 'Password' by changing it to 'password'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="389">In externally visible method 'ExcelPackage.ExcelPackage(Stream, Stream, string)', validate parameter 'newStream' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.Stream,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="347">'ExcelPackage.ExcelPackage(Stream, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Password" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="168">In member 'ExcelPackage.ExcelPackage(Stream, string)', correct the casing of 'Password' in parameter name 'Password' by changing it to 'password'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="345">In externally visible method 'ExcelPackage.ExcelPackage(Stream, string)', validate parameter 'newStream' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddImage(System.Byte[],System.Uri,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="407">In method 'ExcelPackage.AddImage(byte[], Uri, string)', call System.IDisposable.Dispose on object 'hashProvider' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConstructNewFile(System.IO.Stream,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="571">'ExcelPackage.ConstructNewFile(Stream, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="567">'ExcelPackage.ConstructNewFile(Stream, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyStream(System.IO.Stream,System.IO.Stream&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="1092">'ExcelPackage.CopyStream(Stream, ref Stream)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="1096">'ExcelPackage.CopyStream(Stream, ref Stream)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="inputstream" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="1092">Correct the spelling of the unrecognized token 'inputstream' in the literal '"Can not read from inputstream"'.</Issue>
            </Message>
            <Message Id="outputstream" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="1096">Correct the spelling of the unrecognized token 'outputstream' in the literal '"Can not write to outputstream"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateBlankWb()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="workbook" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="594">'ExcelPackage.CreateBlankWb()' declares a variable, 'workbook', of type 'XmlDocument', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateDefaultNSM()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="649">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelPackage.CreateDefaultNSM()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateFromTemplate(System.IO.FileInfo,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="532">'ExcelPackage.CreateFromTemplate(FileInfo, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="541">'ExcelPackage.CreateFromTemplate(FileInfo, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="TemplatePath" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="541">Correct the spelling of the unrecognized token 'TemplatePath' in the literal '"Passed invalid TemplatePath to Excel Template"'.</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="528">'ExcelPackage.CreateFromTemplate(FileInfo, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetImageInfo(System.Byte[])" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="467">In method 'ExcelPackage.GetImageInfo(byte[])', call System.IDisposable.Dispose on object 'hashProvider' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNewUri(OfficeOpenXml.Packaging.ZipPackage,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="480">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelPackage.GetNewUri(ZipPackage, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="485">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPackage.GetNewUri(ZipPackage, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="1016">In method 'ExcelPackage.Load(Stream)', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load(System.IO.Stream,System.IO.Stream,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="1050">In method 'ExcelPackage.Load(Stream, Stream, string)', call System.IDisposable.Dispose on object 'encrStream' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="1072">'ExcelPackage.Load(Stream, Stream, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="eph" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="1069">'ExcelPackage.Load(Stream, Stream, string)' declares a variable, 'eph', of type 'EncryptedPackageHandler', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="1067">'ExcelPackage.Load(Stream, Stream, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load(System.IO.Stream,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="1025">In method 'ExcelPackage.Load(Stream, string)', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Password" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="1024">In member 'ExcelPackage.Load(Stream, string)', correct the casing of 'Password' in parameter name 'Password' by changing it to 'password'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadImage(System.Byte[],System.Uri,OfficeOpenXml.Packaging.ZipPackagePart)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="437">In method 'ExcelPackage.LoadImage(byte[], Uri, ZipPackagePart)', call System.IDisposable.Dispose on object 'hashProvider' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="776">In method 'ExcelPackage.Save()', object 'fi' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'fi' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="769">'ExcelPackage.Save()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="798">'ExcelPackage.Save()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="769">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPackage.Save()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="806">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPackage.Save()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveAs(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Output" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="849">In member 'ExcelPackage.SaveAs(Stream)', correct the casing of 'Output' in parameter name 'OutputStream' by changing it to 'output'.</Issue>
            </Message>
            <Message Id="pos" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="857">'ExcelPackage.SaveAs(Stream)' declares a variable, 'pos', of type 'long', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveAs(System.IO.Stream,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Output" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPackage.cs" Line="878">In member 'ExcelPackage.SaveAs(Stream, string)', correct the casing of 'Output' in parameter name 'OutputStream' by changing it to 'output'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPrinterSettings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FitToHeight" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_FitToHeight(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPrinterSettings.cs" Line="498">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPrinterSettings.FitToHeight.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#FitToWidth" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_FitToWidth(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPrinterSettings.cs" Line="481">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPrinterSettings.FitToWidth.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Orientation" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Orientation(OfficeOpenXml.eOrientation)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPrinterSettings.cs" Line="464">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelPrinterSettings.Orientation.set(eOrientation)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#PaperSize" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_PaperSize()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPrinterSettings.cs" Line="809">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelPrinterSettings.PaperSize.get()' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPrinterSettings.cs" Line="807">Replace the call to 'string.operator !=(string, string)' in 'ExcelPrinterSettings.PaperSize.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_PaperSize(OfficeOpenXml.ePaperSize)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPrinterSettings.cs" Line="819">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPrinterSettings.PaperSize.set(ePaperSize)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#RepeatColumns" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_RepeatColumns(OfficeOpenXml.ExcelAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPrinterSettings.cs" Line="657">In method 'ExcelPrinterSettings.RepeatColumns.set(ExcelAddress)', call System.IDisposable.Dispose on object 'new ExcelRangeBase(this._ws, addr)' before all references to it are out of scope.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPrinterSettings.cs" Line="635">In externally visible method 'ExcelPrinterSettings.RepeatColumns.set(ExcelAddress)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#RepeatRows" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_RepeatRows(OfficeOpenXml.ExcelAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPrinterSettings.cs" Line="602">In method 'ExcelPrinterSettings.RepeatRows.set(ExcelAddress)', call System.IDisposable.Dispose on object 'new ExcelRangeBase(this._ws, addr)' before all references to it are out of scope.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPrinterSettings.cs" Line="580">In externally visible method 'ExcelPrinterSettings.RepeatRows.set(ExcelAddress)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Scale" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Scale(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelPrinterSettings.cs" Line="513">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPrinterSettings.Scale.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelProtectedRange" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_algorithm" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelProtectedRange._algorithm' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Address" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Address(OfficeOpenXml.ExcelAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelProtectedRange.cs" Line="84">In externally visible method 'ExcelProtectedRange.Address.set(ExcelAddress)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Algorithm" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_Algorithm(OfficeOpenXml.eProtectedRangeAlgorithm)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelProtectedRange.cs" Line="183">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelProtectedRange.Algorithm.set(eProtectedRangeAlgorithm)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelProtectedRange.cs" Line="187">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelProtectedRange.Algorithm.set(eProtectedRangeAlgorithm)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SetPassword(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelProtectedRange.cs" Line="111">In method 'ExcelProtectedRange.SetPassword(string)', call System.IDisposable.Dispose on object 'hp' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelProtectedRangeCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="ws" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelProtectedRangeCollection.cs" Line="24">Parameter 'ws' of 'ExcelProtectedRangeCollection.ExcelProtectedRangeCollection(XmlNamespaceManager, XmlNode, ExcelWorksheet)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(OfficeOpenXml.ExcelProtectedRange)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelProtectedRangeCollection.cs" Line="60">In externally visible method 'ExcelProtectedRangeCollection.Remove(ExcelProtectedRange)', validate parameter 'item' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.ExcelProtectedRange&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelProtectedRangeCollection.cs" Line="85">Make 'ExcelProtectedRangeCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;ExcelProtectedRange&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelProtectedRangeCollection.cs" Line="90">Make 'ExcelProtectedRangeCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelProtection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SetPassword(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Password" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelProtection.cs" Line="58">In member 'ExcelProtection.SetPassword(string)', correct the casing of 'Password' in parameter name 'Password' by changing it to 'password'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelProtection.cs" Line="65">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelProtection.SetPassword(string)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelRange" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ExcelRange' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetTableAddess(OfficeOpenXml.ExcelWorksheet,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="94">'ExcelRange.GetTableAddess(ExcelWorksheet, string)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="94">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelRange.GetTableAddess(ExcelWorksheet, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="external" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="101">'ExcelRange.GetTableAddess(ExcelWorksheet, string)' declares a variable, 'external', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="_worksheet" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="94">Parameter '_worksheet' of 'ExcelRange.GetTableAddess(ExcelWorksheet, string)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32,System.Int32,System.Int32,System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="From" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="141">In member 'ExcelRange.this[int, int, int, int]', correct the casing of 'From' in parameter name 'FromCol' by changing it to 'from'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="141">In member 'ExcelRange.this[int, int, int, int]', correct the casing of 'From' in parameter name 'FromRow' by changing it to 'from'.</Issue>
            </Message>
            <Message Id="To" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="141">In member 'ExcelRange.this[int, int, int, int]', correct the casing of 'To' in parameter name 'ToCol' by changing it to 'to'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="141">In member 'ExcelRange.this[int, int, int, int]', correct the casing of 'To' in parameter name 'ToRow' by changing it to 'to'.</Issue>
            </Message>
            <Message TypeName="IndexersShouldNotBeMultidimensional" Category="Microsoft.Design" CheckId="CA1023" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="141">Redesign indexer 'ExcelRange.this[int, int, int, int]' to use a single string or integer value as its index.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32,System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Col" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="119">In member 'ExcelRange.this[int, int]', correct the casing of 'Col' in parameter name 'Col' by changing it to 'col'.</Issue>
            </Message>
            <Message Id="Row" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="119">In member 'ExcelRange.this[int, int]', correct the casing of 'Row' in parameter name 'Row' by changing it to 'row'.</Issue>
            </Message>
            <Message TypeName="IndexersShouldNotBeMultidimensional" Category="Microsoft.Design" CheckId="CA1023" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="119">Redesign indexer 'ExcelRange.this[int, int]' to use a single string or integer value as its index.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Address" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRange.cs" Line="73">In member 'ExcelRange.this[string]', correct the casing of 'Address' in parameter name 'Address' by changing it to 'address'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelRangeBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="90" Level="Error">'ExcelRangeBase' is coupled with 102 different types from 22 different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above 95 indicates poor maintainability, a class coupling between 95 and 80 indicates moderate maintainability, and a class coupling below 80 indicates good maintainability.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ExcelRangeBase' to end in 'Collection'.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'ExcelRangeBase' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelWorkbook,OfficeOpenXml.ExcelWorksheet,System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="67">'ExcelRangeBase.ExcelRangeBase(ExcelWorkbook, ExcelWorksheet, string, bool)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ExcelRangeBase..ctor(ExcelWorkbook, ExcelWorksheet, String, Boolean)&#xD;&#xA;ExcelAddressBase.SetRCFromTable(ExcelPackage, ExcelAddressBase):Void&#xD;&#xA;ExcelAddressBase.add_AddressChange(EventHandler):Void&#xD;&#xA;ExcelRangeBase.SetDelegate():Void&#xD;&#xA;ExcelAddressBase.get_Addresses():List&lt;ExcelAddress&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="67">'ExcelRangeBase.ExcelRangeBase(ExcelWorksheet)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ExcelRangeBase..ctor(ExcelWorksheet)&#xD;&#xA;ExcelAddressBase.add_AddressChange(EventHandler):Void&#xD;&#xA;ExcelRangeBase.SetDelegate():Void&#xD;&#xA;ExcelAddressBase.get_Addresses():List&lt;ExcelAddress&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(OfficeOpenXml.ExcelWorksheet,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="67">'ExcelRangeBase.ExcelRangeBase(ExcelWorksheet, string)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ExcelRangeBase..ctor(ExcelWorksheet, String)&#xD;&#xA;ExcelAddressBase.SetRCFromTable(ExcelPackage, ExcelAddressBase):Void&#xD;&#xA;ExcelAddressBase.add_AddressChange(EventHandler):Void&#xD;&#xA;ExcelRangeBase.SetDelegate():Void&#xD;&#xA;ExcelAddressBase.get_Addresses():List&lt;ExcelAddress&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_worksheet" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelRangeBase._worksheet' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddComment(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Author" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2162">In member 'ExcelRangeBase.AddComment(string, string)', correct the casing of 'Author' in parameter name 'Author' by changing it to 'author'.</Issue>
            </Message>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2162">In member 'ExcelRangeBase.AddComment(string, string)', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AutoFilter" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_AutoFilter(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1199">Parameter 'value' of 'ExcelRangeBase.AutoFilter.set(bool)' is never used. Remove the parameter or use it in the method body.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#AutoFitColumns(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Minimum" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="750">In member 'ExcelRangeBase.AutoFitColumns(double)', correct the casing of 'Minimum' in parameter name 'MinimumWidth' by changing it to 'minimum'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AutoFitColumns(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="762">'ExcelRangeBase.AutoFitColumns(double, double)' has a cyclomatic complexity of 37. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="829">In method 'ExcelRangeBase.AutoFitColumns(double, double)', call System.IDisposable.Dispose on object 'nfont' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Drawing.Graphics.MeasureString(System.String,System.Drawing.Font)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="835">Method 'ExcelRangeBase.AutoFitColumns(double, double)' passes a literal string as parameter 'text' of a call to 'Graphics.MeasureString(string, Font)'. Retrieve the following string(s) from a resource table instead: "0".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="835">Method 'ExcelRangeBase.AutoFitColumns(double, double)' passes a literal string as parameter 'text' of a call to 'Graphics.MeasureString(string, Font)'. Retrieve the following string(s) from a resource table instead: "00".</Issue>
            </Message>
            <Message Id="Maximum" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="762">In member 'ExcelRangeBase.AutoFitColumns(double, double)', correct the casing of 'Maximum' in parameter name 'MaximumWidth' by changing it to 'maximum'.</Issue>
            </Message>
            <Message Id="Minimum" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="762">In member 'ExcelRangeBase.AutoFitColumns(double, double)', correct the casing of 'Minimum' in parameter name 'MinimumWidth' by changing it to 'minimum'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConvertData(OfficeOpenXml.ExcelTextFormat,System.String,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1651">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelRangeBase.ConvertData(ExcelTextFormat, string, int, bool)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1658">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelRangeBase.ConvertData(ExcelTextFormat, string, int, bool)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1702">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelRangeBase.ConvertData(ExcelTextFormat, string, int, bool)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Copy(OfficeOpenXml.ExcelRangeBase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2198">In method 'ExcelRangeBase.Copy(ExcelRangeBase)', call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2251">In method 'ExcelRangeBase.Copy(ExcelRangeBase)', call System.IDisposable.Dispose on object 'csef' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Destination" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2177">In member 'ExcelRangeBase.Copy(ExcelRangeBase)', correct the casing of 'Destination' in parameter name 'Destination' by changing it to 'destination'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2178">In externally visible method 'ExcelRangeBase.Copy(ExcelRangeBase)', validate parameter 'Destination' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateArrayFormula(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2380">'ExcelRangeBase.CreateArrayFormula(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Array" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2377">In member 'ExcelRangeBase.CreateArrayFormula(string)', correct the casing of 'Array' in parameter name 'ArrayFormula' by changing it to 'array'.</Issue>
            </Message>
            <Message Id="Arrayformula" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2380">Correct the spelling of the unrecognized token 'Arrayformula' in the literal '"An Arrayformula can not have more than one address"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalledWithFinalizer" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2445">Change 'ExcelRangeBase.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
            <Message Id="cellEnum" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2445">'ExcelRangeBase' contains field 'ExcelRangeBase.cellEnum' that is of IDisposable type: 'CellsStoreEnumerator&lt;object&gt;'. Change the Dispose method on 'ExcelRangeBase' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2445">Modify 'ExcelRangeBase.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Exists_Comment(System.Object,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="322">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelRangeBase.Exists_Comment(object, int, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Finalize()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="FinalizeImplementation" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="111">Modify 'ExcelRangeBase.~ExcelRangeBase()' so that it calls Dispose(false) and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FormatValue(System.Object,OfficeOpenXml.Style.XmlAccess.ExcelNumberFormatXml+ExcelFormatTranslator,System.String,System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="939">Modify 'ExcelRangeBase.FormatValue(object, ExcelNumberFormatXml.ExcelFormatTranslator, string, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="937">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ExcelRangeBase.FormatValue(object, ExcelNumberFormatXml.ExcelFormatTranslator, string, string)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1007">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelRangeBase.FormatValue(object, ExcelNumberFormatXml.ExcelFormatTranslator, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1001">Replace the call to 'string.operator ==(string, string)' in 'ExcelRangeBase.FormatValue(object, ExcelNumberFormatXml.ExcelFormatTranslator, string, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FormulaR1C1" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_FormulaR1C1(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1081">In externally visible method 'ExcelRangeBase.FormulaR1C1.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetAddressDim(OfficeOpenXml.ExcelRangeBase)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="685">'ExcelRangeBase.GetAddressDim(ExcelRangeBase)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRichText(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1289">Replace the call to 'string.operator !=(string, string)' in 'ExcelRangeBase.GetRichText(int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSingleValue()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="712">'ExcelRangeBase.GetSingleValue()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValueArray()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Body" Certainty="25" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="663">'ExcelRangeBase.GetValueArray()' uses a multidimensional array of 'object[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsInfinityValue(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="639">'ExcelRangeBase.IsInfinityValue(object)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="639">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelRangeBase.IsInfinityValue(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsRangeValid(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="356">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelRangeBase.IsRangeValid(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="360">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelRangeBase.IsRangeValid(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="348">Replace the call to 'string.operator ==(string, string)' in 'ExcelRangeBase.IsRangeValid(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="354">Replace the call to 'string.operator ==(string, string)' in 'ExcelRangeBase.IsRangeValid(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromArrays(System.Collections.Generic.IEnumerable`1&lt;System.Object[]&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Data" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1808">In member 'ExcelRangeBase.LoadFromArrays(IEnumerable&lt;object[]&gt;)', correct the casing of 'Data' in parameter name 'Data' by changing it to 'data'.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1810">Method 'ExcelRangeBase.LoadFromArrays(IEnumerable&lt;object[]&gt;)' passes 'data' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromCollection`1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Collection" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1835">In member 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;)', correct the casing of 'Collection' in parameter name 'Collection' by changing it to 'collection'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromCollection`1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Collection" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1847">In member 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool)', correct the casing of 'Collection' in parameter name 'Collection' by changing it to 'collection'.</Issue>
            </Message>
            <Message Id="Print" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1847">In member 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool)', correct the casing of 'Print' in parameter name 'PrintHeaders' by changing it to 'print'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromCollection`1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,System.Boolean,OfficeOpenXml.Table.TableStyles)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Collection" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1860">In member 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles)', correct the casing of 'Collection' in parameter name 'Collection' by changing it to 'collection'.</Issue>
            </Message>
            <Message Id="Print" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1860">In member 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles)', correct the casing of 'Print' in parameter name 'PrintHeaders' by changing it to 'print'.</Issue>
            </Message>
            <Message Id="Table" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1860">In member 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles)', correct the casing of 'Table' in parameter name 'TableStyle' by changing it to 'table'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromCollection`1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,System.Boolean,OfficeOpenXml.Table.TableStyles,System.Reflection.BindingFlags,System.Reflection.MemberInfo[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1928">'t', a variable, is cast to type 'FieldInfo' multiple times in method 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles, BindingFlags, MemberInfo[])'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1932">'t', a variable, is cast to type 'MethodInfo' multiple times in method 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles, BindingFlags, MemberInfo[])'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1924">'t', a variable, is cast to type 'PropertyInfo' multiple times in method 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles, BindingFlags, MemberInfo[])'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1886">'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles, BindingFlags, MemberInfo[])' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Collection" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1874">In member 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles, BindingFlags, MemberInfo[])', correct the casing of 'Collection' in parameter name 'Collection' by changing it to 'collection'.</Issue>
            </Message>
            <Message Id="Members" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1874">In member 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles, BindingFlags, MemberInfo[])', correct the casing of 'Members' in parameter name 'Members' by changing it to 'members'.</Issue>
            </Message>
            <Message Id="Print" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1874">In member 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles, BindingFlags, MemberInfo[])', correct the casing of 'Print' in parameter name 'PrintHeaders' by changing it to 'print'.</Issue>
            </Message>
            <Message Id="Table" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1874">In member 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles, BindingFlags, MemberInfo[])', correct the casing of 'Table' in parameter name 'TableStyle' by changing it to 'table'.</Issue>
            </Message>
            <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterNoAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1874">In member 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles, BindingFlags, MemberInfo[])', replace the term 'Flags' in parameter name 'memberFlags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1904">In externally visible method 'ExcelRangeBase.LoadFromCollection&lt;T&gt;(IEnumerable&lt;T&gt;, bool, TableStyles, BindingFlags, MemberInfo[])', validate parameter 'Collection' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromDataTable(System.Data.DataTable,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Print" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1772">In member 'ExcelRangeBase.LoadFromDataTable(DataTable, bool)', correct the casing of 'Print' in parameter name 'PrintHeaders' by changing it to 'print'.</Issue>
            </Message>
            <Message Id="Table" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1772">In member 'ExcelRangeBase.LoadFromDataTable(DataTable, bool)', correct the casing of 'Table' in parameter name 'Table' by changing it to 'table'.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1775">Method 'ExcelRangeBase.LoadFromDataTable(DataTable, bool)' passes 'Table can't be null' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromDataTable(System.Data.DataTable,System.Boolean,OfficeOpenXml.Table.TableStyles)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Print" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1753">In member 'ExcelRangeBase.LoadFromDataTable(DataTable, bool, TableStyles)', correct the casing of 'Print' in parameter name 'PrintHeaders' by changing it to 'print'.</Issue>
            </Message>
            <Message Id="Table" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1753">In member 'ExcelRangeBase.LoadFromDataTable(DataTable, bool, TableStyles)', correct the casing of 'Table' in parameter name 'Table' by changing it to 'table'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1753">In member 'ExcelRangeBase.LoadFromDataTable(DataTable, bool, TableStyles)', correct the casing of 'Table' in parameter name 'TableStyle' by changing it to 'table'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromText(System.IO.FileInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2077">Consider changing the type of parameter 'TextFile' in 'ExcelRangeBase.LoadFromText(FileInfo)' from 'FileInfo' to its base type 'FileSystemInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2077">In member 'ExcelRangeBase.LoadFromText(FileInfo)', correct the casing of 'Text' in parameter name 'TextFile' by changing it to 'text'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2078">In externally visible method 'ExcelRangeBase.LoadFromText(FileInfo)', validate parameter 'TextFile' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2087">Consider changing the type of parameter 'TextFile' in 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat)' from 'FileInfo' to its base type 'FileSystemInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="Format" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2087">In member 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat)', correct the casing of 'Format' in parameter name 'Format' by changing it to 'format'.</Issue>
            </Message>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2087">In member 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat)', correct the casing of 'Text' in parameter name 'TextFile' by changing it to 'text'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2088">In externally visible method 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat)', validate parameter 'TextFile' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2088">In externally visible method 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat)', validate parameter 'Format' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromText(System.IO.FileInfo,OfficeOpenXml.ExcelTextFormat,OfficeOpenXml.Table.TableStyles,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2099">Consider changing the type of parameter 'TextFile' in 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat, TableStyles, bool)' from 'FileInfo' to its base type 'FileSystemInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="First" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2099">In member 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat, TableStyles, bool)', correct the casing of 'First' in parameter name 'FirstRowIsHeader' by changing it to 'first'.</Issue>
            </Message>
            <Message Id="Format" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2099">In member 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat, TableStyles, bool)', correct the casing of 'Format' in parameter name 'Format' by changing it to 'format'.</Issue>
            </Message>
            <Message Id="Table" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2099">In member 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat, TableStyles, bool)', correct the casing of 'Table' in parameter name 'TableStyle' by changing it to 'table'.</Issue>
            </Message>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2099">In member 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat, TableStyles, bool)', correct the casing of 'Text' in parameter name 'TextFile' by changing it to 'text'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2100">In externally visible method 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat, TableStyles, bool)', validate parameter 'TextFile' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2100">In externally visible method 'ExcelRangeBase.LoadFromText(FileInfo, ExcelTextFormat, TableStyles, bool)', validate parameter 'Format' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromText(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1959">In member 'ExcelRangeBase.LoadFromText(string)', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1998">'ExcelRangeBase.LoadFromText(string, ExcelTextFormat)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2032">'ExcelRangeBase.LoadFromText(string, ExcelTextFormat)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Format" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1969">In member 'ExcelRangeBase.LoadFromText(string, ExcelTextFormat)', correct the casing of 'Format' in parameter name 'Format' by changing it to 'format'.</Issue>
            </Message>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1969">In member 'ExcelRangeBase.LoadFromText(string, ExcelTextFormat)', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1998">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelRangeBase.LoadFromText(string, ExcelTextFormat)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2032">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelRangeBase.LoadFromText(string, ExcelTextFormat)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1996">Replace the call to 'string.operator !=(string, string)' in 'ExcelRangeBase.LoadFromText(string, ExcelTextFormat)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadFromText(System.String,OfficeOpenXml.ExcelTextFormat,OfficeOpenXml.Table.TableStyles,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="First" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2062">In member 'ExcelRangeBase.LoadFromText(string, ExcelTextFormat, TableStyles, bool)', correct the casing of 'First' in parameter name 'FirstRowIsHeader' by changing it to 'first'.</Issue>
            </Message>
            <Message Id="Format" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2062">In member 'ExcelRangeBase.LoadFromText(string, ExcelTextFormat, TableStyles, bool)', correct the casing of 'Format' in parameter name 'Format' by changing it to 'format'.</Issue>
            </Message>
            <Message Id="Table" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2062">In member 'ExcelRangeBase.LoadFromText(string, ExcelTextFormat, TableStyles, bool)', correct the casing of 'Table' in parameter name 'TableStyle' by changing it to 'table'.</Issue>
            </Message>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2062">In member 'ExcelRangeBase.LoadFromText(string, ExcelTextFormat, TableStyles, bool)', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Offset(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Column" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2122">In member 'ExcelRangeBase.Offset(int, int)', correct the casing of 'Column' in parameter name 'ColumnOffset' by changing it to 'column'.</Issue>
            </Message>
            <Message Id="Row" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2122">In member 'ExcelRangeBase.Offset(int, int)', correct the casing of 'Row' in parameter name 'RowOffset' by changing it to 'row'.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2125">Method 'ExcelRangeBase.Offset(int, int)' passes 'Offset value out of range' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Offset(System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2142">'ExcelRangeBase.Offset(int, int, int, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Column" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2139">In member 'ExcelRangeBase.Offset(int, int, int, int)', correct the casing of 'Column' in parameter name 'ColumnOffset' by changing it to 'column'.</Issue>
            </Message>
            <Message Id="Number" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2139">In member 'ExcelRangeBase.Offset(int, int, int, int)', correct the casing of 'Number' in parameter name 'NumberOfColumns' by changing it to 'number'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2139">In member 'ExcelRangeBase.Offset(int, int, int, int)', correct the casing of 'Number' in parameter name 'NumberOfRows' by changing it to 'number'.</Issue>
            </Message>
            <Message Id="Row" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2139">In member 'ExcelRangeBase.Offset(int, int, int, int)', correct the casing of 'Row' in parameter name 'RowOffset' by changing it to 'row'.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2149">Method 'ExcelRangeBase.Offset(int, int, int, int)' passes 'Offset value out of range' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveFormuls(OfficeOpenXml.ExcelAddress)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1452">'ExcelRangeBase.RemoveFormuls(ExcelAddress)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set_Comment(System.Object,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="329">In method 'ExcelRangeBase.Set_Comment(object, int, int)', call System.IDisposable.Dispose on object 'new ExcelRangeBase(this._worksheet, ExcelCellBase.GetAddress(this._fromRow, this._fromCol))' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set_Formula(System.Object,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="237">Replace the call to 'string.operator ==(string, string)' in 'ExcelRangeBase.Set_Formula(object, int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set_HyperLink(System.Object,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="299">'value', a parameter, is cast to type 'ExcelHyperLink' multiple times in method 'ExcelRangeBase.Set_HyperLink(object, int, int)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="295">'value', a parameter, is cast to type 'Uri' multiple times in method 'ExcelRangeBase.Set_HyperLink(object, int, int)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="303">'value', a parameter, is cast to type 'Uri' multiple times in method 'ExcelRangeBase.Set_HyperLink(object, int, int)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Set_StyleName(System.Object,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="215">'ExcelRangeBase.Set_StyleName(object, int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="215">Parameter 'value' of 'ExcelRangeBase.Set_StyleName(object, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetMerge(System.Boolean,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1157">'ExcelRangeBase.SetMerge(bool, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1171">'ExcelRangeBase.SetMerge(bool, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetToSelectedRange()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="335">Replace the call to 'string.operator ==(string, string)' in 'ExcelRangeBase.SetToSelectedRange()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SplitFormulas()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="1521">'ExcelRangeBase.SplitFormulas()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StyleName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_StyleName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="541">In method 'ExcelRangeBase.StyleName.set(string)', call System.IDisposable.Dispose on object 'cells' before all references to it are out of scope.</Issue>
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="465">In method 'ExcelRangeBase.StyleName.set(string)', call System.IDisposable.Dispose on object 'cols' before all references to it are out of scope.</Issue>
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="506">In method 'ExcelRangeBase.StyleName.set(string)', call System.IDisposable.Dispose on object 'rows' before all references to it are out of scope.</Issue>
              </Message>
              <Message Id="col" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="439">'ExcelRangeBase.StyleName.set(string)' declares a variable, 'col', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
              </Message>
              <Message Id="newCol" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="473">'ExcelRangeBase.StyleName.set(string)' declares a variable, 'newCol', of type 'ExcelColumn', which is never used or is only assigned to. Use this variable or remove it.</Issue>
              </Message>
              <Message Id="row" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="439">'ExcelRangeBase.StyleName.set(string)' declares a variable, 'row', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#System.Collections.IEnumerator.Current" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#System.Collections.IEnumerator.get_Current()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRangeBase.cs" Line="2485">In method 'ExcelRangeBase.IEnumerator.Current.get()', call System.IDisposable.Dispose on object 'new ExcelRangeBase(this._worksheet, ExcelCellBase.GetAddress(this.cellEnum.Row, this.cellEnum.Column))' before all references to it are out of scope.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelRow" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_height" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelRow._height' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_hidden" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelRow._hidden' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RowID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRow.cs" Line="75">Provide a message for the ObsoleteAttribute that marks 'ExcelRow.RowID'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Style" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Style()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRow.cs" Line="317">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelRow.Style.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRow.cs" Line="317">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelRow.Style.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#StyleID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelRow.cs" Line="212">Correct the casing of 'ID' in member name 'ExcelRow.StyleID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelSheetProtection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SetPassword(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelSheetProtection.cs" Line="323">'node', a variable, is cast to type 'XmlAttribute' multiple times in method 'ExcelSheetProtection.SetPassword(string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
            <Message Id="Password" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelSheetProtection.cs" Line="314">In member 'ExcelSheetProtection.SetPassword(string)', correct the casing of 'Password' in parameter name 'Password' by changing it to 'password'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelSheetProtection.cs" Line="329">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelSheetProtection.SetPassword(string)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelSheetProtection.cs" Line="318">Replace the call to 'string.operator ==(string, string)' in 'ExcelSheetProtection.SetPassword(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelSheetProtection.cs" Line="317">In externally visible method 'ExcelSheetProtection.SetPassword(string)', validate parameter 'Password' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelStyleCollection`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Set" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyleCollection.cs" Line="54">In member 'ExcelStyleCollection&lt;T&gt;.ExcelStyleCollection(bool)', correct the casing of 'Set' in parameter name 'SetNextIdManual' by changing it to 'set'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(System.String,!0)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyleCollection.cs" Line="95">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelStyleCollection&lt;T&gt;.Add(string, T)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyleCollection.cs" Line="95">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelStyleCollection&lt;T&gt;.Add(string, T)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExistsKey(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyleCollection.cs" Line="135">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelStyleCollection&lt;T&gt;.ExistsKey(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindByID(System.String,!0&amp;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyleCollection.cs" Line="107">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelStyleCollection&lt;T&gt;.FindByID(string, ref T)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyleCollection.cs" Line="109">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelStyleCollection&lt;T&gt;.FindByID(string, ref T)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindIndexByID(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyleCollection.cs" Line="124">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelStyleCollection&lt;T&gt;.FindIndexByID(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyleCollection.cs" Line="126">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelStyleCollection&lt;T&gt;.FindIndexByID(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyleCollection.cs" Line="75">In member 'ExcelStyleCollection&lt;T&gt;.this[int]', correct the casing of 'ID' in parameter name 'PositionID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Position" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyleCollection.cs" Line="75">In member 'ExcelStyleCollection&lt;T&gt;.this[int]', correct the casing of 'Position' in parameter name 'PositionID' by changing it to 'position'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TopNode" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyleCollection.cs" Line="53">Modify member 'ExcelStyleCollection&lt;T&gt;.TopNode' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelStyles" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Borders" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelStyles.Borders' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CellStyleXfs" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelStyles.CellStyleXfs' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Xfs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Xfs' in member name 'ExcelStyles.CellStyleXfs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CellXfs" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelStyles.CellXfs' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Xfs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Xfs' in member name 'ExcelStyles.CellXfs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateNamedStyle(System.String,OfficeOpenXml.Style.ExcelStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="490">'ExcelStyles.CreateNamedStyle(string, ExcelStyle)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Template" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="487">In member 'ExcelStyles.CreateNamedStyle(string, ExcelStyle)', correct the casing of 'Template' in parameter name 'Template' by changing it to 'template'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="490">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelStyles.CreateNamedStyle(string, ExcelStyle)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dxfs" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelStyles.Dxfs' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Dxfs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dxfs' in member name 'ExcelStyles.Dxfs' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fills" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelStyles.Fills' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fonts" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelStyles.Fonts' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStyleId(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="397">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelStyles.GetStyleId(ExcelWorksheet, int, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetXmlNode(System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="823">'ExcelStyles.GetXmlNode(XmlNode)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="823">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelStyles.GetXmlNode(XmlNode)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetXmlNodeInt(System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="811">'ExcelStyles.GetXmlNodeInt(XmlNode)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="479">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelStyles.Id' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NamedStyles" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelStyles.NamedStyles' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NumberFormats" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelStyles.NumberFormats' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveUnusedStyles()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="744">In method 'ExcelStyles.RemoveUnusedStyles()', call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetStyleAddress(OfficeOpenXml.Style.StyleBase,OfficeOpenXml.Style.StyleChangeEventArgs,OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.Dictionary`2&lt;System.Int32,System.Int32&gt;&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="191">'ExcelStyles.SetStyleAddress(StyleBase, StyleChangeEventArgs, ExcelAddressBase, ExcelWorksheet, ref Dictionary&lt;int, int&gt;)' has a cyclomatic complexity of 32. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="306">In method 'ExcelStyles.SetStyleAddress(StyleBase, StyleChangeEventArgs, ExcelAddressBase, ExcelWorksheet, ref Dictionary&lt;int, int&gt;)', object 'cse' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="275">In method 'ExcelStyles.SetStyleAddress(StyleBase, StyleChangeEventArgs, ExcelAddressBase, ExcelWorksheet, ref Dictionary&lt;int, int&gt;)', call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="345">In method 'ExcelStyles.SetStyleAddress(StyleBase, StyleChangeEventArgs, ExcelAddressBase, ExcelWorksheet, ref Dictionary&lt;int, int&gt;)', call System.IDisposable.Dispose on object 'cse2' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="194">'ExcelStyles.SetStyleAddress(StyleBase, StyleChangeEventArgs, ExcelAddressBase, ExcelWorksheet, ref Dictionary&lt;int, int&gt;)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="newCol" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="218">'ExcelStyles.SetStyleAddress(StyleBase, StyleChangeEventArgs, ExcelAddressBase, ExcelWorksheet, ref Dictionary&lt;int, int&gt;)' declares a variable, 'newCol', of type 'ExcelColumn', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateXml()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="537">'ExcelStyles.UpdateXml()' has a cyclomatic complexity of 43. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="705">'cf', a variable, is cast to type 'ExcelConditionalFormattingRule' multiple times in method 'ExcelStyles.UpdateXml()'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="658">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelStyles.UpdateXml()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="569">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelStyles.UpdateXml()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="593">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelStyles.UpdateXml()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="612">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelStyles.UpdateXml()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="628">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelStyles.UpdateXml()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="668">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelStyles.UpdateXml()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="669">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelStyles.UpdateXml()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelStyles.cs" Line="683">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelStyles.UpdateXml()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelTextFormat" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DataTypes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelTextFormat.cs" Line="113">Change 'ExcelTextFormat.DataTypes' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EOL" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EOL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelTextFormat.cs" Line="109">Correct the casing of 'EOL' in member name 'ExcelTextFormat.EOL' by changing it to 'Eol'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorkbook" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CalcMode" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Calc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="634">Correct the spelling of 'Calc' in member name 'ExcelWorkbook.CalcMode' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateVBAProject()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="VBA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="429">Correct the casing of 'VBA' in member name 'ExcelWorkbook.CreateVBAProject()' by changing it to 'Vba'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExcelDecodeString(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="889">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.ExcelDecodeString(string)' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExcelEncodeString(System.IO.StreamWriter,System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="856">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.ExcelEncodeString(StreamWriter, string)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FormulaParser" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_FormulaParser()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="300">In method 'ExcelWorkbook.FormulaParser.get()', call System.IDisposable.Dispose on object 'new EpplusExcelDataProvider(this._package)' before all references to it are out of scope.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetDefinedNames()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="240">In method 'ExcelWorkbook.GetDefinedNames()', call System.IDisposable.Dispose on object 'new ExcelRangeBase(this, this.Worksheets[(localSheetID + 1)], fullAddress, false)' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="244">In method 'ExcelWorkbook.GetDefinedNames()', call System.IDisposable.Dispose on object 'new ExcelRangeBase(this, this.Worksheets[addr._ws], fullAddress, false)' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="250">In method 'ExcelWorkbook.GetDefinedNames()', call System.IDisposable.Dispose on object 'new ExcelRangeBase(this, ws, fullAddress, false)' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="210">In method 'ExcelWorkbook.GetDefinedNames()', call System.IDisposable.Dispose on object 'range' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="188">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.GetDefinedNames()' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="190">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.GetDefinedNames()' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="191">Because the behavior of 'string.IndexOf(string, int)' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.GetDefinedNames()' with a call to 'string.IndexOf(string, int, StringComparison)'. If the result of 'string.IndexOf(string, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="220">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.GetDefinedNames()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSharedStrings()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="155">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.GetSharedStrings()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="155">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.GetSharedStrings()' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MaxFontWidth" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_MaxFontWidth()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="362">Modify 'ExcelWorkbook.MaxFontWidth.get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SetNameElement(OfficeOpenXml.ExcelNamedRange,System.Xml.XmlElement)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="954">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorkbook.SetNameElement(ExcelNamedRange, XmlElement)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StylesXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="547">Modify member 'ExcelWorkbook.StylesXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateDefinedNamesXml()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="949">'ExcelWorkbook.UpdateDefinedNamesXml()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="939">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbook.UpdateDefinedNamesXml()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VbaProject" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Vba" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="414">Correct the spelling of 'Vba' in member name 'ExcelWorkbook.VbaProject' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WorkbookXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbook.cs" Line="463">Modify member 'ExcelWorkbook.WorkbookXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorkbookView" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Height" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Height(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbookView.cs" Line="115">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbookView.Height.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Left" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Left(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbookView.cs" Line="70">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbookView.Left.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Top" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Top(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbookView.cs" Line="85">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbookView.Top.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Width" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Width(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorkbookView.cs" Line="100">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorkbookView.Width.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorksheet" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="90" Level="Error">'ExcelWorksheet' is coupled with 125 different types from 29 different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above 95 indicates poor maintainability, a class coupling between 95 and 80 indicates moderate maintainability, and a class coupling below 80 indicates good maintainability.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'ExcelWorksheet' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Xml.XmlNamespaceManager,OfficeOpenXml.ExcelPackage,System.String,System.Uri,System.String,System.Int32,System.Int32,OfficeOpenXml.eWorkSheetHidden)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="218">In member 'ExcelWorksheet.ExcelWorksheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden)', correct the casing of 'ID' in parameter name 'positionID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="218">In member 'ExcelWorksheet.ExcelWorksheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden)', correct the casing of 'ID' in parameter name 'relID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="218">In member 'ExcelWorksheet.ExcelWorksheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden)', correct the casing of 'ID' in parameter name 'sheetID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="rel" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="218">In method 'ExcelWorksheet.ExcelWorksheet(XmlNamespaceManager, ExcelPackage, string, Uri, string, int, int, eWorkSheetHidden)', correct the spelling of 'rel' in parameter name 'relID' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFormulas(System.Collections.Generic.List`1&lt;OfficeOpenXml.ExcelWorksheet+Formulas&gt;,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1781">'ExcelWorksheet.AddFormulas(List&lt;ExcelWorksheet.Formulas&gt;, int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message Id="position" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1781">Parameter 'position' of 'ExcelWorksheet.AddFormulas(List&lt;ExcelWorksheet.Formulas&gt;, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="rows" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1781">Parameter 'rows' of 'ExcelWorksheet.AddFormulas(List&lt;ExcelWorksheet.Formulas&gt;, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddRow(System.Xml.XmlTextReader,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1198">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheet.AddRow(XmlTextReader, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="row" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1198">Parameter 'row' of 'ExcelWorksheet.AddRow(XmlTextReader, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AdjustFormulasRow(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1949">In method 'ExcelWorksheet.AdjustFormulasRow(int, int)', call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AutoFilterAddress" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_AutoFilterAddress()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="308">Replace the call to 'string.operator ==(string, string)' in 'ExcelWorksheet.AutoFilterAddress.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CheckSheetType()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Chartsheet" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="328">Correct the spelling of the unrecognized token 'Chartsheet' in the literal '"This property or method is not supported for a Chartsheet"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Column(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="copy" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1444">'ExcelWorksheet.Column(int)' declares a variable, 'copy', of type 'ExcelColumn', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="newC" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1459">'ExcelWorksheet.Column(int)' declares a variable, 'newC', of type 'ExcelColumn', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyColumn(OfficeOpenXml.ExcelColumn,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1495">Replace the call to 'string.operator !=(string, string)' in 'ExcelWorksheet.CopyColumn(ExcelColumn, int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateHyperLinkCollection()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3117">'ExcelWorksheet.CreateHyperLinkCollection()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteRow(System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="shiftOtherRowsUp" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1965">Parameter 'shiftOtherRowsUp' of 'ExcelWorksheet.DeleteRow(int, int, bool)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3376">Change 'ExcelWorksheet.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message Id="_comments" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3376">'ExcelWorksheet' contains field 'ExcelWorksheet._comments' that is of IDisposable type: 'ExcelCommentCollection'. Change the Dispose method on 'ExcelWorksheet' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message Id="_drawings" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3376">'ExcelWorksheet' contains field 'ExcelWorksheet._drawings' that is of IDisposable type: 'ExcelDrawings'. Change the Dispose method on 'ExcelWorksheet' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3376">Modify 'ExcelWorksheet.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DoAddRow(System.Xml.XmlTextReader)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1142">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheet.DoAddRow(XmlTextReader)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FixSharedFormulasRows(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1691">'ExcelWorksheet.FixSharedFormulasRows(int, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetBlockPos(System.String,System.String,System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="840">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheet.GetBlockPos(string, string, ref int, ref int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="842">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.GetBlockPos(string, string, ref int, ref int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="857">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.GetBlockPos(string, string, ref int, ref int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCellType(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2938">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheet.GetCellType(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetErrorType(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1267">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheet.GetErrorType(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1268">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.GetErrorType(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTotalFunction(OfficeOpenXml.Table.ExcelTableColumn,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2591">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.GetTotalFunction(ExcelTableColumn, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTypedValue`1(System.Object)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2105">Modify 'ExcelWorksheet.GetTypedValue&lt;T&gt;(object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2028">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheet.GetTypedValue&lt;T&gt;(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2103">Because the behavior of 'Convert.ChangeType(object, Type)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.GetTypedValue&lt;T&gt;(object)' with a call to 'Convert.ChangeType(object, Type, IFormatProvider)'. If the result of 'Convert.ChangeType(object, Type, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToDecimal(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2132">Because the behavior of 'Convert.ToDecimal(object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.GetTypedValue&lt;T&gt;(object)' with a call to 'Convert.ToDecimal(object, IFormatProvider)'. If the result of 'Convert.ToDecimal(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2136">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.GetTypedValue&lt;T&gt;(object)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValue(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Column" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1977">In member 'ExcelWorksheet.GetValue(int, int)', correct the casing of 'Column' in parameter name 'Column' by changing it to 'column'.</Issue>
            </Message>
            <Message Id="Row" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1977">In member 'ExcelWorksheet.GetValue(int, int)', correct the casing of 'Row' in parameter name 'Row' by changing it to 'row'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValue`1(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Column" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2007">In member 'ExcelWorksheet.GetValue&lt;T&gt;(int, int)', correct the casing of 'Column' in parameter name 'Column' by changing it to 'column'.</Issue>
            </Message>
            <Message Id="Row" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2007">In member 'ExcelWorksheet.GetValue&lt;T&gt;(int, int)', correct the casing of 'Row' in parameter name 'Row' by changing it to 'row'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValueForXml(System.Object)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2968">'v', a parameter, is cast to type 'double' multiple times in method 'ExcelWorksheet.GetValueForXml(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2972">'v', a parameter, is cast to type 'double' multiple times in method 'ExcelWorksheet.GetValueForXml(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2987">Modify 'ExcelWorksheet.GetValueForXml(object)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWorkSheetXml(System.IO.Stream,System.Int64,System.Int64,System.Text.Encoding&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="780">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheet.GetWorkSheetXml(Stream, long, long, out Encoding)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="796">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.GetWorkSheetXml(Stream, long, long, out Encoding)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="827">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.GetWorkSheetXml(Stream, long, long, out Encoding)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="806">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.GetWorkSheetXml(Stream, long, long, out Encoding)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Hidden" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Hidden()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="420">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.Hidden.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Hidden(OfficeOpenXml.eWorkSheetHidden)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="441">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.Hidden.set(eWorkSheetHidden)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="435">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.Hidden.set(eWorkSheetHidden)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="442">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.Hidden.set(eWorkSheetHidden)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#InsertRow(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1633">In method 'ExcelWorksheet.InsertRow(int, int, int)', call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1605">Method 'ExcelWorksheet.InsertRow(int, int, int)' passes 'Can't insert. Rows will be shifted outside the boundries of the worksheet.' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message Id="copyStylesFromRow" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1599">Parameter 'copyStylesFromRow' of 'ExcelWorksheet.InsertRow(int, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadCells(System.Xml.XmlTextReader)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1008">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.LoadCells(XmlTextReader)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1052">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.LoadCells(XmlTextReader)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1083">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.LoadCells(XmlTextReader)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1103">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.LoadCells(XmlTextReader)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1088">Replace the call to 'string.operator !=(string, string)' in 'ExcelWorksheet.LoadCells(XmlTextReader)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadColumns(System.Xml.XmlTextReader)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="colList" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="877">'ExcelWorksheet.LoadColumns(XmlTextReader)' declares a variable, 'colList', of type 'List&lt;IRangeID&gt;', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="888">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.LoadColumns(XmlTextReader)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="892">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.LoadColumns(XmlTextReader)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Name(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="370">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.Name.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="System.String.Equals(System.String,System.StringComparison)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="StringComparison" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="365">'ExcelWorksheet.Name.set(string)' passes 'StringComparison.InvariantCultureIgnoreCase' as the 'StringComparison' parameter to 'string.Equals(string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#OutLineApplyStyle" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="OutLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="546">The compound word 'OutLine' in member name 'ExcelWorksheet.OutLineApplyStyle' exists as a discrete term. If your usage is intended to be single word, case it as 'Outline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OutLineSummaryBelow" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="OutLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="512">The compound word 'OutLine' in member name 'ExcelWorksheet.OutLineSummaryBelow' exists as a discrete term. If your usage is intended to be single word, case it as 'Outline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OutLineSummaryRight" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="OutLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="529">The compound word 'OutLine' in member name 'ExcelWorksheet.OutLineSummaryRight' exists as a discrete term. If your usage is intended to be single word, case it as 'Outline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadUntil(System.Xml.XmlTextReader,System.String[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="866">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheet.ReadUntil(XmlTextReader, params string[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="868">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.ReadUntil(XmlTextReader, params string[])' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="873">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.ReadUntil(XmlTextReader, params string[])' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadXmlReaderUntil(System.Xml.XmlTextReader,System.String,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="918">'ExcelWorksheet.ReadXmlReaderUntil(XmlTextReader, string, string)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveLegacyDrawingRel(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3333">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.RemoveLegacyDrawingRel(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Row(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1399">Change either member or parameter name 'row' so that one differs from the other.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2260">'d', a variable, is cast to type 'ExcelChart' multiple times in method 'ExcelWorksheet.Save()'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveComments()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="rel" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2389">'ExcelWorksheet.SaveComments()' declares a variable, 'rel', of type 'ZipPackageRelationship', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2384">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.SaveComments()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveTables()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2435">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.SaveTables()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2438">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.SaveTables()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveXml(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="colBreaks" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2616">'ExcelWorksheet.SaveXml(Stream)' declares a variable, 'colBreaks', of type 'List&lt;int&gt;', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="rowBreaks" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2626">'ExcelWorksheet.SaveXml(Stream)' declares a variable, 'rowBreaks', of type 'List&lt;int&gt;', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Select(OfficeOpenXml.ExcelAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Address" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1551">In member 'ExcelWorksheet.Select(ExcelAddress)', correct the casing of 'Address' in parameter name 'Address' by changing it to 'address'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Select(OfficeOpenXml.ExcelAddress,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1561">Consider changing the type of parameter 'Address' in 'ExcelWorksheet.Select(ExcelAddress, bool)' from 'ExcelAddress' to its base type 'ExcelAddressBase'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="Address" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1561">In member 'ExcelWorksheet.Select(ExcelAddress, bool)', correct the casing of 'Address' in parameter name 'Address' by changing it to 'address'.</Issue>
            </Message>
            <Message Id="Select" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1561">In member 'ExcelWorksheet.Select(ExcelAddress, bool)', correct the casing of 'Select' in parameter name 'SelectSheet' by changing it to 'select'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1568">In externally visible method 'ExcelWorksheet.Select(ExcelAddress, bool)', validate parameter 'Address' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Select(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Address" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1523">In member 'ExcelWorksheet.Select(string)', correct the casing of 'Address' in parameter name 'Address' by changing it to 'address'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Select(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Address" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1532">In member 'ExcelWorksheet.Select(string, bool)', correct the casing of 'Address' in parameter name 'Address' by changing it to 'address'.</Issue>
            </Message>
            <Message Id="Select" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1532">In member 'ExcelWorksheet.Select(string, bool)', correct the casing of 'Select' in parameter name 'SelectSheet' by changing it to 'select'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetTableTotalFunction(OfficeOpenXml.Table.ExcelTable,OfficeOpenXml.Table.ExcelTableColumn,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2531">'ExcelWorksheet.SetTableTotalFunction(ExcelTable, ExcelTableColumn, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="RowFunction" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2531">Correct the spelling of the unrecognized token 'RowFunction' in the literal '"Unknown RowFunction enum"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValue(System.Int32,System.Int32,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Column" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2152">In member 'ExcelWorksheet.SetValue(int, int, object)', correct the casing of 'Column' in parameter name 'Column' by changing it to 'column'.</Issue>
            </Message>
            <Message Id="Row" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2152">In member 'ExcelWorksheet.SetValue(int, int, object)', correct the casing of 'Row' in parameter name 'Row' by changing it to 'row'.</Issue>
            </Message>
            <Message Id="Value" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2152">In member 'ExcelWorksheet.SetValue(int, int, object)', correct the casing of 'Value' in parameter name 'Value' by changing it to 'value'.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2156">Method 'ExcelWorksheet.SetValue(int, int, object)' passes 'Row or Column out of range' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValue(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Address" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2166">In member 'ExcelWorksheet.SetValue(string, object)', correct the casing of 'Address' in parameter name 'Address' by changing it to 'address'.</Issue>
            </Message>
            <Message Id="Value" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2166">In member 'ExcelWorksheet.SetValue(string, object)', correct the casing of 'Value' in parameter name 'Value' by changing it to 'value'.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2172">Method 'ExcelWorksheet.SetValue(string, object)' passes 'Address is invalid or out of range' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TabColor" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_TabColor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="571">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.TabColor.get()' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="565">Replace the call to 'string.operator ==(string, string)' in 'ExcelWorksheet.TabColor.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_TabColor(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="576">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.TabColor.set(Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#UpdateColBreaks(System.IO.StreamWriter)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2671">In method 'ExcelWorksheet.UpdateColBreaks(StreamWriter)', call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2684">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.UpdateColBreaks(StreamWriter)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateColumnData(System.IO.StreamWriter)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2725">In method 'ExcelWorksheet.UpdateColumnData(StreamWriter)', call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateHyperLinks(System.IO.StreamWriter)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3050">In method 'ExcelWorksheet.UpdateHyperLinks(StreamWriter)', call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3078">'uri', a variable, is cast to type 'ExcelHyperLink' multiple times in method 'ExcelWorksheet.UpdateHyperLinks(StreamWriter)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3063">'uri', a variable, is cast to type 'ExcelHyperLink' multiple times in method 'ExcelWorksheet.UpdateHyperLinks(StreamWriter)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3065">'uri', a variable, is cast to type 'ExcelHyperLink' multiple times in method 'ExcelWorksheet.UpdateHyperLinks(StreamWriter)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3076">'uri', a variable, is cast to type 'ExcelHyperLink' multiple times in method 'ExcelWorksheet.UpdateHyperLinks(StreamWriter)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3091">'uri', a variable, is cast to type 'ExcelHyperLink' multiple times in method 'ExcelWorksheet.UpdateHyperLinks(StreamWriter)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3093">'uri', a variable, is cast to type 'ExcelHyperLink' multiple times in method 'ExcelWorksheet.UpdateHyperLinks(StreamWriter)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
            <Message Id="id" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="3086">'ExcelWorksheet.UpdateHyperLinks(StreamWriter)' declares a variable, 'id', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateRowBreaks(System.IO.StreamWriter)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2692">In method 'ExcelWorksheet.UpdateRowBreaks(StreamWriter)', call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2705">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.UpdateRowBreaks(StreamWriter)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateRowCellData(System.IO.StreamWriter)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2791">'ExcelWorksheet.UpdateRowCellData(StreamWriter)' has a cyclomatic complexity of 32. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2810">In method 'ExcelWorksheet.UpdateRowCellData(StreamWriter)', call System.IDisposable.Dispose on object 'cse' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="sbXml" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2806">'ExcelWorksheet.UpdateRowCellData(StreamWriter)' declares a variable, 'sbXml', of type 'StringBuilder', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2860">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheet.UpdateRowCellData(StreamWriter)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="2869">Replace the call to 'string.operator !=(string, string)' in 'ExcelWorksheet.UpdateRowCellData(StreamWriter)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateSharedFormulaRow(OfficeOpenXml.ExcelWorksheet+Formulas&amp;,System.Int32,System.Int32,System.Collections.Generic.List`1&lt;OfficeOpenXml.ExcelWorksheet+Formulas&gt;&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1792">'ExcelWorksheet.UpdateSharedFormulaRow(ref ExcelWorksheet.Formulas, int, int, ref List&lt;ExcelWorksheet.Formulas&gt;)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="1792">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheet.UpdateSharedFormulaRow(ref ExcelWorksheet.Formulas, int, int, ref List&lt;ExcelWorksheet.Formulas&gt;)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WorksheetXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="617">Modify member 'ExcelWorksheet.WorksheetXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorksheet+MergeCellsCollection`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelWorksheet.MergeCellsCollection&lt;T&gt;'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheet.cs" Line="174">In member 'ExcelWorksheet.MergeCellsCollection&lt;T&gt;.this[int]', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorksheets" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="Warning">'ExcelWorksheets' is coupled with 83 different types from 19 different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above 95 indicates poor maintainability, a class coupling between 95 and 80 indicates moderate maintainability, and a class coupling below 80 indicates good maintainability.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ExcelWorksheets' to end in 'Collection'.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'ExcelWorksheets' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelPackage,System.Xml.XmlNamespaceManager,System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="72">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.ExcelWorksheets(ExcelPackage, XmlNamespaceManager, XmlNode)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="84">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.ExcelWorksheets(ExcelPackage, XmlNamespaceManager, XmlNode)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="144">In member 'ExcelWorksheets.Add(string)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(System.String,OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="222">In method 'ExcelWorksheets.Add(string, ExcelWorksheet)', object 'added' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'added' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Copy" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="196">In member 'ExcelWorksheets.Add(string, ExcelWorksheet)', correct the casing of 'Copy' in parameter name 'Copy' by changing it to 'copy'.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="196">In member 'ExcelWorksheets.Add(string, ExcelWorksheet)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="214">In externally visible method 'ExcelWorksheets.Add(string, ExcelWorksheet)', validate parameter 'Copy' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddChart(System.String,OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="277">In member 'ExcelWorksheets.AddChart(string, eChartType)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CloneCells(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="493">In method 'ExcelWorksheets.CloneCells(ExcelWorksheet, ExcelWorksheet)', call System.IDisposable.Dispose on object 'val' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Copy(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1014">In member 'ExcelWorksheets.Copy(string, string)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="New" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1014">In member 'ExcelWorksheets.Copy(string, string)', correct the casing of 'New' in parameter name 'NewName' by changing it to 'new'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1017">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.Copy(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyComment(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="commentRelation" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="653">'ExcelWorksheets.CopyComment(ExcelWorksheet, ExcelWorksheet)' declares a variable, 'commentRelation', of type 'ZipPackageRelationship', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="639">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyComment(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="657">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyComment(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyDrawing(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="707">'draw', a variable, is cast to type 'ExcelChart' multiple times in method 'ExcelWorksheets.CopyDrawing(ExcelWorksheet, ExcelWorksheet)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="724">'draw', a variable, is cast to type 'ExcelPicture' multiple times in method 'ExcelWorksheets.CopyDrawing(ExcelWorksheet, ExcelWorksheet)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="689">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyDrawing(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="719">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyDrawing(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="734">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyDrawing(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyHeaderFooterPictures(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="dest" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="450">'ExcelWorksheets.CopyHeaderFooterPictures(ExcelWorksheet, ExcelWorksheet)' declares a variable, 'dest', of type 'Uri', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="source" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="449">'ExcelWorksheets.CopyHeaderFooterPictures(ExcelWorksheet, ExcelWorksheet)' declares a variable, 'source', of type 'Uri', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyPivotTable(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="383">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyPivotTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="384">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyPivotTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="387">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyPivotTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="399">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyPivotTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="407">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyPivotTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="410">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyPivotTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="419">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyPivotTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="422">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyPivotTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="377">Replace the call to 'string.operator ==(string, string)' in 'ExcelWorksheets.CopyPivotTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopySheetNames(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="281">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheets.CopySheetNames(ExcelWorksheet, ExcelWorksheet)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyTable(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="323">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="333">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="324">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="327">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="338">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="363">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="317">Replace the call to 'string.operator ==(string, string)' in 'ExcelWorksheets.CopyTable(ExcelWorksheet, ExcelWorksheet)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyText(OfficeOpenXml.ExcelHeaderFooterText,OfficeOpenXml.ExcelHeaderFooterText)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="466">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheets.CopyText(ExcelHeaderFooterText, ExcelHeaderFooterText)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyValues(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="610">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheets.CopyValues(ExcelWorksheet, ExcelWorksheet, int, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CopyVmlDrawing(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="750">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CopyVmlDrawing(ExcelWorksheet, ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateNewWorksheet(System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="848">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheets.CreateNewWorksheet(bool)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateWorkbookRel(System.String,System.Int32,System.Uri,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="780">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.CreateWorkbookRel(string, int, Uri, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Delete(OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Worksheet" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="959">In member 'ExcelWorksheets.Delete(ExcelWorksheet)', correct the casing of 'Worksheet' in parameter name 'Worksheet' by changing it to 'worksheet'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="960">In externally visible method 'ExcelWorksheets.Delete(ExcelWorksheet)', validate parameter 'Worksheet' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Delete(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="894">In member 'ExcelWorksheets.Delete(int)', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="902">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.Delete(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="916">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.Delete(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Delete(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="950">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.Delete(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1220">Change 'ExcelWorksheets.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1220">Modify 'ExcelWorksheets.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetByName(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1040">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.GetByName(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1040">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.GetByName(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSheetURI(System.String&amp;,System.Int32&amp;,System.Uri&amp;,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="805">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.GetSheetURI(ref string, out int, out Uri, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="809">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.GetSheetURI(ref string, out int, out Uri, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="990">In member 'ExcelWorksheets.this[int]', correct the casing of 'ID' in parameter name 'PositionID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Position" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="990">In member 'ExcelWorksheets.this[int]', correct the casing of 'Position' in parameter name 'PositionID' by changing it to 'position'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1003">In member 'ExcelWorksheets.this[string]', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Move(System.Int32,System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1152">'ExcelWorksheets.Move(int, int, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1157">'ExcelWorksheets.Move(int, int, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1152">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.Move(int, int, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1157">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.Move(int, int, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Move(System.String,System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1137">'ExcelWorksheets.Move(string, string, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1142">'ExcelWorksheets.Move(string, string, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1137">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.Move(string, string, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1142">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.Move(string, string, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveSheetXmlNode(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelWorksheet,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1206">'ExcelWorksheets.MoveSheetXmlNode(ExcelWorksheet, ExcelWorksheet, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="SheetId" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1206">Correct the spelling of the unrecognized token 'SheetId' in the literal '"Source SheetId and Target SheetId must be valid"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1206">Correct the spelling of the unrecognized token 'SheetId' in the literal '"Source SheetId and Target SheetId must be valid"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1202">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.MoveSheetXmlNode(ExcelWorksheet, ExcelWorksheet, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1203">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.MoveSheetXmlNode(ExcelWorksheet, ExcelWorksheet, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveToEnd(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1118">'ExcelWorksheets.MoveToEnd(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1118">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.MoveToEnd(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveToStart(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1095">'ExcelWorksheets.MoveToStart(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="1095">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheets.MoveToStart(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TranslateHidden(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="97">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheets.TranslateHidden(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateFixSheetName(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="826">Replace the call to 'string.operator ==(string, string)' in 'ExcelWorksheets.ValidateFixSheetName(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateName(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheets.cs" Line="839">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelWorksheets.ValidateName(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorksheetView" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FreezePanes(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Column" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="373">In member 'ExcelWorksheetView.FreezePanes(int, int)', correct the casing of 'Column' in parameter name 'Column' by changing it to 'column'.</Issue>
            </Message>
            <Message Id="Row" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="373">In member 'ExcelWorksheetView.FreezePanes(int, int)', correct the casing of 'Row' in parameter name 'Row' by changing it to 'row'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="385">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheetView.FreezePanes(int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="386">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheetView.FreezePanes(int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="397">Replace the call to 'string.operator !=(string, string)' in 'ExcelWorksheetView.FreezePanes(int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="398">Replace the call to 'string.operator !=(string, string)' in 'ExcelWorksheetView.FreezePanes(int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="407">Replace the call to 'string.operator !=(string, string)' in 'ExcelWorksheetView.FreezePanes(int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="408">Replace the call to 'string.operator !=(string, string)' in 'ExcelWorksheetView.FreezePanes(int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="430">Replace the call to 'string.operator !=(string, string)' in 'ExcelWorksheetView.FreezePanes(int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="431">Replace the call to 'string.operator !=(string, string)' in 'ExcelWorksheetView.FreezePanes(int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Panes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="362">Change 'ExcelWorksheetView.Panes' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectionNode" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_SelectionNode()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="182">'ExcelWorksheetView.SelectionNode.get()' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SheetViewElement" Kind="Property" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="172">Modify member 'ExcelWorksheetView.SheetViewElement' so that it no longer exposes the concrete type 'XmlElement'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TabSelected" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_TabSelected(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="243">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheetView.TabSelected.set(bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#UnFreezePanes()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnFreeze" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="450">The compound word 'UnFreeze' in member name 'ExcelWorksheetView.UnFreezePanes()' exists as a discrete term. If your usage is intended to be single word, case it as 'Unfreeze' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="450">Correct the casing of 'Un' in member name 'ExcelWorksheetView.UnFreezePanes()' by changing it to 'UN'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ZoomScale" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_ZoomScale(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="327">Method 'ExcelWorksheetView.ZoomScale.set(int)' passes 'Zoome scale out of range (10-400)' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="329">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelWorksheetView.ZoomScale.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelWorksheetView+ExcelWorksheetPanes" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelWorksheetView.ExcelWorksheetPanes'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ActiveCell" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_ActiveCell()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="66">Replace the call to 'string.operator ==(string, string)' in 'ExcelWorksheetView.ExcelWorksheetPanes.ActiveCell.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_ActiveCell(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="78">Replace the call to 'string.operator ==(string, string)' in 'ExcelWorksheetView.ExcelWorksheetPanes.ActiveCell.set(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SelectedRange" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_SelectedRange()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="105">Replace the call to 'string.operator ==(string, string)' in 'ExcelWorksheetView.ExcelWorksheetPanes.SelectedRange.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_SelectedRange(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="ExcelWorksheetView.cs" Line="117">Replace the call to 'string.operator ==(string, string)' in 'ExcelWorksheetView.ExcelWorksheetPanes.SelectedRange.set(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="OfficeProperties" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_customHelper" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'OfficeProperties._customHelper' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CorePropertiesXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="86">Modify member 'OfficeProperties.CorePropertiesXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_CorePropertiesXml()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="89">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'OfficeProperties.CorePropertiesXml.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CustomPropertiesXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="315">Modify member 'OfficeProperties.CustomPropertiesXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_CustomPropertiesXml()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="318">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'OfficeProperties.CustomPropertiesXml.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ExtendedPropertiesXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="228">Modify member 'OfficeProperties.ExtendedPropertiesXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_ExtendedPropertiesXml()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="231">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'OfficeProperties.ExtendedPropertiesXml.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetCustomPropertyValue(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="338">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'OfficeProperties.GetCustomPropertyValue(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetExtendedPropertyValue(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="293">'OfficeProperties.GetExtendedPropertyValue(string)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="295">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'OfficeProperties.GetExtendedPropertyValue(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HyperlinkBase" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_HyperlinkBase(System.Uri)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="259">In externally visible method 'OfficeProperties.HyperlinkBase.set(Uri)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SetCustomPropertyValue(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="463">'value', a parameter, is cast to type 'decimal' multiple times in method 'OfficeProperties.SetCustomPropertyValue(string, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="455">'value', a parameter, is cast to type 'double' multiple times in method 'OfficeProperties.SetCustomPropertyValue(string, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="459">'value', a parameter, is cast to type 'float' multiple times in method 'OfficeProperties.SetCustomPropertyValue(string, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="440">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'OfficeProperties.SetCustomPropertyValue(string, object)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="445">Because the behavior of 'DateTime.ToString(string)' could vary based on the current user's locale settings, replace this call in 'OfficeProperties.SetCustomPropertyValue(string, object)' with a call to 'DateTime.ToString(string, IFormatProvider)'. If the result of 'DateTime.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="427">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'OfficeProperties.SetCustomPropertyValue(string, object)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="407">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'OfficeProperties.SetCustomPropertyValue(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="OfficeProperties.cs" Line="475">In externally visible method 'OfficeProperties.SetCustomPropertyValue(string, object)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RangeCollection" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Add(OfficeOpenXml.IRangeID)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="149">'RangeCollection.Add(IRangeID)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Delete(System.UInt64)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="158">'RangeCollection.Delete(ulong)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteColumn(System.UInt64,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="253">'RangeCollection.DeleteColumn(ulong, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="252">The 'this' parameter (or 'Me' in Visual Basic) of 'RangeCollection.DeleteColumn(ulong, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="ColumnID" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="252">Parameter 'ColumnID' of 'RangeCollection.DeleteColumn(ulong, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="columns" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="252">Parameter 'columns' of 'RangeCollection.DeleteColumn(ulong, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Finalize()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message TypeName="RemoveEmptyFinalizers" Category="Microsoft.Performance" CheckId="CA1821" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="109">'RangeCollection' implements a finalizer that only calls conditionally emitted methods or the base type finalizer. Remove the finalizer or ensure that it is only conditionally compiled into the assembly. If this violation occurs against a finalizer that is entirely wrapped in a conditionally-emitted block of code, suppress this message.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitSize(System.Collections.Generic.List`1&lt;OfficeOpenXml.IRangeID&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="_cells" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="262">'_cells', a parameter declared in 'RangeCollection.InitSize(List&lt;IRangeID&gt;)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InsertColumn(System.UInt64,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="249">'RangeCollection.InsertColumn(ulong, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="248">The 'this' parameter (or 'Me' in Visual Basic) of 'RangeCollection.InsertColumn(ulong, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="ColumnID" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="248">Parameter 'ColumnID' of 'RangeCollection.InsertColumn(ulong, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="columns" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="248">Parameter 'columns' of 'RangeCollection.InsertColumn(ulong, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.IDisposable.Dispose()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalledWithFinalizer" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="RangeCollection.cs" Line="299">Change 'RangeCollection.IDisposable.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RangeCollection+Compare" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#System.Collections.Generic.IComparer`1&lt;OfficeOpenXml.RangeCollection+IndexItem&gt;.Compare(OfficeOpenXml.RangeCollection+IndexItem,OfficeOpenXml.RangeCollection+IndexItem)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'RangeCollection.Compare.IComparer&lt;RangeCollection.IndexItem&gt;.Compare(RangeCollection.IndexItem, RangeCollection.IndexItem)', validate parameter 'x' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'RangeCollection.Compare.IComparer&lt;RangeCollection.IndexItem&gt;.Compare(RangeCollection.IndexItem, RangeCollection.IndexItem)', validate parameter 'y' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateComplexNode(System.Xml.XmlNode,System.String,OfficeOpenXml.XmlHelper+eNodeInsertOrder,System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="272">'XmlHelper.CreateComplexNode(XmlNode, string, XmlHelper.eNodeInsertOrder, XmlNode)' has a cyclomatic complexity of 27. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="380">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'XmlHelper.CreateComplexNode(XmlNode, string, XmlHelper.eNodeInsertOrder, XmlNode)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="383">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'XmlHelper.CreateComplexNode(XmlNode, string, XmlHelper.eNodeInsertOrder, XmlNode)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="299">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'XmlHelper.CreateComplexNode(XmlNode, string, XmlHelper.eNodeInsertOrder, XmlNode)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="274">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.CreateComplexNode(XmlNode, string, XmlHelper.eNodeInsertOrder, XmlNode)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="319">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.CreateComplexNode(XmlNode, string, XmlHelper.eNodeInsertOrder, XmlNode)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="386">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.CreateComplexNode(XmlNode, string, XmlHelper.eNodeInsertOrder, XmlNode)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="392">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.CreateComplexNode(XmlNode, string, XmlHelper.eNodeInsertOrder, XmlNode)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateNode(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="83">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.CreateNode(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateNode(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="122">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'XmlHelper.CreateNode(string, bool)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="129">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.CreateNode(string, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="135">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.CreateNode(string, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="135">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.CreateNode(string, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteAllNode(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="524">'node', a variable, is cast to type 'XmlAttribute' multiple times in method 'XmlHelper.DeleteAllNode(string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="524">'node', a variable, is cast to type 'XmlAttribute' multiple times in method 'XmlHelper.DeleteAllNode(string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteNode(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="544">'node', a variable, is cast to type 'XmlAttribute' multiple times in method 'XmlHelper.DeleteNode(string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNewUri(OfficeOpenXml.Packaging.ZipPackage,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="778">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'XmlHelper.GetNewUri(ZipPackage, string, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNodePos(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="499">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'XmlHelper.GetNodePos(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetXmlNodeBool(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="653">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.GetXmlNodeBool(string, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetXmlNodeDouble(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="723">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.GetXmlNodeDouble(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetXmlNodeDoubleNull(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="703">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.GetXmlNodeDoubleNull(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetXmlNodeIntNull(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="678">Replace the call to 'string.operator !=(string, string)' in 'XmlHelper.GetXmlNodeIntNull(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadXmlSafe(System.Xml.XmlDocument,System.String,System.Text.Encoding)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="815">In method 'XmlHelper.LoadXmlSafe(XmlDocument, string, Encoding)', call System.IDisposable.Dispose on object 'stream' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetXmlNodeBool(System.String,System.Boolean,System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="608">'node', a variable, is cast to type 'XmlAttribute' multiple times in method 'XmlHelper.SetXmlNodeBool(string, bool, bool)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetXmlNodeString(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus" File="XmlHelper.cs" Line="579">Replace the call to 'string.operator ==(string, string)' in 'XmlHelper.SetXmlNodeString(XmlNode, string, string, bool, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.ConditionalFormatting">
       <Types>
        <Type Name="eExcelconditionalFormatting3IconsSetType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eExcelconditionalFormatting3IconsSetType' by changing it to 'E'.</Issue>
          </Message>
          <Message Id="Excelconditional" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Excelconditional' in type name 'eExcelconditionalFormatting3IconsSetType'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Flags" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flags' in member name 'eExcelconditionalFormatting3IconsSetType.Flags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eExcelconditionalFormatting4IconsSetType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eExcelconditionalFormatting4IconsSetType' by changing it to 'E'.</Issue>
          </Message>
          <Message Id="Excelconditional" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Excelconditional' in type name 'eExcelconditionalFormatting4IconsSetType'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eExcelconditionalFormatting5IconsSetType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eExcelconditionalFormatting5IconsSetType' by changing it to 'E'.</Issue>
          </Message>
          <Message Id="Excelconditional" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Excelconditional' in type name 'eExcelconditionalFormatting5IconsSetType'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eExcelconditionalFormattingIconsSetType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eExcelconditionalFormattingIconsSetType' by changing it to 'E'.</Issue>
          </Message>
          <Message Id="Excelconditional" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Excelconditional' in type name 'eExcelconditionalFormattingIconsSetType'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ThreeFlags" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flags' in member name 'eExcelconditionalFormattingIconsSetType.ThreeFlags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eExcelConditionalFormattingOperatorType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eExcelConditionalFormattingOperatorType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eExcelConditionalFormattingRuleType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eExcelConditionalFormattingRuleType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AboveStdDev" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in member name 'eExcelConditionalFormattingRuleType.AboveStdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BelowStdDev" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in member name 'eExcelConditionalFormattingRuleType.BelowStdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eExcelConditionalFormattingTimePeriodType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eExcelConditionalFormattingTimePeriodType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eExcelConditionalFormattingValueObjectNodeType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eExcelConditionalFormattingValueObjectNodeType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Cfvo" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Cfvo" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Cfvo' in member name 'eExcelConditionalFormattingValueObjectNodeType.Cfvo' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eExcelConditionalFormattingValueObjectPosition" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eExcelConditionalFormattingValueObjectPosition' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eExcelConditionalFormattingValueObjectType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eExcelConditionalFormattingValueObjectType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Num" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Num' in member name 'eExcelConditionalFormattingValueObjectType.Num' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingAboveStdDev" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in type name 'ExcelConditionalFormattingAboveStdDev'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelConditionalFormattingBeginsWith" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Text" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Text(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingBeginsWith.cs" Line="140">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingBeginsWith.Text.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingBeginsWith.cs" Line="140">In externally visible method 'ExcelConditionalFormattingBeginsWith.Text.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingBelowStdDev" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in type name 'ExcelConditionalFormattingBelowStdDev'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelConditionalFormattingCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="113">'ExcelConditionalFormattingCollection.ExcelConditionalFormattingCollection(ExcelWorksheet)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="132">'ExcelConditionalFormattingCollection.ExcelConditionalFormattingCollection(ExcelWorksheet)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="139">'ExcelConditionalFormattingCollection.ExcelConditionalFormattingCollection(ExcelWorksheet)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="sqref" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="113">Correct the spelling of the unrecognized token 'sqref' in the literal '"Missing \'sqref\' attribute in Conditional Formatting"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddAboveStdDev(OfficeOpenXml.ExcelAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="466">Correct the spelling of 'Std' in member name 'ExcelConditionalFormattingCollection.AddAboveStdDev(ExcelAddress)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddBelowStdDev(OfficeOpenXml.ExcelAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="479">Correct the spelling of 'Std' in member name 'ExcelConditionalFormattingCollection.AddBelowStdDev(ExcelAddress)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddDatabar(OfficeOpenXml.ExcelAddress,System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Address" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="989">In member 'ExcelConditionalFormattingCollection.AddDatabar(ExcelAddress, Color)', correct the casing of 'Address' in parameter name 'Address' by changing it to 'address'.</Issue>
            </Message>
            <Message Id="Databar" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="989">Correct the spelling of 'Databar' in member name 'ExcelConditionalFormattingCollection.AddDatabar(ExcelAddress, Color)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddEndsWith(OfficeOpenXml.ExcelAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AddEnds" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="752">The compound word 'AddEnds' in member name 'ExcelConditionalFormattingCollection.AddEndsWith(ExcelAddress)' exists as a discrete term. If your usage is intended to be single word, case it as 'Addends' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFiveIconSet(OfficeOpenXml.ExcelAddress,OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Address" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="975">In member 'ExcelConditionalFormattingCollection.AddFiveIconSet(ExcelAddress, eExcelconditionalFormatting5IconsSetType)', correct the casing of 'Address' in parameter name 'Address' by changing it to 'address'.</Issue>
            </Message>
            <Message Id="Icon" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="975">In member 'ExcelConditionalFormattingCollection.AddFiveIconSet(ExcelAddress, eExcelconditionalFormatting5IconsSetType)', correct the casing of 'Icon' in parameter name 'IconSet' by changing it to 'icon'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFourIconSet(OfficeOpenXml.ExcelAddress,OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Address" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="961">In member 'ExcelConditionalFormattingCollection.AddFourIconSet(ExcelAddress, eExcelconditionalFormatting4IconsSetType)', correct the casing of 'Address' in parameter name 'Address' by changing it to 'address'.</Issue>
            </Message>
            <Message Id="Icon" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="961">In member 'ExcelConditionalFormattingCollection.AddFourIconSet(ExcelAddress, eExcelconditionalFormatting4IconsSetType)', correct the casing of 'Icon' in parameter name 'IconSet' by changing it to 'icon'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddThreeIconSet(OfficeOpenXml.ExcelAddress,OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Address" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="947">In member 'ExcelConditionalFormattingCollection.AddThreeIconSet(ExcelAddress, eExcelconditionalFormatting3IconsSetType)', correct the casing of 'Address' in parameter name 'Address' by changing it to 'address'.</Issue>
            </Message>
            <Message Id="Icon" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="947">In member 'ExcelConditionalFormattingCollection.AddThreeIconSet(ExcelAddress, eExcelconditionalFormatting3IconsSetType)', correct the casing of 'Icon' in parameter name 'IconSet' by changing it to 'icon'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnsureRootElementExists()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="186">'ExcelConditionalFormattingCollection.EnsureRootElementExists()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRootNode()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="196">'ExcelConditionalFormattingCollection.GetRootNode()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="329">'ExcelConditionalFormattingCollection.Remove(IExcelConditionalFormattingRule)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="313">In externally visible method 'ExcelConditionalFormattingCollection.Remove(IExcelConditionalFormattingRule)', validate parameter 'item' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveByPriority(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="357">Modify 'ExcelConditionalFormattingCollection.RemoveByPriority(int)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.ConditionalFormatting.Contracts.IExcelConditionalFormattingRule&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="265">Make 'ExcelConditionalFormattingCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;IExcelConditionalFormattingRule&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="274">Make 'ExcelConditionalFormattingCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateAddress(OfficeOpenXml.ExcelAddress)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingCollection.cs" Line="208">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelConditionalFormattingCollection.ValidateAddress(ExcelAddress)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingColorScaleValue" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Drawing.Color,System.Double,System.String,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="117">'ExcelConditionalFormattingColorScaleValue.ExcelConditionalFormattingColorScaleValue(eExcelConditionalFormattingValueObjectPosition, eExcelConditionalFormattingValueObjectType, Color, double, string, eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="144">'ExcelConditionalFormattingColorScaleValue.ExcelConditionalFormattingColorScaleValue(eExcelConditionalFormattingValueObjectPosition, eExcelConditionalFormattingValueObjectType, Color, double, string, eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="cfvo" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="117">Correct the spelling of the unrecognized token 'cfvo' in the literal '"Missing \'cfvo\' parent node in Conditional Formatting"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="144">Correct the spelling of the unrecognized token 'cfvo' in the literal '"Missing \'cfvo\' parent node in Conditional Formatting"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="122">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingColorScaleValue.ExcelConditionalFormattingColorScaleValue(eExcelConditionalFormattingValueObjectPosition, eExcelConditionalFormattingValueObjectType, Color, double, string, eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="115">Replace the call to 'string.operator ==(string, string)' in 'ExcelConditionalFormattingColorScaleValue.ExcelConditionalFormattingColorScaleValue(eExcelConditionalFormattingValueObjectPosition, eExcelConditionalFormattingValueObjectType, Color, double, string, eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Color" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Color()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="413">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingColorScaleValue.Color.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Color(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="428">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingColorScaleValue.Color.set(Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CreateNodeByOrdem(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectNodeType,System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="281">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingColorScaleValue.CreateNodeByOrdem(eExcelConditionalFormattingValueObjectNodeType, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="298">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingColorScaleValue.CreateNodeByOrdem(eExcelConditionalFormattingValueObjectNodeType, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Formula" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Formula()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="485">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingColorScaleValue.Formula.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="351">The property name 'ExcelConditionalFormattingColorScaleValue.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Type()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="352">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingColorScaleValue.Type.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Type(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="391">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingColorScaleValue.Type.set(eExcelConditionalFormattingValueObjectType)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Value" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Value()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="442">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingColorScaleValue.Value.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Value(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingColorScaleValue.cs" Line="461">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingColorScaleValue.Value.set(double)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingContainsBlanks" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingContainsBlanks.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingContainsBlanks.ExcelConditionalFormattingContainsBlanks(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingContainsErrors" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingContainsErrors.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingContainsErrors.ExcelConditionalFormattingContainsErrors(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingContainsText" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Text" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Text(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingContainsText.cs" Line="140">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingContainsText.Text.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingContainsText.cs" Line="140">In externally visible method 'ExcelConditionalFormattingContainsText.Text.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingDataBar" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Color" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Color()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingDataBar.cs" Line="223">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingDataBar.Color.get()' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Color(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingDataBar.cs" Line="229">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingDataBar.Color.set(Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingEndsWith" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Text" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Text(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingEndsWith.cs" Line="140">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingEndsWith.Text.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingEndsWith.cs" Line="140">In externally visible method 'ExcelConditionalFormattingEndsWith.Text.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingHelper" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#CheckAndFixRangeAddress(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="commaseparated" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="58">Correct the spelling of the unrecognized token 'commaseparated' in the literal '"Multiple addresses may not be commaseparated, use space instead"'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="62">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingHelper.CheckAndFixRangeAddress(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConvertFromColorCode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="84">Modify 'ExcelConditionalFormattingHelper.ConvertFromColorCode(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="82">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingHelper.ConvertFromColorCode(string)' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttributeBool(System.Xml.XmlNode,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="176">Modify 'ExcelConditionalFormattingHelper.GetAttributeBool(XmlNode, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="174">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingHelper.GetAttributeBool(XmlNode, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttributeBoolNullable(System.Xml.XmlNode,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="204">Modify 'ExcelConditionalFormattingHelper.GetAttributeBoolNullable(XmlNode, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="201">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingHelper.GetAttributeBoolNullable(XmlNode, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttributeDecimal(System.Xml.XmlNode,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="246">Modify 'ExcelConditionalFormattingHelper.GetAttributeDecimal(XmlNode, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttributeDouble(System.Xml.XmlNode,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="225">Modify 'ExcelConditionalFormattingHelper.GetAttributeDouble(XmlNode, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttributeInt(System.Xml.XmlNode,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="127">Modify 'ExcelConditionalFormattingHelper.GetAttributeInt(XmlNode, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttributeIntNullable(System.Xml.XmlNode,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="155">Modify 'ExcelConditionalFormattingHelper.GetAttributeIntNullable(XmlNode, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttributeString(System.Xml.XmlNode,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingHelper.cs" Line="106">Modify 'ExcelConditionalFormattingHelper.GetAttributeString(XmlNode, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingIconDataBarValue" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="184">'ExcelConditionalFormattingIconDataBarValue.ExcelConditionalFormattingIconDataBarValue(eExcelConditionalFormattingRuleType, ExcelAddress, ExcelWorksheet, XmlNode, XmlNamespaceManager)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="cfvo" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="184">Correct the spelling of the unrecognized token 'cfvo' in the literal '"Missing \'cfvo\' parent node in Conditional Formatting"'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="182">Replace the call to 'string.operator ==(string, string)' in 'ExcelConditionalFormattingIconDataBarValue.ExcelConditionalFormattingIconDataBarValue(eExcelConditionalFormattingRuleType, ExcelAddress, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Double,System.String,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="103">'ExcelConditionalFormattingIconDataBarValue.ExcelConditionalFormattingIconDataBarValue(eExcelConditionalFormattingValueObjectType, double, string, eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="130">'ExcelConditionalFormattingIconDataBarValue.ExcelConditionalFormattingIconDataBarValue(eExcelConditionalFormattingValueObjectType, double, string, eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="cfvo" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="103">Correct the spelling of the unrecognized token 'cfvo' in the literal '"Missing \'cfvo\' parent node in Conditional Formatting"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="130">Correct the spelling of the unrecognized token 'cfvo' in the literal '"Missing \'cfvo\' parent node in Conditional Formatting"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="108">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingIconDataBarValue.ExcelConditionalFormattingIconDataBarValue(eExcelConditionalFormattingValueObjectType, double, string, eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="101">Replace the call to 'string.operator ==(string, string)' in 'ExcelConditionalFormattingIconDataBarValue.ExcelConditionalFormattingIconDataBarValue(eExcelConditionalFormattingValueObjectType, double, string, eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType,System.Drawing.Color,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="color" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="241">Parameter 'color' of 'ExcelConditionalFormattingIconDataBarValue.ExcelConditionalFormattingIconDataBarValue(eExcelConditionalFormattingValueObjectType, Color, eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNamespaceManager)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="279">The property name 'ExcelConditionalFormattingIconDataBarValue.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#set_Type(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingIconDataBarValue.cs" Line="291">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingIconDataBarValue.Type.set(eExcelConditionalFormattingValueObjectType)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingIconSetBase`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetIconSetString(!0)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingThreeIconSet.cs" Line="319">'ExcelConditionalFormattingIconSetBase&lt;T&gt;.GetIconSetString(T)' has a cyclomatic complexity of 31. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingLast7Days" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingLast7Days.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingLast7Days.ExcelConditionalFormattingLast7Days(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingLastMonth" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingLastMonth.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingLastMonth.ExcelConditionalFormattingLastMonth(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingLastWeek" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingLastWeek.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingLastWeek.ExcelConditionalFormattingLastWeek(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingNextMonth" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingNextMonth.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingNextMonth.ExcelConditionalFormattingNextMonth(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingNextWeek" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingNextWeek.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingNextWeek.ExcelConditionalFormattingNextWeek(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingNotContainsBlanks" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingNotContainsBlanks.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingNotContainsBlanks.ExcelConditionalFormattingNotContainsBlanks(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingNotContainsErrors" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingNotContainsErrors.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingNotContainsErrors.ExcelConditionalFormattingNotContainsErrors(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingNotContainsText" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Text" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Text(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingNotContainsText.cs" Line="140">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingNotContainsText.Text.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingNotContainsText.cs" Line="140">In externally visible method 'ExcelConditionalFormattingNotContainsText.Text.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingOperatorType" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetTypeByAttribute(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingOperatorType.cs" Line="101">'ExcelConditionalFormattingOperatorType.GetTypeByAttribute(string)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingOperatorType.cs" Line="141">'ExcelConditionalFormattingOperatorType.GetTypeByAttribute(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Unexistent" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingOperatorType.cs" Line="141">Correct the spelling of the unrecognized token 'Unexistent' in the literal '"Unexistent eExcelConditionalFormattingOperatorType attribute in Conditional Form..."'.</Issue>
            </Message>
            <Message Id="eExcelConditionalFormattingOperatorType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingOperatorType.cs" Line="141">Correct the spelling of the unrecognized token 'eExcelConditionalFormattingOperatorType' in the literal '"Unexistent eExcelConditionalFormattingOperatorType attribute in Conditional Form..."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingRule" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="98">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRule.ExcelConditionalFormattingRule(eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AboveAverage" Kind="Property" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_AboveAverage(System.Nullable`1&lt;System.Boolean&gt;)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="423">Parameter 'value' of 'ExcelConditionalFormattingRule.AboveAverage.set(bool?)' is never used. Remove the parameter or use it in the method body.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Address" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Address(OfficeOpenXml.ExcelAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="oldNode" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="190">'ExcelConditionalFormattingRule.Address.set(ExcelAddress)' declares a variable, 'oldNode', of type 'XmlNode', which is never used or is only assigned to. Use this variable or remove it.</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="194">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRule.Address.set(ExcelAddress)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="187">In externally visible method 'ExcelConditionalFormattingRule.Address.set(ExcelAddress)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Bottom" Kind="Property" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Bottom(System.Nullable`1&lt;System.Boolean&gt;)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="486">Parameter 'value' of 'ExcelConditionalFormattingRule.Bottom.set(bool?)' is never used. Remove the parameter or use it in the method body.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#DxfId" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_DxfId(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="349">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRule.DxfId.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#EqualAverage" Kind="Property" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_EqualAverage(System.Nullable`1&lt;System.Boolean&gt;)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="455">Parameter 'value' of 'ExcelConditionalFormattingRule.EqualAverage.set(bool?)' is never used. Remove the parameter or use it in the method body.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Formula2" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Formula2()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="597">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRule.Formula2.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Formula2(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="firstNode" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="606">'ExcelConditionalFormattingRule.Formula2.set(string)' declares a variable, 'firstNode', of type 'XmlNode', which is never used or is only assigned to. Use this variable or remove it.</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="606">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRule.Formula2.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="614">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRule.Formula2.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Percent" Kind="Property" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Percent(System.Nullable`1&lt;System.Boolean&gt;)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
             <Messages>
              <Message Id="value" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="517">Parameter 'value' of 'ExcelConditionalFormattingRule.Percent.set(bool?)' is never used. Remove the parameter or use it in the method body.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Priority" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Priority(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="Reserved" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="271">'ExcelConditionalFormattingRule.Priority.set(int)' creates an exception of type 'IndexOutOfRangeException', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="309">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRule.Priority.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Rank" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Rank(System.UInt16)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.UInt16.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="398">Because the behavior of 'ushort.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRule.Rank.set(ushort)' with a call to 'ushort.ToString(IFormatProvider)'. If the result of 'ushort.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#StdDev" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="373">Correct the spelling of 'Std' in member name 'ExcelConditionalFormattingRule.StdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#set_StdDev(System.UInt16)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.UInt16.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingRule.cs" Line="379">Because the behavior of 'ushort.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRule.StdDev.set(ushort)' with a call to 'ushort.ToString(IFormatProvider)'. If the result of 'ushort.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingRuleFactory" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Create(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Method" Certainty="90" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleFactory.cs" Line="52">'ExcelConditionalFormattingRuleFactory.Create(eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode)' is coupled with 53 different types from 5 different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above 40 indicates poor maintainability, a class coupling between 40 and 30 indicates moderate maintainability, and a class coupling below 30 indicates good maintainability.</Issue>
            </Message>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleFactory.cs" Line="52">'ExcelConditionalFormattingRuleFactory.Create(eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode)' has a cyclomatic complexity of 47. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="conditionalFormattingType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleFactory.cs" Line="382">Correct the spelling of the unrecognized token 'conditionalFormattingType' in the literal '"Non supported conditionalFormattingType: "'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleFactory.cs" Line="382">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRuleFactory.Create(eExcelConditionalFormattingRuleType, ExcelAddress, int, ExcelWorksheet, XmlNode)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingRuleType" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetAboveAverageType(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="nameSpaceManager" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="270">Parameter 'nameSpaceManager' of 'ExcelConditionalFormattingRuleType.GetAboveAverageType(XmlNode, XmlNamespaceManager)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttributeByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="508">'ExcelConditionalFormattingRuleType.GetAttributeByType(eExcelConditionalFormattingRuleType)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="eExcelConditionalFormattingRuleType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="508">Correct the spelling of the unrecognized token 'eExcelConditionalFormattingRuleType' in the literal '"Missing eExcelConditionalFormattingRuleType Type in Conditional Formatting"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCellIs(System.Xml.XmlElement)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="146">'ExcelConditionalFormattingRuleType.GetCellIs(XmlElement)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="184">'ExcelConditionalFormattingRuleType.GetCellIs(XmlElement)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Unexistent" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="184">Correct the spelling of the unrecognized token 'Unexistent' in the literal '"Unexistent eExcelConditionalFormattingOperatorType attribute in Conditional Form..."'.</Issue>
            </Message>
            <Message Id="eExcelConditionalFormattingOperatorType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="184">Correct the spelling of the unrecognized token 'eExcelConditionalFormattingOperatorType' in the literal '"Unexistent eExcelConditionalFormattingOperatorType attribute in Conditional Form..."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCfvoParentPathByType(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="535">'ExcelConditionalFormattingRuleType.GetCfvoParentPathByType(eExcelConditionalFormattingRuleType)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="eExcelConditionalFormattingRuleType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="535">Correct the spelling of the unrecognized token 'eExcelConditionalFormattingRuleType' in the literal '"Missing eExcelConditionalFormattingRuleType Type in Conditional Formatting"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetColorScaleType(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="245">'ExcelConditionalFormattingRuleType.GetColorScaleType(XmlNode, XmlNamespaceManager)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="cfvo" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="245">Correct the spelling of the unrecognized token 'cfvo' in the literal '"Wrong number of \'cfvo\'/\'color\' nodes in Conditional Formatting Rule"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="224">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRuleType.GetColorScaleType(XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="232">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingRuleType.GetColorScaleType(XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTimePeriodType(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="412">'ExcelConditionalFormattingRuleType.GetTimePeriodType(XmlNode, XmlNamespaceManager)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Unexistent" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="412">Correct the spelling of the unrecognized token 'Unexistent' in the literal '"Unexistent eExcelConditionalFormattingTimePeriodType attribute in Conditional Fo..."'.</Issue>
            </Message>
            <Message Id="eExcelConditionalFormattingTimePeriodType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="412">Correct the spelling of the unrecognized token 'eExcelConditionalFormattingTimePeriodType' in the literal '"Unexistent eExcelConditionalFormattingTimePeriodType attribute in Conditional Fo..."'.</Issue>
            </Message>
            <Message Id="nameSpaceManager" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="373">Parameter 'nameSpaceManager' of 'ExcelConditionalFormattingRuleType.GetTimePeriodType(XmlNode, XmlNamespaceManager)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTop10Type(System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="nameSpaceManager" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="333">Parameter 'nameSpaceManager' of 'ExcelConditionalFormattingRuleType.GetTop10Type(XmlNode, XmlNamespaceManager)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTypeByAttrbiute(System.String,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="55">'ExcelConditionalFormattingRuleType.GetTypeByAttrbiute(string, XmlNode, XmlNamespaceManager)' has a cyclomatic complexity of 44. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="141">'ExcelConditionalFormattingRuleType.GetTypeByAttrbiute(string, XmlNode, XmlNamespaceManager)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="eExcelConditionalFormattingRuleType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingRuleType.cs" Line="141">Correct the spelling of the unrecognized token 'eExcelConditionalFormattingRuleType' in the literal '"Unexpected eExcelConditionalFormattingRuleType attribute in Conditional Formatti..."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingThisMonth" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingThisMonth.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingThisMonth.ExcelConditionalFormattingThisMonth(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingThisWeek" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingThisWeek.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingThisWeek.ExcelConditionalFormattingThisWeek(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingThreeColorScale" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="colorScaleNode" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingThreeColorScale.cs" Line="93">'ExcelConditionalFormattingThreeColorScale.ExcelConditionalFormattingThreeColorScale(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' declares a variable, 'colorScaleNode', of type 'XmlNode', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingTimePeriodType" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetTypeByAttribute(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingTimePeriodType.cs" Line="129">'ExcelConditionalFormattingTimePeriodType.GetTypeByAttribute(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Unexistent" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingTimePeriodType.cs" Line="129">Correct the spelling of the unrecognized token 'Unexistent' in the literal '"Unexistent eExcelConditionalFormattingTimePeriodType attribute in Conditional Fo..."'.</Issue>
            </Message>
            <Message Id="eExcelConditionalFormattingTimePeriodType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingTimePeriodType.cs" Line="129">Correct the spelling of the unrecognized token 'eExcelConditionalFormattingTimePeriodType' in the literal '"Unexistent eExcelConditionalFormattingTimePeriodType attribute in Conditional Fo..."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingToday" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingToday.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingToday.ExcelConditionalFormattingToday(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingTomorrow" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingTomorrow.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingTomorrow.ExcelConditionalFormattingTomorrow(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingTwoColorScale" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="colorScaleNode" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingTwoColorScale.cs" Line="88">'ExcelConditionalFormattingTwoColorScale.ExcelConditionalFormattingTwoColorScale(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' declares a variable, 'colorScaleNode', of type 'XmlNode', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingValueObjectType" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetCfvoNodeByPosition(OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingValueObjectPosition,OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingValueObjectType.cs" Line="136">'ExcelConditionalFormattingValueObjectType.GetCfvoNodeByPosition(eExcelConditionalFormattingValueObjectPosition, eExcelConditionalFormattingRuleType, XmlNode, XmlNamespaceManager)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="cfvo" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingValueObjectType.cs" Line="136">Correct the spelling of the unrecognized token 'cfvo' in the literal '"Missing \'cfvo\' node in Conditional Formatting"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingValueObjectType.cs" Line="125">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingValueObjectType.GetCfvoNodeByPosition(eExcelConditionalFormattingValueObjectPosition, eExcelConditionalFormattingRuleType, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTypeByAttrbiute(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingValueObjectType.cs" Line="106">'ExcelConditionalFormattingValueObjectType.GetTypeByAttrbiute(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Unexistent" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingValueObjectType.cs" Line="106">Correct the spelling of the unrecognized token 'Unexistent' in the literal '"Unexistent eExcelConditionalFormattingValueObjectType attribute in Conditional F..."'.</Issue>
            </Message>
            <Message Id="eExcelConditionalFormattingValueObjectType" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting" File="ExcelConditionalFormattingValueObjectType.cs" Line="106">Correct the spelling of the unrecognized token 'eExcelConditionalFormattingValueObjectType' in the literal '"Unexistent eExcelConditionalFormattingValueObjectType attribute in Conditional F..."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelConditionalFormattingYesterday" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelAddress,System.Int32,OfficeOpenXml.ExcelWorksheet,System.Xml.XmlNode,System.Xml.XmlNamespaceManager)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\ConditionalFormatting\Rules" File="ExcelConditionalFormattingYesterday.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelConditionalFormattingYesterday.ExcelConditionalFormattingYesterday(ExcelAddress, int, ExcelWorksheet, XmlNode, XmlNamespaceManager)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IRangeConditionalFormatting" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddAboveStdDev()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in member name 'IRangeConditionalFormatting.AddAboveStdDev()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddBelowStdDev()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in member name 'IRangeConditionalFormatting.AddBelowStdDev()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddDatabar(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Databar" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Databar' in member name 'IRangeConditionalFormatting.AddDatabar(Color)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddEndsWith()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="AddEnds" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'AddEnds' in member name 'IRangeConditionalFormatting.AddEndsWith()' exists as a discrete term. If your usage is intended to be single word, case it as 'Addends' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFiveIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Icon" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'IRangeConditionalFormatting.AddFiveIconSet(eExcelconditionalFormatting5IconsSetType)', correct the casing of 'Icon' in parameter name 'IconSet' by changing it to 'icon'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFourIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Icon" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'IRangeConditionalFormatting.AddFourIconSet(eExcelconditionalFormatting4IconsSetType)', correct the casing of 'Icon' in parameter name 'IconSet' by changing it to 'icon'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddThreeIconSet(OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Icon" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error">In member 'IRangeConditionalFormatting.AddThreeIconSet(eExcelconditionalFormatting3IconsSetType)', correct the casing of 'Icon' in parameter name 'IconSet' by changing it to 'icon'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.ConditionalFormatting.Contracts">
       <Types>
        <Type Name="IExcelConditionalFormattingAverageGroup" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IExcelConditionalFormattingAverageGroup'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExcelConditionalFormattingColorScaleGroup" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IExcelConditionalFormattingColorScaleGroup'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExcelConditionalFormattingContainsBlanks" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IExcelConditionalFormattingContainsBlanks'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExcelConditionalFormattingContainsErrors" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IExcelConditionalFormattingContainsErrors'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExcelConditionalFormattingDuplicateValues" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IExcelConditionalFormattingDuplicateValues'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExcelConditionalFormattingNotContainsBlanks" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IExcelConditionalFormattingNotContainsBlanks'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExcelConditionalFormattingNotContainsErrors" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IExcelConditionalFormattingNotContainsErrors'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExcelConditionalFormattingRule" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Node" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error">Modify member 'IExcelConditionalFormattingRule.Node' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IExcelConditionalFormattingStdDevGroup" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in type name 'IExcelConditionalFormattingStdDevGroup'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExcelConditionalFormattingTimePeriodGroup" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IExcelConditionalFormattingTimePeriodGroup'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExcelConditionalFormattingUniqueValues" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IExcelConditionalFormattingUniqueValues'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IExcelConditionalFormattingWithStdDev" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in type name 'IExcelConditionalFormattingWithStdDev'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#StdDev" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in member name 'IExcelConditionalFormattingWithStdDev.StdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.DataValidation">
       <Types>
        <Type Name="eDataValidationType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eDataValidationType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelDataValidation" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_formula1Path" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelDataValidation._formula1Path' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_formula2Path" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelDataValidation._formula2Path' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckAndFixRangeAddress(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="commaseparated" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidation.cs" Line="140">Correct the spelling of the unrecognized token 'commaseparated' in the literal '"Multiple addresses may not be commaseparated, use space instead"'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidation.cs" Line="137">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelDataValidation.CheckAndFixRangeAddress(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidation.cs" Line="142">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelDataValidation.CheckAndFixRangeAddress(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValue`1(System.Nullable`1&lt;!!0&gt;,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidation.cs" Line="393">In method 'ExcelDataValidation.SetValue&lt;T&gt;(T?, string)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDataValidationCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="75">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelDataValidationCollection.ExcelDataValidationCollection(ExcelWorksheet)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRootNode()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="126">'ExcelDataValidationCollection.GetRootNode()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnValidationCountChanged()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="121">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelDataValidationCollection.OnValidationCountChanged()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="293">'item', a parameter, is cast to type 'ExcelDataValidation' multiple times in method 'ExcelDataValidationCollection.Remove(IExcelDataValidation)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="DataValidation" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="290">Correct the spelling of the unrecognized token 'DataValidation' in the literal '"The supplied item must inherit OfficeOpenXml.DataValidation.ExcelDataValidation"'.</Issue>
            </Message>
            <Message Id="ExcelDataValidation" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="290">Correct the spelling of the unrecognized token 'ExcelDataValidation' in the literal '"The supplied item must inherit OfficeOpenXml.DataValidation.ExcelDataValidation"'.</Issue>
            </Message>
            <Message Id="OfficeOpenXml" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="290">Correct the spelling of the unrecognized token 'OfficeOpenXml' in the literal '"The supplied item must inherit OfficeOpenXml.DataValidation.ExcelDataValidation"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveAll(System.Predicate`1&lt;OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="374">'m', a variable, is cast to type 'ExcelDataValidation' multiple times in method 'ExcelDataValidationCollection.RemoveAll(Predicate&lt;IExcelDataValidation&gt;)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="DataValidation" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="372">Correct the spelling of the unrecognized token 'DataValidation' in the literal '"The supplied item must inherit OfficeOpenXml.DataValidation.ExcelDataValidation"'.</Issue>
            </Message>
            <Message Id="ExcelDataValidation" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="372">Correct the spelling of the unrecognized token 'ExcelDataValidation' in the literal '"The supplied item must inherit OfficeOpenXml.DataValidation.ExcelDataValidation"'.</Issue>
            </Message>
            <Message Id="OfficeOpenXml" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="372">Correct the spelling of the unrecognized token 'OfficeOpenXml' in the literal '"The supplied item must inherit OfficeOpenXml.DataValidation.ExcelDataValidation"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="381">Make 'ExcelDataValidationCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;IExcelDataValidation&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="386">Make 'ExcelDataValidationCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateAddress(System.String,OfficeOpenXml.DataValidation.Contracts.IExcelDataValidation)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationCollection.cs" Line="154">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelDataValidationCollection.ValidateAddress(string, IExcelDataValidation)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDataValidationFactory" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Create(OfficeOpenXml.DataValidation.ExcelDataValidationType,OfficeOpenXml.ExcelWorksheet,System.String,System.Xml.XmlNode)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="validationtype" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationFactory.cs" Line="73">Correct the spelling of the unrecognized token 'validationtype' in the literal '"Non supported validationtype: "'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDataValidationOperator" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#any" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="any" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'any' in member name 'ExcelDataValidationOperator.any' by changing it to 'Any'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#between" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="between" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'between' in member name 'ExcelDataValidationOperator.between' by changing it to 'Between'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#equal" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="equal" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'equal' in member name 'ExcelDataValidationOperator.equal' by changing it to 'Equal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#greaterThan" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="greater" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'greater' in member name 'ExcelDataValidationOperator.greaterThan' by changing it to 'Greater'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#greaterThanOrEqual" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="greater" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'greater' in member name 'ExcelDataValidationOperator.greaterThanOrEqual' by changing it to 'Greater'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#lessThan" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="less" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'less' in member name 'ExcelDataValidationOperator.lessThan' by changing it to 'Less'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#lessThanOrEqual" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="less" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'less' in member name 'ExcelDataValidationOperator.lessThanOrEqual' by changing it to 'Less'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#notBetween" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="not" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'not' in member name 'ExcelDataValidationOperator.notBetween' by changing it to 'Not'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#notEqual" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="not" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'not' in member name 'ExcelDataValidationOperator.notEqual' by changing it to 'Not'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDataValidationType" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationType.cs" Line="184">'obj', a parameter, is cast to type 'ExcelDataValidationType' multiple times in method 'ExcelDataValidationType.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetByValidationType(OfficeOpenXml.DataValidation.eDataValidationType)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Validationtype" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationType.cs" Line="146">Correct the spelling of the unrecognized token 'Validationtype' in the literal '"Non supported Validationtype : "'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationType.cs" Line="102">The property name 'ExcelDataValidationType.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDataValidationWarningStyle" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#information" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="information" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'information' in member name 'ExcelDataValidationWarningStyle.information' by changing it to 'Information'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#stop" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="stop" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'stop' in member name 'ExcelDataValidationWarningStyle.stop' by changing it to 'Stop'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#undefined" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="undefined" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'undefined' in member name 'ExcelDataValidationWarningStyle.undefined' by changing it to 'Undefined'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#warning" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="warning" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'warning' in member name 'ExcelDataValidationWarningStyle.warning' by changing it to 'Warning'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDataValidationWithFormula`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Validate()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="notBetween" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelDataValidationWithFormula.cs" Line="104">Correct the spelling of the unrecognized token 'notBetween' in the literal '" failed: Formula2 must be set if operator is \'between\' or \'notBetween\'"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelTime" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Round(System.Decimal)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelTime.cs" Line="228">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelTime.Round(decimal)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelTime.cs" Line="262">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelTime.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelTime.cs" Line="262">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelTime.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelTime.cs" Line="262">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelTime.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelTime.cs" Line="262">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelTime.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelTime.cs" Line="262">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelTime.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelTime.cs" Line="262">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelTime.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation" File="ExcelTime.cs" Line="262">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelTime.ToString()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.DataValidation.Contracts">
       <Types>
        <Type Name="IExcelDataValidation" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Error" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Error" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IExcelDataValidation.Error' so that it no longer conflicts with the reserved language keyword 'Error'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IExcelDataValidationWithOperator" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Operator" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Operator" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IExcelDataValidationWithOperator.Operator' so that it no longer conflicts with the reserved language keyword 'Operator'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.DataValidation.Formulas">
       <Types>
        <Type Name="ExcelDataValidationFormula" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#ExcelFormula" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_ExcelFormula(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
             <Messages>
              <Message Id="DataValidation" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation\Formulas" File="ExcelDataValidationFormula.cs" Line="110">Correct the spelling of the unrecognized token 'DataValidation' in the literal '"The length of a DataValidation formula cannot exceed 255 characters"'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDataValidationFormulaInt" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetValueAsString()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation\Formulas" File="ExcelDataValidationFormulaInt.cs" Line="64">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelDataValidationFormulaInt.GetValueAsString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDataValidationFormulaList" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#SetInitialValues()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation\Formulas" File="ExcelDataValidationFormulaList.cs" Line="187">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelDataValidationFormulaList.SetInitialValues()' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\DataValidation\Formulas" File="ExcelDataValidationFormulaList.cs" Line="187">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelDataValidationFormulaList.SetInitialValues()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.Drawing">
       <Types>
        <Type Name="eEditAs" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eEditAs' by changing it to 'E'.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'eEditAs' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eLineCap" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eLineCap' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eLineStyle" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eLineStyle' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eTextAnchoringType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eTextAnchoringType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eTextVerticalType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eTextVerticalType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelDrawing" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'ExcelDrawing' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#_drawings" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelDrawing._drawings' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_id" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelDrawing._id' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_topNode" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelDrawing._topNode' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error">Modify member 'ExcelDrawing._topNode' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="656">Change 'ExcelDrawing.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="656">Modify 'ExcelDrawing.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="656">Ensure that 'ExcelDrawing.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EditAs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_EditAs()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="252">Modify 'ExcelDrawing.EditAs.get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="243">Replace the call to 'string.operator ==(string, string)' in 'ExcelDrawing.EditAs.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_EditAs(OfficeOpenXml.Drawing.eEditAs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="260">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawing.EditAs.set(eEditAs)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#EMU_PER_PIXEL" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EMU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'EMU' in member name 'ExcelDrawing.EMU_PER_PIXEL' by changing it to 'Emu'.</Issue>
            </Message>
            <Message Id="PER" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PER' in member name 'ExcelDrawing.EMU_PER_PIXEL' by changing it to 'Per'.</Issue>
            </Message>
            <Message Id="PIXEL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PIXEL' in member name 'ExcelDrawing.EMU_PER_PIXEL' by changing it to 'Pixel'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Remove the underscores from member name 'ExcelDrawing.EMU_PER_PIXEL'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPixelHeight()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="ws" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="445">'ExcelDrawing.GetPixelHeight()' declares a variable, 'ws', of type 'ExcelWorksheet', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPixelTop()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="ws" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="421">'ExcelDrawing.GetPixelTop()' declares a variable, 'ws', of type 'ExcelWorksheet', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Id()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="331">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawing.Id.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Name" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Name()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="214">Modify 'ExcelDrawing.Name.get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="211">Replace the call to 'string.operator ==(string, string)' in 'ExcelDrawing.Name.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Name(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="223">Replace the call to 'string.operator ==(string, string)' in 'ExcelDrawing.Name.set(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SetPixelTop(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="mdw" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="485">'ExcelDrawing.SetPixelTop(int)' declares a variable, 'mdw', of type 'decimal', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetPosition(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Pixel" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="591">In member 'ExcelDrawing.SetPosition(int, int)', correct the casing of 'Pixel' in parameter name 'PixelLeft' by changing it to 'pixel'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="591">In member 'ExcelDrawing.SetPosition(int, int)', correct the casing of 'Pixel' in parameter name 'PixelTop' by changing it to 'pixel'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Column" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="610">In member 'ExcelDrawing.SetPosition(int, int, int, int)', correct the casing of 'Column' in parameter name 'Column' by changing it to 'column'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="610">In member 'ExcelDrawing.SetPosition(int, int, int, int)', correct the casing of 'Column' in parameter name 'ColumnOffsetPixels' by changing it to 'column'.</Issue>
            </Message>
            <Message Id="Row" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="610">In member 'ExcelDrawing.SetPosition(int, int, int, int)', correct the casing of 'Row' in parameter name 'Row' by changing it to 'row'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="610">In member 'ExcelDrawing.SetPosition(int, int, int, int)', correct the casing of 'Row' in parameter name 'RowOffsetPixels' by changing it to 'row'.</Issue>
            </Message>
            <Message Id="ColumnOffsetPixels*9525" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="617">Correct the potential overflow in the operation 'ColumnOffsetPixels*9525' in 'ExcelDrawing.SetPosition(int, int, int, int)'.</Issue>
            </Message>
            <Message Id="RowOffsetPixels*9525" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="615">Correct the potential overflow in the operation 'RowOffsetPixels*9525' in 'ExcelDrawing.SetPosition(int, int, int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetSize(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Percent" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="628">In member 'ExcelDrawing.SetSize(int)', correct the casing of 'Percent' in parameter name 'Percent' by changing it to 'percent'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetSize(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Pixel" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="645">In member 'ExcelDrawing.SetSize(int, int)', correct the casing of 'Pixel' in parameter name 'PixelHeight' by changing it to 'pixel'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="645">In member 'ExcelDrawing.SetSize(int, int)', correct the casing of 'Pixel' in parameter name 'PixelWidth' by changing it to 'pixel'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDrawing+ExcelPosition" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelDrawing.ExcelPosition'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#_node" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelDrawing.ExcelPosition._node' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_ns" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelDrawing.ExcelPosition._ns' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Column" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Column(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="118">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawing.ExcelPosition.Column.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ColumnOff" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_ColumnOff(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="149">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawing.ExcelPosition.ColumnOff.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Row" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Row(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="130">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawing.ExcelPosition.Row.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#RowOff" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_RowOff(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBase.cs" Line="168">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawing.ExcelPosition.RowOff.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDrawingBorder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="77">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelDrawingBorder.ExcelDrawingBorder(XmlNamespaceManager, XmlNode, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="78">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelDrawingBorder.ExcelDrawingBorder(XmlNamespaceManager, XmlNode, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="79">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelDrawingBorder.ExcelDrawingBorder(XmlNamespaceManager, XmlNode, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TranslateLineCap(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="204">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelDrawingBorder.TranslateLineCap(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TranslateLineCapText(OfficeOpenXml.Drawing.eLineCap)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="192">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelDrawingBorder.TranslateLineCapText(eLineCap)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TranslateLineStyle(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="170">'ExcelDrawingBorder.TranslateLineStyle(string)' has a cyclomatic complexity of 26. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="188">'ExcelDrawingBorder.TranslateLineStyle(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Linestyle" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="188">Correct the spelling of the unrecognized token 'Linestyle' in the literal '"Invalid Linestyle"'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="170">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelDrawingBorder.TranslateLineStyle(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TranslateLineStyleText(OfficeOpenXml.Drawing.eLineStyle)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="166">'ExcelDrawingBorder.TranslateLineStyleText(eLineStyle)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Linestyle" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="166">Correct the spelling of the unrecognized token 'Linestyle' in the literal '"Invalid Linestyle"'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="147">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelDrawingBorder.TranslateLineStyleText(eLineStyle)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="155">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawingBorder.TranslateLineStyleText(eLineStyle)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Width" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Width(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="value*12700" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="141">Correct the potential overflow in the operation 'value*12700' in 'ExcelDrawingBorder.Width.set(int)'.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingBorder.cs" Line="141">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawingBorder.Width.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDrawingFill" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Color" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Color()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="161">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelDrawingFill.Color.get()' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="155">Replace the call to 'string.operator ==(string, string)' in 'ExcelDrawingFill.Color.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Color(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="172">'ExcelDrawingFill.Color.set(Color)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="FillStyle" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="172">Correct the spelling of the unrecognized token 'FillStyle' in the literal '"FillStyle must be set to SolidFill"'.</Issue>
              </Message>
              <Message Id="SolidFill" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="172">Correct the spelling of the unrecognized token 'SolidFill' in the literal '"FillStyle must be set to SolidFill"'.</Issue>
              </Message>
              <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="175">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelDrawingFill.Color.set(Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetStyleEnum(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="109">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelDrawingFill.GetStyleEnum(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStyleText(eFillStyle)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="128">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelDrawingFill.GetStyleText(eFillStyle)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Style" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Style(eFillStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="Fillstyle" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="93">Correct the spelling of the unrecognized token 'Fillstyle' in the literal '"Fillstyle not implemented"'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Transparancy" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Transparancy" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="185">Correct the spelling of 'Transparancy' in member name 'ExcelDrawingFill.Transparancy' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#set_Transparancy(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="197">'ExcelDrawingFill.Transparancy.set(int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="FillStyle" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="197">Correct the spelling of the unrecognized token 'FillStyle' in the literal '"FillStyle must be set to SolidFill"'.</Issue>
              </Message>
              <Message Id="SolidFill" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="197">Correct the spelling of the unrecognized token 'SolidFill' in the literal '"FillStyle must be set to SolidFill"'.</Issue>
              </Message>
              <Message Id="100-value" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="200">Correct the potential overflow in the operation '100-value' in 'ExcelDrawingFill.Transparancy.set(int)'.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawingFill.cs" Line="200">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawingFill.Transparancy.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDrawings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ExcelDrawings' to end in 'Collection'.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'ExcelDrawings' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddChart(System.String,OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Chart" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="291">In member 'ExcelDrawings.AddChart(string, eChartType)', correct the casing of 'Chart' in parameter name 'ChartType' by changing it to 'chart'.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="291">In member 'ExcelDrawings.AddChart(string, eChartType)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddChart(System.String,OfficeOpenXml.Drawing.Chart.eChartType,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="262">'ExcelDrawings.AddChart(string, eChartType, ExcelPivotTable)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Chart" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="259">In member 'ExcelDrawings.AddChart(string, eChartType, ExcelPivotTable)', correct the casing of 'Chart' in parameter name 'ChartType' by changing it to 'chart'.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="259">In member 'ExcelDrawings.AddChart(string, eChartType, ExcelPivotTable)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="Pivot" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="259">In member 'ExcelDrawings.AddChart(string, eChartType, ExcelPivotTable)', correct the casing of 'Pivot' in parameter name 'PivotTableSource' by changing it to 'pivot'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="260">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.AddChart(string, eChartType, ExcelPivotTable)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="280">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.AddChart(string, eChartType, ExcelPivotTable)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="260">In externally visible method 'ExcelDrawings.AddChart(string, eChartType, ExcelPivotTable)', validate parameter 'Name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddDrawings()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="137">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.AddDrawings()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="139">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.AddDrawings()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPicture(System.String,System.Drawing.Image)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="301">In member 'ExcelDrawings.AddPicture(string, Image)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPicture(System.String,System.Drawing.Image,System.Uri)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="321">In method 'ExcelDrawings.AddPicture(string, Image, Uri)', object 'pic' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'pic' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="317">'ExcelDrawings.AddPicture(string, Image, Uri)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="327">'ExcelDrawings.AddPicture(string, Image, Uri)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Hyperlink" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="312">In member 'ExcelDrawings.AddPicture(string, Image, Uri)', correct the casing of 'Hyperlink' in parameter name 'Hyperlink' by changing it to 'hyperlink'.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="312">In member 'ExcelDrawings.AddPicture(string, Image, Uri)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="AddPicture" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="327">Correct the spelling of the unrecognized token 'AddPicture' in the literal '"AddPicture: Image can\'t be null"'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="315">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.AddPicture(string, Image, Uri)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="324">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.AddPicture(string, Image, Uri)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="315">In externally visible method 'ExcelDrawings.AddPicture(string, Image, Uri)', validate parameter 'Name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPicture(System.String,System.IO.FileInfo)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Image" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="336">In member 'ExcelDrawings.AddPicture(string, FileInfo)', correct the casing of 'Image' in parameter name 'ImageFile' by changing it to 'image'.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="336">In member 'ExcelDrawings.AddPicture(string, FileInfo)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPicture(System.String,System.IO.FileInfo,System.Uri)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="360">In method 'ExcelDrawings.AddPicture(string, FileInfo, Uri)', object 'pic' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'pic' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="356">'ExcelDrawings.AddPicture(string, FileInfo, Uri)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="366">'ExcelDrawings.AddPicture(string, FileInfo, Uri)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Hyperlink" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="347">In member 'ExcelDrawings.AddPicture(string, FileInfo, Uri)', correct the casing of 'Hyperlink' in parameter name 'Hyperlink' by changing it to 'hyperlink'.</Issue>
            </Message>
            <Message Id="Image" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="347">In member 'ExcelDrawings.AddPicture(string, FileInfo, Uri)', correct the casing of 'Image' in parameter name 'ImageFile' by changing it to 'image'.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="347">In member 'ExcelDrawings.AddPicture(string, FileInfo, Uri)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="AddPicture" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="366">Correct the spelling of the unrecognized token 'AddPicture' in the literal '"AddPicture: ImageFile can\'t be null"'.</Issue>
            </Message>
            <Message Id="ImageFile" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="366">Correct the spelling of the unrecognized token 'ImageFile' in the literal '"AddPicture: ImageFile can\'t be null"'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="354">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.AddPicture(string, FileInfo, Uri)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="363">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.AddPicture(string, FileInfo, Uri)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="354">In externally visible method 'ExcelDrawings.AddPicture(string, FileInfo, Uri)', validate parameter 'Name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddShape(System.String,eShapeStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="387">In method 'ExcelDrawings.AddShape(string, eShapeStyle)', object 'shape' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'shape' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="384">'ExcelDrawings.AddShape(string, eShapeStyle)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="377">In member 'ExcelDrawings.AddShape(string, eShapeStyle)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="Style" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="377">In member 'ExcelDrawings.AddShape(string, eShapeStyle)', correct the casing of 'Style' in parameter name 'Style' by changing it to 'style'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="382">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.AddShape(string, eShapeStyle)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="391">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.AddShape(string, eShapeStyle)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="382">In externally visible method 'ExcelDrawings.AddShape(string, eShapeStyle)', validate parameter 'Name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AdjustHeight(System.Int32[,])" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="0#" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="529">'pos' is a multidimensional array. Replace it with a jagged array if possible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AdjustWidth(System.Int32[,])" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="0#" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="511">'pos' is a multidimensional array. Replace it with a jagged array if possible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateDrawingXml()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="399">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.CreateDrawingXml()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="398">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.CreateDrawingXml()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="396">Replace the call to 'string.operator ==(string, string)' in 'ExcelDrawings.CreateDrawingXml()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="572">Change 'ExcelDrawings.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="572">Modify 'ExcelDrawings.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DrawingXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="107">Modify member 'ExcelDrawings.DrawingXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDrawingHeight()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Body" Certainty="25" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="560">'ExcelDrawings.GetDrawingHeight()' uses a multidimensional array of 'int[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="Return" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="25" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="559">'ExcelDrawings.GetDrawingHeight()' returns a multidimensional array of 'int[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDrawingWidths()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="Body" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Body" Certainty="25" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="548">'ExcelDrawings.GetDrawingWidths()' uses a multidimensional array of 'int[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
            <Message Id="Return" TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Return" Certainty="25" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="547">'ExcelDrawings.GetDrawingWidths()' returns a multidimensional array of 'int[,]'. Replace it with a jagged array if possible.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="194">In member 'ExcelDrawings.this[int]', correct the casing of 'ID' in parameter name 'PositionID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Position" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="194">In member 'ExcelDrawings.this[int]', correct the casing of 'Position' in parameter name 'PositionID' by changing it to 'position'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="207">In member 'ExcelDrawings.this[string]', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Item(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="208">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.this.get(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="210">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.this.get(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="208">In externally visible method 'ExcelDrawings.this.get(string)', validate parameter 'Name' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#NameSpaceManager" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NameSpace" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="166">The compound word 'NameSpace' in member name 'ExcelDrawings.NameSpaceManager' exists as a discrete term. If your usage is intended to be single word, case it as 'Namespace' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(OfficeOpenXml.Drawing.ExcelDrawing)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Drawing" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="479">In member 'ExcelDrawings.Remove(ExcelDrawing)', correct the casing of 'Drawing' in parameter name 'Drawing' by changing it to 'drawing'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="480">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.Remove(ExcelDrawing)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="480">In externally visible method 'ExcelDrawings.Remove(ExcelDrawing)', validate parameter 'Drawing' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="455">In member 'ExcelDrawings.Remove(int)', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="487">In member 'ExcelDrawings.Remove(string)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="488">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.Remove(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="488">In externally visible method 'ExcelDrawings.Remove(string)', validate parameter 'Name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveDrawing(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="469">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.RemoveDrawing(int)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelDrawings.cs" Line="471">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDrawings.RemoveDrawing(int)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPicture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.Drawing.ExcelDrawings,System.Xml.XmlNode,System.IO.FileInfo,System.Uri)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelPicture.cs" Line="126">In method 'ExcelPicture.ExcelPicture(ExcelDrawings, XmlNode, FileInfo, Uri)', object 'imagestream' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'imagestream' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddNewPicture(System.Byte[],System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelPicture.cs" Line="190">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelPicture.AddNewPicture(byte[], string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelPicture.cs" Line="398">Ensure that 'ExcelPicture.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetContentType(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelPicture.cs" Line="156">'ExcelPicture.GetContentType(string)' has a cyclomatic complexity of 31. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelPicture.cs" Line="157">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelPicture.GetContentType(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Image" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Image(System.Drawing.Image)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelPicture.cs" Line="292">'ExcelPicture.Image.set(Image)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelShape" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.Drawing.ExcelDrawings,System.Xml.XmlNode,eShapeStyle)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="style" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelShape.cs" Line="311">Parameter 'style' of 'ExcelShape.ExcelShape(ExcelDrawings, XmlNode, eShapeStyle)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Indent" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Indent(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelShape.cs" Line="517">Method 'ExcelShape.Indent.set(int)' passes 'Indent level must be between 0 and 8' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelShape.cs" Line="519">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelShape.Indent.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Style" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Style()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelShape.cs" Line="301">'ExcelShape.Style.get()' creates an exception of type 'Exception', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelShape.cs" Line="301">'ExcelShape.Style.get()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="shapetype" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelShape.cs" Line="301">Correct the spelling of the unrecognized token 'shapetype' in the literal '"Invalid shapetype "'.</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelShape.cs" Line="301">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelShape.Style.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Style(eShapeStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelShape.cs" Line="307">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelShape.Style.set(eShapeStyle)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelView3D" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DepthPercent" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_DepthPercent(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelView3D.cs" Line="126">Method 'ExcelView3D.DepthPercent.set(int)' passes 'Value must be between 0 and 2000' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelView3D.cs" Line="128">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelView3D.DepthPercent.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#HeightPercent" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_HeightPercent(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelView3D.cs" Line="145">Method 'ExcelView3D.HeightPercent.set(int)' passes 'Value must be between 5 and 500' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing" File="ExcelView3D.cs" Line="147">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelView3D.HeightPercent.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.Drawing.Chart">
       <Types>
        <Type Name="eAxisOrientation" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eAxisOrientation' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eAxisPosition" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eAxisPosition' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eAxisTickMark" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eAxisTickMark' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eChartStyle" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eChartStyle' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eChartType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Name="NotFlagsNoZeroValue" Certainty="95" Level="CriticalError">Add a member to 'eChartType' that has a value of zero with a suggested name of 'None'.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eChartType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#StockHLC" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HLC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HLC' in member name 'eChartType.StockHLC' by changing it to 'Hlc'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StockOHLC" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="OHLC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'OHLC' in member name 'eChartType.StockOHLC' by changing it to 'Ohlc'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StockVHLC" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="VHLC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'VHLC' in member name 'eChartType.StockVHLC' by changing it to 'Vhlc'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StockVOHLC" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="VOHLC" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'VOHLC' in member name 'eChartType.StockVOHLC' by changing it to 'Vohlc'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eCrossBetween" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eCrossBetween' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eCrosses" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eCrosses' by changing it to 'E'.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'eCrosses' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eDirection" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eDirection' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eDisplayBlanksAs" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eDisplayBlanksAs' by changing it to 'E'.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'eDisplayBlanksAs' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eGrouping" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eGrouping' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eLabelPosition" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eLabelPosition' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eLegendPosition" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eLegendPosition' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eMarkerStyle" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eMarkerStyle' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#X" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'eMarkerStyle.X'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ePieType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'ePieType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eRadarStyle" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eRadarStyle' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eScatterStyle" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eScatterStyle' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eShape" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eShape' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eSizeRepresents" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eSizeRepresents' by changing it to 'E'.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'eSizeRepresents' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eTickLabelPosition" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eTickLabelPosition' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eTrendLine" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eTrendLine' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#MovingAvgerage" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Avgerage" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Avgerage' in member name 'eTrendLine.MovingAvgerage' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eXAxisPosition" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Name="NotFlagsNoZeroValue" Certainty="95" Level="CriticalError">Add a member to 'eXAxisPosition' that has a value of zero with a suggested name of 'None'.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eXAxisPosition' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelBarChart" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetChartType(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBarChart.cs" Line="301">'ExcelBarChart.GetChartType(string)' has a cyclomatic complexity of 40. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDirectionEnum(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBarChart.cs" Line="247">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelBarChart.GetDirectionEnum(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDirectionText(OfficeOpenXml.Drawing.Chart.eDirection)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBarChart.cs" Line="236">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelBarChart.GetDirectionText(eDirection)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetShapeEnum(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBarChart.cs" Line="280">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelBarChart.GetShapeEnum(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetShapeText(OfficeOpenXml.Drawing.Chart.eShape)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBarChart.cs" Line="259">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelBarChart.GetShapeText(eShape)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetTypeProperties(OfficeOpenXml.Drawing.ExcelDrawings,OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBarChart.cs" Line="91">'ExcelBarChart.SetTypeProperties(ExcelDrawings, eChartType)' has a cyclomatic complexity of 63. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="drawings" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBarChart.cs" Line="91">Parameter 'drawings' of 'ExcelBarChart.SetTypeProperties(ExcelDrawings, eChartType)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelBubbleChart" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_series" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelBubbleChart._series' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BubbleScale" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_BubbleScale(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBubbleChart.cs" Line="56">Method 'ExcelBubbleChart.BubbleScale.set(int)' passes 'Bubblescale out of range. 0-300 allowed' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBubbleChart.cs" Line="58">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelBubbleChart.BubbleScale.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SizeRepresents" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_SizeRepresents()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBubbleChart.cs" Line="100">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelBubbleChart.SizeRepresents.get()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelBubbleChartSerie" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Serie' in type name 'ExcelBubbleChartSerie'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BubbleSize" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_BubbleSize(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBubbleChartSerie.cs" Line="119">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelBubbleChartSerie.BubbleSize.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBubbleChartSerie.cs" Line="125">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelBubbleChartSerie.BubbleSize.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GenerateLit()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBubbleChartSerie.cs" Line="148">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelBubbleChartSerie.GenerateLit()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelBubbleChartSerie.cs" Line="149">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelBubbleChartSerie.GenerateLit()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelBubbleChartSeries" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">'ExcelBubbleChartSeries' appears to be a non-generic, strongly typed collection. Add an implementation to the instance of IEnumerable&lt;T&gt; where T is the underlying element type of 'ExcelBubbleChartSeries'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ExcelBubbleChartSeries' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Add(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Bubble" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="48">In member 'ExcelBubbleChartSeries.Add(ExcelRangeBase, ExcelRangeBase, ExcelRangeBase)', correct the casing of 'Bubble' in parameter name 'BubbleSize' by changing it to 'bubble'.</Issue>
            </Message>
            <Message Id="Serie" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="48">In member 'ExcelBubbleChartSeries.Add(ExcelRangeBase, ExcelRangeBase, ExcelRangeBase)', correct the casing of 'Serie' in parameter name 'Serie' by changing it to 'serie'.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="48">In member 'ExcelBubbleChartSeries.Add(ExcelRangeBase, ExcelRangeBase, ExcelRangeBase)', correct the casing of 'X' in parameter name 'XSerie' by changing it to 'x'.</Issue>
            </Message>
            <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="48">In method 'ExcelBubbleChartSeries.Add(ExcelRangeBase, ExcelRangeBase, ExcelRangeBase)', correct the spelling of 'Serie' in parameter name 'Serie' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="48">In method 'ExcelBubbleChartSeries.Add(ExcelRangeBase, ExcelRangeBase, ExcelRangeBase)', correct the spelling of 'Serie' in parameter name 'XSerie' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="48">In method 'ExcelBubbleChartSeries.Add(ExcelRangeBase, ExcelRangeBase, ExcelRangeBase)', correct the spelling of 'X' in parameter name 'XSerie' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="49">In externally visible method 'ExcelBubbleChartSeries.Add(ExcelRangeBase, ExcelRangeBase, ExcelRangeBase)', validate parameter 'Serie' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="49">In externally visible method 'ExcelBubbleChartSeries.Add(ExcelRangeBase, ExcelRangeBase, ExcelRangeBase)', validate parameter 'XSerie' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="49">In externally visible method 'ExcelBubbleChartSeries.Add(ExcelRangeBase, ExcelRangeBase, ExcelRangeBase)', validate parameter 'BubbleSize' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Bubble" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="52">In member 'ExcelBubbleChartSeries.Add(string, string, string)', correct the casing of 'Bubble' in parameter name 'BubbleSizeAddress' by changing it to 'bubble'.</Issue>
            </Message>
            <Message Id="Serie" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="52">In member 'ExcelBubbleChartSeries.Add(string, string, string)', correct the casing of 'Serie' in parameter name 'SerieAddress' by changing it to 'serie'.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="52">In member 'ExcelBubbleChartSeries.Add(string, string, string)', correct the casing of 'X' in parameter name 'XSerieAddress' by changing it to 'x'.</Issue>
            </Message>
            <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="52">In method 'ExcelBubbleChartSeries.Add(string, string, string)', correct the spelling of 'Serie' in parameter name 'SerieAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="52">In method 'ExcelBubbleChartSeries.Add(string, string, string)', correct the spelling of 'Serie' in parameter name 'XSerieAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="52">In method 'ExcelBubbleChartSeries.Add(string, string, string)', correct the spelling of 'X' in parameter name 'XSerieAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChart" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.Drawing.ExcelDrawings,System.Xml.XmlNode,OfficeOpenXml.Drawing.Chart.eChartType,OfficeOpenXml.Drawing.Chart.ExcelChart,OfficeOpenXml.Table.PivotTable.ExcelPivotTable)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1197">'ExcelChart.ExcelChart(ExcelDrawings, XmlNode, eChartType, ExcelChart, ExcelPivotTable)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ExcelChart..ctor(ExcelDrawings, XmlNode, eChartType, ExcelChart, ExcelPivotTable)&#xD;&#xA;ExcelChart.CreateNewChart(ExcelDrawings, eChartType, ExcelChart):Void&#xD;&#xA;XmlHelper.get_&#xD;&#xA;ExcelChart.SetPivotSource(ExcelPivotTable):Void&#xD;&#xA;ExcelChart.get_Series():ExcelChartSeries</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(OfficeOpenXml.Drawing.ExcelDrawings,System.Xml.XmlNode,System.Uri,OfficeOpenXml.Packaging.ZipPackagePart,System.Xml.XmlDocument,System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1197">'ExcelChart.ExcelChart(ExcelDrawings, XmlNode, Uri, ZipPackagePart, XmlDocument, XmlNode)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ExcelChart..ctor(ExcelDrawings, XmlNode, Uri, ZipPackagePart, XmlDocument, XmlNode)&#xD;&#xA;ExcelChart.InitChartLoad(ExcelDrawings, XmlNode):Voi&#xD;&#xA;ExcelChart.GetChartType(String):eChartType</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_chartNode" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelChart._chartNode' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error">Modify member 'ExcelChart._chartNode' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_chartSeries" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelChart._chartSeries' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_chartXmlHelper" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelChart._chartXmlHelper' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddAxis()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1144">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddAxis()' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1144">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddAxis()' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1144">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddAxis()' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1144">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddAxis()' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1134">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddAxis()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1153">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddAxis()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1154">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddAxis()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1158">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddAxis()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1159">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddAxis()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddAxisId(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="697">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddAxisId(int, int, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="693">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddAxisId(int, int, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddBarDir(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="type" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="823">Parameter 'type' of 'ExcelChart.AddBarDir(eChartType)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFirstSliceAng(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="774">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChart.AddFirstSliceAng(eChartType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddHasMarker(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="797">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChart.AddHasMarker(eChartType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddHoleSize(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="762">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChart.AddHoleSize(eChartType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddPerspectiveXml(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="type" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="834">Parameter 'type' of 'ExcelChart.AddPerspectiveXml(eChartType)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddRadarType(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="737">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChart.AddRadarType(eChartType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddScatterType(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="722">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChart.AddScatterType(eChartType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddShape(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="type" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="812">Parameter 'type' of 'ExcelChart.AddShape(eChartType)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSurfacePart(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="858">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChart.AddSurfacePart(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="859">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.AddSurfacePart(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSurfaceXml(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="type" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="846">Parameter 'type' of 'ExcelChart.AddSurfaceXml(eChartType)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Axis" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1235">Change 'ExcelChart.Axis' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ChartXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1192">Modify member 'ExcelChart.ChartXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckRemoveAxis(OfficeOpenXml.Drawing.Chart.ExcelChartAxis)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1489">'ExcelChart.CheckRemoveAxis(ExcelChartAxis)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateNewChart(OfficeOpenXml.Drawing.ExcelDrawings,OfficeOpenXml.Drawing.Chart.eChartType,OfficeOpenXml.Drawing.Chart.ExcelChart)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="508">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.CreateNewChart(ExcelDrawings, eChartType, ExcelChart)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="508">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.CreateNewChart(ExcelDrawings, eChartType, ExcelChart)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="508">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.CreateNewChart(ExcelDrawings, eChartType, ExcelChart)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="470">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.CreateNewChart(ExcelDrawings, eChartType, ExcelChart)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="491">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.CreateNewChart(ExcelDrawings, eChartType, ExcelChart)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteMe()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="EPPlus" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1934">Correct the spelling of the unrecognized token 'EPPlus' in the literal '"EPPlus internal error when deleteing chart."'.</Issue>
            </Message>
            <Message Id="deleteing" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1934">Correct the spelling of the unrecognized token 'deleteing' in the literal '"EPPlus internal error when deleteing chart."'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DisplayBlanksAs" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_DisplayBlanksAs(OfficeOpenXml.Drawing.Chart.eDisplayBlanksAs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1390">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelChart.DisplayBlanksAs.set(eDisplayBlanksAs)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ExistsAxis(OfficeOpenXml.Drawing.Chart.ExcelChartAxis)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1512">'ExcelChart.ExistsAxis(ExcelChartAxis)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetChart(System.Xml.XmlElement,OfficeOpenXml.Drawing.ExcelDrawings,System.Xml.XmlNode,System.Uri,OfficeOpenXml.Packaging.ZipPackagePart,System.Xml.XmlDocument,OfficeOpenXml.Drawing.Chart.ExcelChart)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1722">'ExcelChart.GetChart(XmlElement, ExcelDrawings, XmlNode, Uri, ZipPackagePart, XmlDocument, ExcelChart)' has a cyclomatic complexity of 50. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetChartNodeText()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1037">Change 'ExcelChart.GetChartNodeText()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetChartType(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="568">'ExcelChart.GetChartType(string)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetGroupingEnum(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1670">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChart.GetGroupingEnum(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetGroupingText(OfficeOpenXml.Drawing.Chart.eGrouping)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1655">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChart.GetGroupingText(eGrouping)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1649">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChart.Id' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsType3D(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="865">'ExcelChart.IsType3D(eChartType)' has a cyclomatic complexity of 38. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsTypeShape()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="936">'ExcelChart.IsTypeShape()' has a cyclomatic complexity of 31. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadAxis()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="519">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.LoadAxis()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="524">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.LoadAxis()' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveSecondaryAxis()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1181">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChart.RemoveSecondaryAxis()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetPivotSource(OfficeOpenXml.Table.PivotTable.ExcelPivotTable)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1918">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChart.SetPivotSource(ExcelPivotTable)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Style" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Style(OfficeOpenXml.Drawing.Chart.eChartStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1341">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelChart.Style.set(eChartStyle)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#UseSecondaryAxis" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_UseSecondaryAxis(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1274">'ExcelChart.UseSecondaryAxis.set(bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1278">'ExcelChart.UseSecondaryAxis.set(bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="serie" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1278">Correct the spelling of the unrecognized token 'serie' in the literal '"Can\'t set to secondary axis when no serie uses the primary axis"'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#View3D" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_View3D()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1601">'ExcelChart.View3D.get()' creates an exception of type 'Exception', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1601">'ExcelChart.View3D.get()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="Charttype" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1601">Correct the spelling of the unrecognized token 'Charttype' in the literal '"Charttype does not support 3D"'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#WorkSheet" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="WorkSheet" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChart.cs" Line="1188">The compound word 'WorkSheet' in member name 'ExcelChart.WorkSheet' exists as a discrete term. If your usage is intended to be single word, case it as 'Worksheet' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChartAxis" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AxisPosition" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_AxisPosition(OfficeOpenXml.Drawing.Chart.eAxisPosition)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="269">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelChartAxis.AxisPosition.set(eAxisPosition)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#AxisType" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_AxisType()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="241">Modify 'ExcelChartAxis.AxisType.get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CrossBetween" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CrossBetween()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="324">Modify 'ExcelChartAxis.CrossBetween.get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_CrossBetween(OfficeOpenXml.Drawing.Chart.eCrossBetween)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="333">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelChartAxis.CrossBetween.set(eCrossBetween)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Crosses" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Crosses()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="291">Modify 'ExcelChartAxis.Crosses.get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Crosses(OfficeOpenXml.Drawing.Chart.eCrosses)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="300">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelChartAxis.Crosses.set(eCrosses)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#LabelPosition" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_LabelPosition()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="395">Modify 'ExcelChartAxis.LabelPosition.get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_LabelPosition(OfficeOpenXml.Drawing.Chart.eTickLabelPosition)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="404">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelChartAxis.LabelPosition.set(eTickLabelPosition)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#LogBase" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_LogBase(System.Nullable`1&lt;System.Double&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="665">Method 'ExcelChartAxis.LogBase.set(double?)' passes 'Value must be between 2 and 1000' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#MajorTickMark" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_MajorTickMark()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="187">Modify 'ExcelChartAxis.MajorTickMark.get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_MajorTickMark(OfficeOpenXml.Drawing.Chart.eAxisTickMark)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="195">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelChartAxis.MajorTickMark.set(eAxisTickMark)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#MinorTickMark" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_MinorTickMark()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="219">Modify 'ExcelChartAxis.MinorTickMark.get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_MinorTickMark(OfficeOpenXml.Drawing.Chart.eAxisTickMark)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="227">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelChartAxis.MinorTickMark.set(eAxisTickMark)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Orientation" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Orientation()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="680">Replace the call to 'string.operator ==(string, string)' in 'ExcelChartAxis.Orientation.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Orientation(OfficeOpenXml.Drawing.Chart.eAxisOrientation)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="692">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelChartAxis.Orientation.set(eAxisOrientation)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#TickLabelPosition" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_TickLabelPosition()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="480">Replace the call to 'string.operator ==(string, string)' in 'ExcelChartAxis.TickLabelPosition.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_TickLabelPosition(OfficeOpenXml.Drawing.Chart.eTickLabelPosition)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartAxis.cs" Line="492">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelChartAxis.TickLabelPosition.set(eTickLabelPosition)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChartCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="charttypes" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartCollection.cs" Line="68">Correct the spelling of the unrecognized token 'charttypes' in the literal '"3D charts can not be combined with other charttypes"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartCollection.cs" Line="64">Correct the spelling of the unrecognized token 'charttypes' in the literal '"Can not add other charttypes to a pivot chart"'.</Issue>
            </Message>
            <Message Id="prependingChartNode" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartCollection.cs" Line="71">'ExcelChartCollection.Add(eChartType)' declares a variable, 'prependingChartNode', of type 'XmlNode', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartCollection.cs" Line="101">In member 'ExcelChartCollection.this[int]', correct the casing of 'ID' in parameter name 'PositionID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Position" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartCollection.cs" Line="101">In member 'ExcelChartCollection.this[int]', correct the casing of 'Position' in parameter name 'PositionID' by changing it to 'position'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.Drawing.Chart.ExcelChart&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartCollection.cs" Line="85">Make 'ExcelChartCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;ExcelChart&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartCollection.cs" Line="90">Make 'ExcelChartCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChartDataLabel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetPosEnum(System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Pos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartDataLabel.cs" Line="265">Correct the spelling of 'Pos' in member name 'ExcelChartDataLabel.GetPosEnum(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="pos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartDataLabel.cs" Line="265">In method 'ExcelChartDataLabel.GetPosEnum(string)', correct the spelling of 'pos' in parameter name 'pos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartDataLabel.cs" Line="265">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChartDataLabel.GetPosEnum(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPosText(OfficeOpenXml.Drawing.Chart.eLabelPosition)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Pos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartDataLabel.cs" Line="240">Correct the spelling of 'Pos' in member name 'ExcelChartDataLabel.GetPosText(eLabelPosition)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="pos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartDataLabel.cs" Line="240">In method 'ExcelChartDataLabel.GetPosText(eLabelPosition)', correct the spelling of 'pos' in parameter name 'pos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartDataLabel.cs" Line="240">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChartDataLabel.GetPosText(eLabelPosition)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChartLegend" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Overlay" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Overlay(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartLegend.cs" Line="120">'ExcelChartLegend.Overlay.set(bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Position" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Position()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartLegend.cs" Line="71">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelChartLegend.Position.get()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Position(OfficeOpenXml.Drawing.Chart.eLegendPosition)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartLegend.cs" Line="87">'ExcelChartLegend.Position.set(eLegendPosition)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChartSerie" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Serie' in type name 'ExcelChartSerie'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.Drawing.Chart.ExcelChartSeries,System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSerie.cs" Line="79">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChartSerie.ExcelChartSerie(ExcelChartSeries, XmlNamespaceManager, XmlNode, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSerie.cs" Line="80">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChartSerie.ExcelChartSerie(ExcelChartSeries, XmlNamespaceManager, XmlNode, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_node" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelChartSerie._node' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error">Modify member 'ExcelChartSerie._node' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_ns" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelChartSerie._ns' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HeaderAddress" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_HeaderAddress()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSerie.cs" Line="121">Replace the call to 'string.operator ==(string, string)' in 'ExcelChartSerie.HeaderAddress.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_HeaderAddress(OfficeOpenXml.ExcelAddressBase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSerie.cs" Line="134">'ExcelChartSerie.HeaderAddress.set(ExcelAddressBase)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning">In externally visible method 'ExcelChartSerie.HeaderAddress.set(ExcelAddressBase)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Series" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Series(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSerie.cs" Line="162">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChartSerie.Series.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSerie.cs" Line="170">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChartSerie.Series.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSerie.cs" Line="173">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChartSerie.Series.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#XSeries" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_XSeries(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSerie.cs" Line="197">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChartSerie.XSeries.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSerie.cs" Line="203">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelChartSerie.XSeries.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChartSerieDataLabel" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Serie' in type name 'ExcelChartSerieDataLabel'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelChartSeries" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">'ExcelChartSeries' appears to be a non-generic, strongly typed collection. Add an implementation to the instance of IEnumerable&lt;T&gt; where T is the underlying element type of 'ExcelChartSeries'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ExcelChartSeries' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Add(OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.ExcelRangeBase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Serie" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="154">In member 'ExcelChartSeries.Add(ExcelRangeBase, ExcelRangeBase)', correct the casing of 'Serie' in parameter name 'Serie' by changing it to 'serie'.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="154">In member 'ExcelChartSeries.Add(ExcelRangeBase, ExcelRangeBase)', correct the casing of 'X' in parameter name 'XSerie' by changing it to 'x'.</Issue>
            </Message>
            <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="154">In method 'ExcelChartSeries.Add(ExcelRangeBase, ExcelRangeBase)', correct the spelling of 'Serie' in parameter name 'Serie' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="154">In method 'ExcelChartSeries.Add(ExcelRangeBase, ExcelRangeBase)', correct the spelling of 'Serie' in parameter name 'XSerie' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="154">In method 'ExcelChartSeries.Add(ExcelRangeBase, ExcelRangeBase)', correct the spelling of 'X' in parameter name 'XSerie' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="pivotchart" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="157">Correct the spelling of the unrecognized token 'pivotchart' in the literal '"Can\'t add a serie to a pivotchart"'.</Issue>
            </Message>
            <Message Id="serie" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="157">Correct the spelling of the unrecognized token 'serie' in the literal '"Can\'t add a serie to a pivotchart"'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="159">In externally visible method 'ExcelChartSeries.Add(ExcelRangeBase, ExcelRangeBase)', validate parameter 'Serie' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="159">In externally visible method 'ExcelChartSeries.Add(ExcelRangeBase, ExcelRangeBase)', validate parameter 'XSerie' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Serie" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="168">In member 'ExcelChartSeries.Add(string, string)', correct the casing of 'Serie' in parameter name 'SerieAddress' by changing it to 'serie'.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="168">In member 'ExcelChartSeries.Add(string, string)', correct the casing of 'X' in parameter name 'XSerieAddress' by changing it to 'x'.</Issue>
            </Message>
            <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="168">In method 'ExcelChartSeries.Add(string, string)', correct the spelling of 'Serie' in parameter name 'SerieAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="168">In method 'ExcelChartSeries.Add(string, string)', correct the spelling of 'Serie' in parameter name 'XSerieAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="168">In method 'ExcelChartSeries.Add(string, string)', correct the spelling of 'X' in parameter name 'XSerieAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="pivotchart" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="171">Correct the spelling of the unrecognized token 'pivotchart' in the literal '"Can\'t add a serie to a pivotchart"'.</Issue>
            </Message>
            <Message Id="serie" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="171">Correct the spelling of the unrecognized token 'serie' in the literal '"Can\'t add a serie to a pivotchart"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddAxisNodes(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="327">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChartSeries.AddAxisNodes(eChartType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddExplosion(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="345">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChartSeries.AddExplosion(eChartType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddMarker(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="299">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChartSeries.AddMarker(eChartType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddScatterPoint(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="316">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChartSeries.AddScatterPoint(eChartType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSeries(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="243">'serie', a variable, is cast to type 'ExcelLineChartSerie' multiple times in method 'ExcelChartSeries.AddSeries(string, string, string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="Series" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="176">In member 'ExcelChartSeries.AddSeries(string, string, string)', correct the casing of 'Series' in parameter name 'SeriesAddress' by changing it to 'series'.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="176">In member 'ExcelChartSeries.AddSeries(string, string, string)', correct the casing of 'X' in parameter name 'XSeriesAddress' by changing it to 'x'.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="176">In method 'ExcelChartSeries.AddSeries(string, string, string)', correct the spelling of 'X' in parameter name 'XSeriesAddress' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="188">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ExcelChartSeries.AddSeries(string, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSmooth(OfficeOpenXml.Drawing.Chart.eChartType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="358">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelChartSeries.AddSmooth(eChartType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Delete(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="129">In member 'ExcelChartSeries.Delete(int)', correct the casing of 'ID' in parameter name 'PositionID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Position" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="129">In member 'ExcelChartSeries.Delete(int)', correct the casing of 'Position' in parameter name 'PositionID' by changing it to 'position'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindIndex()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="273">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelChartSeries.FindIndex()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="113">In member 'ExcelChartSeries.this[int]', correct the casing of 'ID' in parameter name 'PositionID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Position" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSeries.cs" Line="113">In member 'ExcelChartSeries.this[int]', correct the casing of 'Position' in parameter name 'PositionID' by changing it to 'position'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChartSurface" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Thickness" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Thickness(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSurface.cs" Line="65">Method 'ExcelChartSurface.Thickness.set(int)' passes 'Thickness out of range. (0-9)' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartSurface.cs" Line="67">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelChartSurface.Thickness.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChartTitle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AnchorCtr" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ctr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartTitle.cs" Line="165">Correct the spelling of 'Ctr' in member name 'ExcelChartTitle.AnchorCtr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Rotation" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Rotation(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartTitle.cs" Line="221">Method 'ExcelChartTitle.Rotation.set(double)' passes 'Rotation must be between 0 and 360' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartTitle.cs" Line="232">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelChartTitle.Rotation.set(double)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChartTrendline" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Trendline" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Trendline' in type name 'ExcelChartTrendline'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartTrendline.cs" Line="123">The property name 'ExcelChartTrendline.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Type()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartTrendline.cs" Line="124">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelChartTrendline.Type.get()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelChartTrendlineCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Trendline" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Trendline' in type name 'ExcelChartTrendlineCollection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Add(OfficeOpenXml.Drawing.Chart.eTrendLine)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Type" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartTrendline.cs" Line="62">In member 'ExcelChartTrendlineCollection.Add(eTrendLine)', correct the casing of 'Type' in parameter name 'Type' by changing it to 'type'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.Drawing.Chart.ExcelChartTrendline&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartTrendline.cs" Line="96">Make 'ExcelChartTrendlineCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;ExcelChartTrendline&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelChartTrendline.cs" Line="101">Make 'ExcelChartTrendlineCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelLineChartSerie" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Serie' in type name 'ExcelLineChartSerie'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Marker" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Marker()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelLineChartSerie.cs" Line="79">Replace the call to 'string.operator ==(string, string)' in 'ExcelLineChartSerie.Marker.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Marker(OfficeOpenXml.Drawing.Chart.eMarkerStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelLineChartSerie.cs" Line="90">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelLineChartSerie.Marker.set(eMarkerStyle)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPieChartSerie" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Serie' in type name 'ExcelPieChartSerie'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Explosion" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Explosion(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelPieChartSerie.cs" Line="70">Method 'ExcelPieChartSerie.Explosion.set(int)' passes 'Explosion range is 0-400' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelPieChartSerie.cs" Line="72">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPieChartSerie.Explosion.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelRadarChart" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RadarStyle" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_RadarStyle(OfficeOpenXml.Drawing.Chart.eRadarStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelRadarChart.cs" Line="99">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelRadarChart.RadarStyle.set(eRadarStyle)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelRadarChartSerie" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Serie' in type name 'ExcelRadarChartSerie'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Marker" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Marker()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelRadarChartSerie.cs" Line="84">Replace the call to 'string.operator ==(string, string)' in 'ExcelRadarChartSerie.Marker.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Marker(OfficeOpenXml.Drawing.Chart.eMarkerStyle)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelRadarChartSerie.cs" Line="95">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelRadarChartSerie.Marker.set(eMarkerStyle)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#MarkerSize" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_MarkerSize(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelRadarChartSerie.cs" Line="109">Method 'ExcelRadarChartSerie.MarkerSize.set(int)' passes 'MarkerSize out of range. Range from 2-72 allowed.' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelScatterChart" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetScatterEnum(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelScatterChart.cs" Line="81">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelScatterChart.GetScatterEnum(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetScatterText(OfficeOpenXml.Drawing.Chart.eScatterStyle)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelScatterChart.cs" Line="92">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelScatterChart.GetScatterText(eScatterStyle)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelScatterChartSerie" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Serie' in type name 'ExcelScatterChartSerie'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Marker" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Marker()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelScatterChartSerie.cs" Line="109">Replace the call to 'string.operator ==(string, string)' in 'ExcelScatterChartSerie.Marker.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Marker(OfficeOpenXml.Drawing.Chart.eMarkerStyle)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelScatterChartSerie.cs" Line="120">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelScatterChartSerie.Marker.set(eMarkerStyle)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Smooth" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Smooth(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelScatterChartSerie.cs" Line="97">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelScatterChartSerie.Smooth.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelSurfaceChart" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SideWall" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SideWall" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelSurfaceChart.cs" Line="102">The compound word 'SideWall' in member name 'ExcelSurfaceChart.SideWall' exists as a discrete term. If your usage is intended to be single word, case it as 'Sidewall' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#View3D" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_View3D()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelSurfaceChart.cs" Line="85">'ExcelSurfaceChart.View3D.get()' creates an exception of type 'Exception', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelSurfaceChart.cs" Line="85">'ExcelSurfaceChart.View3D.get()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="Charttype" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Chart" File="ExcelSurfaceChart.cs" Line="85">Correct the spelling of the unrecognized token 'Charttype' in the literal '"Charttype does not support 3D"'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelSurfaceChartSerie" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Serie" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Serie' in type name 'ExcelSurfaceChartSerie'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eYAxisPosition" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eYAxisPosition' by changing it to 'E'.</Issue>
          </Message>
          <Message TypeName="MarkEnumsWithFlags" Category="Microsoft.Design" CheckId="CA1027" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">The constituent members of 'eYAxisPosition' appear to represent flags that can be combined rather than discrete values. If this is correct, mark the enumeration with FlagsAttribute.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.Drawing.Vml">
       <Types>
        <Type Name="eLineStyleVml" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eLineStyleVml' by changing it to 'E'.</Issue>
          </Message>
          <Message Id="Vml" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vml' in type name 'eLineStyleVml'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eTextAlignHorizontalVml" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eTextAlignHorizontalVml' by changing it to 'E'.</Issue>
          </Message>
          <Message Id="Vml" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vml' in type name 'eTextAlignHorizontalVml'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eTextAlignVerticalVml" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eTextAlignVerticalVml' by changing it to 'E'.</Issue>
          </Message>
          <Message Id="Vml" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vml' in type name 'eTextAlignVerticalVml'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelVmlDrawingBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vml" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vml' in type name 'ExcelVmlDrawingBase'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetStyle(System.String,System.String,System.String&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingBase.cs" Line="96">Consider a design that does not require that 'value' be an out parameter.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingBase.cs" Line="96">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVmlDrawingBase.GetStyle(string, string, out string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingBase.cs" Line="97">In externally visible method 'ExcelVmlDrawingBase.GetStyle(string, string, out string)', validate parameter 'style' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetStyle(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingBase.cs" Line="119">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVmlDrawingBase.SetStyle(string, string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingBase.cs" Line="128">Replace the call to 'string.operator !=(string, string)' in 'ExcelVmlDrawingBase.SetStyle(string, string, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingBase.cs" Line="120">In externally visible method 'ExcelVmlDrawingBase.SetStyle(string, string, string)', validate parameter 'style' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingBase.cs" Line="128">In externally visible method 'ExcelVmlDrawingBase.SetStyle(string, string, string)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVmlDrawingBaseCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vml" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vml' in type name 'ExcelVmlDrawingBaseCollection'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'ExcelVmlDrawingBaseCollection' so that it does not end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelPackage,OfficeOpenXml.ExcelWorksheet,System.Uri)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="ws" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingBaseCollection.cs" Line="42">Parameter 'ws' of 'ExcelVmlDrawingBaseCollection.ExcelVmlDrawingBaseCollection(ExcelPackage, ExcelWorksheet, Uri)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVmlDrawingComment" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vml" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vml' in type name 'ExcelVmlDrawingComment'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BackgroundColor" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_BackgroundColor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingComment.cs" Line="172">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingComment.BackgroundColor.get()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingComment.cs" Line="166">Replace the call to 'string.operator ==(string, string)' in 'ExcelVmlDrawingComment.BackgroundColor.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_BackgroundColor(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingComment.cs" Line="186">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingComment.BackgroundColor.set(Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#LineColor" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_LineColor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingComment.cs" Line="253">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingComment.LineColor.get()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingComment.cs" Line="247">Replace the call to 'string.operator ==(string, string)' in 'ExcelVmlDrawingComment.LineColor.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_LineColor(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingComment.cs" Line="267">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingComment.LineColor.set(Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#LineStyle" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_LineStyle()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingComment.cs" Line="201">Replace the call to 'string.operator ==(string, string)' in 'ExcelVmlDrawingComment.LineStyle.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_LineStyle(OfficeOpenXml.Drawing.Vml.eLineStyleVml)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingComment.cs" Line="232">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingComment.LineStyle.set(eLineStyleVml)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#LineWidth" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_LineWidth()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingComment.cs" Line="281">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingComment.LineWidth.get()' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingComment.cs" Line="280">Replace the call to 'string.operator ==(string, string)' in 'ExcelVmlDrawingComment.LineWidth.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVmlDrawingCommentCollection" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Name="NonBreaking" Certainty="95" Level="CriticalError">Implement IDisposable on 'ExcelVmlDrawingCommentCollection' because it creates members of the following IDisposable types: 'RangeCollection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddDrawing(OfficeOpenXml.ExcelRangeBase)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingCommentCollection.cs" Line="140">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingCommentCollection.AddDrawing(ExcelRangeBase)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingCommentCollection.cs" Line="141">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingCommentCollection.AddDrawing(ExcelRangeBase)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingCommentCollection.cs" Line="138">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingCommentCollection.AddDrawing(ExcelRangeBase)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddDrawingsFromXml(OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingCommentCollection.cs" Line="66">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingCommentCollection.AddDrawingsFromXml(ExcelWorksheet)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingCommentCollection.cs" Line="67">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingCommentCollection.AddDrawingsFromXml(ExcelWorksheet)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateVmlDrawings()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingCommentCollection.cs" Line="79">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVmlDrawingCommentCollection.CreateVmlDrawings()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingCommentCollection.cs" Line="80">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingCommentCollection.CreateVmlDrawings()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNewId()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingCommentCollection.cs" Line="172">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingCommentCollection.GetNewId()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingCommentCollection.cs" Line="158">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingCommentCollection.GetNewId()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVmlDrawingPicture" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vml" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vml' in type name 'ExcelVmlDrawingPicture'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BiLevel" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Bi" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPicture.cs" Line="174">Correct the casing of 'Bi' in member name 'ExcelVmlDrawingPicture.BiLevel' by changing it to 'BI'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Gain" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Gain(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPicture.cs" Line="225">Method 'ExcelVmlDrawingPicture.Gain.set(double)' passes 'Value must be positive' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetFracDT(System.String,System.Double)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPicture.cs" Line="286">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVmlDrawingPicture.GetFracDT(string, double)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPicture.cs" Line="288">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingPicture.GetFracDT(string, double)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStyleProp(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPicture.cs" Line="341">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingPicture.GetStyleProp(string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GrayScale" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GrayScale" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPicture.cs" Line="195">The compound word 'GrayScale' in member name 'ExcelVmlDrawingPicture.GrayScale' exists as a discrete term. If your usage is intended to be single word, case it as 'Grayscale' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVmlDrawingPictureCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">'ExcelVmlDrawingPictureCollection' appears to be a non-generic, strongly typed collection. Add an implementation to the instance of IEnumerable&lt;T&gt; where T is the underlying element type of 'ExcelVmlDrawingPictureCollection'.</Issue>
          </Message>
          <Message Id="Vml" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vml' in type name 'ExcelVmlDrawingPictureCollection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#_pck" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelVmlDrawingPictureCollection._pck' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddImage(System.String,System.Uri,System.String,System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="targeUri" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPictureCollection.cs" Line="104">Parameter 'targeUri' of 'ExcelVmlDrawingPictureCollection.AddImage(string, Uri, string, double, double)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPictureCollection.cs" Line="113">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingPictureCollection.AddImage(string, Uri, string, double, double)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPictureCollection.cs" Line="109">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingPictureCollection.AddImage(string, Uri, string, double, double)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateVmlDrawings()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPictureCollection.cs" Line="77">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVmlDrawingPictureCollection.CreateVmlDrawings()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPictureCollection.cs" Line="78">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingPictureCollection.CreateVmlDrawings()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNewId()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPictureCollection.cs" Line="161">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingPictureCollection.GetNewId()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPictureCollection.cs" Line="147">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingPictureCollection.GetNewId()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPictureCollection.cs" Line="124">In member 'ExcelVmlDrawingPictureCollection.this[int]', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPictureCollection.cs" Line="166">Make 'ExcelVmlDrawingPictureCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVmlDrawingPosition" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vml" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vml' in type name 'ExcelVmlDrawingPosition'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetNumber(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPosition.cs" Line="132">'ExcelVmlDrawingPosition.GetNumber(int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="vmlDrawing" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPosition.cs" Line="132">Correct the spelling of the unrecognized token 'vmlDrawing' in the literal '"Anchor element is invalid in vmlDrawing"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetNumber(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPosition.cs" Line="115">'ExcelVmlDrawingPosition.SetNumber(int, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="vmlDrawing" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPosition.cs" Line="115">Correct the spelling of the unrecognized token 'vmlDrawing' in the literal '"Anchor element is invalid in vmlDrawing"'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Drawing\Vml" File="ExcelVmlDrawingPosition.cs" Line="111">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelVmlDrawingPosition.SetNumber(int, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.Encryption">
       <Types>
        <Type Name="EncryptedPackageHandler" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#CombinePassword(System.Byte[],System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="966">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.CombinePassword(byte[], string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="967">Replace the call to 'string.operator ==(string, string)' in 'EncryptedPackageHandler.CombinePassword(byte[], string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateDataSpaceMap()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="383">In method 'EncryptedPackageHandler.CreateDataSpaceMap()', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="382">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.CreateDataSpaceMap()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateDataSpaces(OfficeOpenXml.Utils.CompoundDocument)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="ver" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="335">'EncryptedPackageHandler.CreateDataSpaces(CompoundDocument)' declares a variable, 'ver', of type 'CompoundDocument.StoragePart', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateEncryptionInfo(System.String,OfficeOpenXml.Encryption.AlgorithmID,System.Byte[]&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="473">In method 'EncryptedPackageHandler.CreateEncryptionInfo(string, AlgorithmID, out byte[])', call System.IDisposable.Dispose on object 'sha' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateStrongEncryptionDataSpaceStream()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="353">In method 'EncryptedPackageHandler.CreateStrongEncryptionDataSpaceStream()', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="352">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.CreateStrongEncryptionDataSpaceStream()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateTransformInfoPrimary()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="403">In method 'EncryptedPackageHandler.CreateTransformInfoPrimary()', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="402">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.CreateTransformInfoPrimary()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateVersionStream()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="368">In method 'EncryptedPackageHandler.CreateVersionStream()', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="367">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.CreateVersionStream()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DecryptAgile(OfficeOpenXml.Encryption.EncryptionInfoAgile,System.String,System.Int64,System.Byte[],System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="558">In method 'EncryptedPackageHandler.DecryptAgile(EncryptionInfoAgile, string, long, byte[], byte[])', call System.IDisposable.Dispose on object 'doc' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="591">'EncryptedPackageHandler.DecryptAgile(EncryptionInfoAgile, string, long, byte[], byte[])' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Dataintegrity" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="591">Correct the spelling of the unrecognized token 'Dataintegrity' in the literal '"Dataintegrity key missmatch"'.</Issue>
            </Message>
            <Message Id="missmatch" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="591">Correct the spelling of the unrecognized token 'missmatch' in the literal '"Dataintegrity key missmatch"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DecryptAgileFromKey(OfficeOpenXml.Encryption.EncryptionInfoAgile+EncryptionKeyEncryptor,System.Byte[],System.Byte[],System.Int64,System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="768">In method 'EncryptedPackageHandler.DecryptAgileFromKey(EncryptionInfoAgile.EncryptionKeyEncryptor, byte[], byte[], long, byte[])', call System.IDisposable.Dispose on object 'dataStream' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DecryptBinary(OfficeOpenXml.Encryption.EncryptionInfoBinary,System.String,System.Int64,System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="646">In method 'EncryptedPackageHandler.DecryptBinary(EncryptionInfoBinary, string, long, byte[])', object 'doc' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'doc' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="667">In method 'EncryptedPackageHandler.DecryptBinary(EncryptionInfoBinary, string, long, byte[])', call System.IDisposable.Dispose on object 'dataStream' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="655">In method 'EncryptedPackageHandler.DecryptBinary(EncryptionInfoBinary, string, long, byte[])', call System.IDisposable.Dispose on object 'decryptKey' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DecryptDocument(System.Byte[],OfficeOpenXml.Encryption.EncryptionInfo,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="541">'encryptionInfo', a parameter, is cast to type 'EncryptionInfoBinary' multiple times in method 'EncryptedPackageHandler.DecryptDocument(byte[], EncryptionInfo, string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DecryptPackage(System.IO.FileInfo,OfficeOpenXml.ExcelEncryption)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="66">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DecryptPackage(System.IO.MemoryStream,OfficeOpenXml.ExcelEncryption)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="92">'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="92">'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="92">'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="92">'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, string)'</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="110">'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncryptAgileFromKey(OfficeOpenXml.Encryption.EncryptionInfoAgile+EncryptionKeyEncryptor,System.Byte[],System.Byte[],System.Int64,System.Int64,System.Byte[],System.IO.MemoryStream)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="cryptoSize" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="814">'EncryptedPackageHandler.EncryptAgileFromKey(EncryptionInfoAgile.EncryptionKeyEncryptor, byte[], byte[], long, long, byte[], MemoryStream)' declares a variable, 'cryptoSize', of type 'long', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncryptData(System.Byte[],System.Byte[],System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="482">In method 'EncryptedPackageHandler.EncryptData(byte[], byte[], bool)', call System.IDisposable.Dispose on object 'aes' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="489">In method 'EncryptedPackageHandler.EncryptData(byte[], byte[], bool)', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="481">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.EncryptData(byte[], byte[], bool)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncryptDataAgile(System.Byte[],OfficeOpenXml.Encryption.EncryptionInfoAgile,System.Security.Cryptography.HashAlgorithm)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="230">In method 'EncryptedPackageHandler.EncryptDataAgile(byte[], EncryptionInfoAgile, HashAlgorithm)', call System.IDisposable.Dispose on object 'aes' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="239">In method 'EncryptedPackageHandler.EncryptDataAgile(byte[], EncryptionInfoAgile, HashAlgorithm)', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncryptPackageAgile(System.Byte[],OfficeOpenXml.ExcelEncryption)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="221">In method 'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)', object 'ms' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="190">In method 'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="194">In method 'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="198">In method 'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="206">In method 'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncryptPackageBinary(System.Byte[],OfficeOpenXml.ExcelEncryption)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="324">In method 'EncryptedPackageHandler.EncryptPackageBinary(byte[], ExcelEncryption)', object 'ret' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'ret' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="319">In method 'EncryptedPackageHandler.EncryptPackageBinary(byte[], ExcelEncryption)', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FixHashSize(System.Byte[],System.Int32,System.Byte)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="945">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.FixHashSize(byte[], int, byte)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEncryptionAlgorithm(OfficeOpenXml.Encryption.EncryptionInfoAgile+EncryptionKeyEncryptor)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="781">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.GetEncryptionAlgorithm(EncryptionInfoAgile.EncryptionKeyEncryptor)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="794">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'EncryptedPackageHandler.GetEncryptionAlgorithm(EncryptionInfoAgile.EncryptionKeyEncryptor)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFinalHash(System.Security.Cryptography.HashAlgorithm,OfficeOpenXml.Encryption.EncryptionInfoAgile+EncryptionKeyEncryptor,System.Byte[],System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="919">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.GetFinalHash(HashAlgorithm, EncryptionInfoAgile.EncryptionKeyEncryptor, byte[], byte[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="encr" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="919">Parameter 'encr' of 'EncryptedPackageHandler.GetFinalHash(HashAlgorithm, EncryptionInfoAgile.EncryptionKeyEncryptor, byte[], byte[])' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHashProvider(OfficeOpenXml.Encryption.EncryptionInfoAgile+EncryptionKeyEncryptor)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="624">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.GetHashProvider(EncryptionInfoAgile.EncryptionKeyEncryptor)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="hashProvider" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="624">'EncryptedPackageHandler.GetHashProvider(EncryptionInfoAgile.EncryptionKeyEncryptor)' declares a variable, 'hashProvider', of type 'HashAlgorithm', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="641">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'EncryptedPackageHandler.GetHashProvider(EncryptionInfoAgile.EncryptionKeyEncryptor)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHmacProvider(OfficeOpenXml.Encryption.EncryptionInfoAgile+EncryptionKeyEncryptor,System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="275">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.GetHmacProvider(EncryptionInfoAgile.EncryptionKeyEncryptor, byte[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="291">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'EncryptedPackageHandler.GetHmacProvider(EncryptionInfoAgile.EncryptionKeyEncryptor, byte[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPasswordHashAgile(System.String,OfficeOpenXml.Encryption.EncryptionInfoAgile+EncryptionKeyEncryptor,System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="903">'EncryptedPackageHandler.GetPasswordHashAgile(string, EncryptionInfoAgile.EncryptionKeyEncryptor, byte[])' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="914">'EncryptedPackageHandler.GetPasswordHashAgile(string, EncryptionInfoAgile.EncryptionKeyEncryptor, byte[])' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="encryptionkey" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="914">Correct the spelling of the unrecognized token 'encryptionkey' in the literal '"An error occured when the encryptionkey was created"'.</Issue>
            </Message>
            <Message Id="occured" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="914">Correct the spelling of the unrecognized token 'occured' in the literal '"An error occured when the encryptionkey was created"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPasswordHashBinary(System.String,OfficeOpenXml.Encryption.EncryptionInfoBinary)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="841">In method 'EncryptedPackageHandler.GetPasswordHashBinary(string, EncryptionInfoBinary)', call System.IDisposable.Dispose on object 'hashProvider' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="891">'EncryptedPackageHandler.GetPasswordHashBinary(string, EncryptionInfoBinary)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="AlgIDHash" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="849">Correct the spelling of the unrecognized token 'AlgIDHash' in the literal '"Hash provider is invalid. Must be SHA1(AlgIDHash == 0x8004)"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="845">Correct the spelling of the unrecognized token 'AlgIDHash' in the literal '"RC4 Hash provider is not supported. Must be SHA1(AlgIDHash == 0x8004)"'.</Issue>
            </Message>
            <Message Id="encryptionkey" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="891">Correct the spelling of the unrecognized token 'encryptionkey' in the literal '"An error occured when the encryptionkey was created"'.</Issue>
            </Message>
            <Message Id="occured" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="891">Correct the spelling of the unrecognized token 'occured' in the literal '"An error occured when the encryptionkey was created"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStreamFromPackage(OfficeOpenXml.Utils.CompoundDocument,OfficeOpenXml.ExcelEncryption)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="511">In method 'EncryptedPackageHandler.GetStreamFromPackage(CompoundDocument, ExcelEncryption)', call System.IDisposable.Dispose on object 'ret' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="EncryptedPackage" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="521">Correct the spelling of the unrecognized token 'EncryptedPackage' in the literal '"Invalid document. EncryptionInfo or EncryptedPackage stream is missing"'.</Issue>
            </Message>
            <Message Id="EncryptionInfo" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="521">Correct the spelling of the unrecognized token 'EncryptionInfo' in the literal '"Invalid document. EncryptionInfo or EncryptedPackage stream is missing"'.</Issue>
            </Message>
            <Message Id="ret" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="511">'EncryptedPackageHandler.GetStreamFromPackage(CompoundDocument, ExcelEncryption)' declares a variable, 'ret', of type 'MemoryStream', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsPasswordValid(System.Byte[],OfficeOpenXml.Encryption.EncryptionInfoBinary)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="703">In method 'EncryptedPackageHandler.IsPasswordValid(byte[], EncryptionInfoBinary)', call System.IDisposable.Dispose on object 'dataStream' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="710">In method 'EncryptedPackageHandler.IsPasswordValid(byte[], EncryptionInfoBinary)', call System.IDisposable.Dispose on object 'dataStream' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="692">In method 'EncryptedPackageHandler.IsPasswordValid(byte[], EncryptionInfoBinary)', call System.IDisposable.Dispose on object 'decryptKey' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="721">In method 'EncryptedPackageHandler.IsPasswordValid(byte[], EncryptionInfoBinary)', call System.IDisposable.Dispose on object 'sha' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="691">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.IsPasswordValid(byte[], EncryptionInfoBinary)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsPasswordValid(System.Security.Cryptography.HashAlgorithm,OfficeOpenXml.Encryption.EncryptionInfoAgile+EncryptionKeyEncryptor)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="741">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptedPackageHandler.IsPasswordValid(HashAlgorithm, EncryptionInfoAgile.EncryptionKeyEncryptor)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetHMAC(OfficeOpenXml.Encryption.EncryptionInfoAgile,System.Security.Cryptography.HashAlgorithm,System.Byte[],System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="261">In method 'EncryptedPackageHandler.SetHMAC(EncryptionInfoAgile, HashAlgorithm, byte[], byte[])', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHandler.cs" Line="268">In method 'EncryptedPackageHandler.SetHMAC(EncryptionInfoAgile, HashAlgorithm, byte[], byte[])', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EncryptionHeader" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#WriteBinary()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionHeader.cs" Line="84">In method 'EncryptionHeader.WriteBinary()', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EncryptionInfoAgile+EncryptionKeyData" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#BlockSize" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_BlockSize(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionInfo.cs" Line="333">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'EncryptionInfoAgile.EncryptionKeyData.BlockSize.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetCipherAlgorithm(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionInfo.cs" Line="272">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptionInfoAgile.EncryptionKeyData.GetCipherAlgorithm(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCipherAlgorithmString(OfficeOpenXml.Encryption.eCipherAlgorithm)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionInfo.cs" Line="292">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptionInfoAgile.EncryptionKeyData.GetCipherAlgorithmString(eCipherAlgorithm)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHashAlgorithm(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionInfo.cs" Line="205">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptionInfoAgile.EncryptionKeyData.GetHashAlgorithm(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHashAlgorithmString(OfficeOpenXml.Encryption.eHashAlogorithm)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionInfo.cs" Line="227">The 'this' parameter (or 'Me' in Visual Basic) of 'EncryptionInfoAgile.EncryptionKeyData.GetHashAlgorithmString(eHashAlogorithm)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HashSize" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_HashSize(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionInfo.cs" Line="311">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'EncryptionInfoAgile.EncryptionKeyData.HashSize.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#KeyBits" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_KeyBits(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionInfo.cs" Line="322">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'EncryptionInfoAgile.EncryptionKeyData.KeyBits.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SaltSize" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_SaltSize(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionInfo.cs" Line="344">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'EncryptionInfoAgile.EncryptionKeyData.SaltSize.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="EncryptionInfoAgile+EncryptionKeyEncryptor" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#SpinCount" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_SpinCount(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionInfo.cs" Line="455">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'EncryptionInfoAgile.EncryptionKeyEncryptor.SpinCount.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="EncryptionInfoBinary" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#WriteBinary()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionInfo.cs" Line="568">In method 'EncryptionInfoBinary.WriteBinary()', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EncryptionVerifier" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#WriteBinary()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Encryption" File="EncryptionVerifier.cs" Line="51">In method 'EncryptionVerifier.WriteBinary()', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing">
       <Types>
        <Type Name="DependencyChainFactory" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#FollowChain(OfficeOpenXml.FormulaParsing.DependencyChain,OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer,OfficeOpenXml.ExcelWorkbook,OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.FormulaParsing.FormulaCell,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\DependencyChain" File="DependenyChainFactory.cs" Line="177">'DependencyChainFactory.FollowChain(DependencyChain, ILexer, ExcelWorkbook, ExcelWorksheet, FormulaCell, ExcelCalculationOption)' has a cyclomatic complexity of 37. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\DependencyChain" File="DependenyChainFactory.cs" Line="193">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'DependencyChainFactory.FollowChain(DependencyChain, ILexer, ExcelWorkbook, ExcelWorksheet, FormulaCell, ExcelCalculationOption)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\DependencyChain" File="DependenyChainFactory.cs" Line="289">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'DependencyChainFactory.FollowChain(DependencyChain, ILexer, ExcelWorkbook, ExcelWorksheet, FormulaCell, ExcelCalculationOption)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\DependencyChain" File="DependenyChainFactory.cs" Line="343">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'DependencyChainFactory.FollowChain(DependencyChain, ILexer, ExcelWorkbook, ExcelWorksheet, FormulaCell, ExcelCalculationOption)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\DependencyChain" File="DependenyChainFactory.cs" Line="311">Replace the call to 'string.operator ==(string, string)' in 'DependencyChainFactory.FollowChain(DependencyChain, ILexer, ExcelWorkbook, ExcelWorksheet, FormulaCell, ExcelCalculationOption)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetChain(OfficeOpenXml.FormulaParsing.DependencyChain,OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer,OfficeOpenXml.ExcelRangeBase,OfficeOpenXml.FormulaParsing.ExcelCalculationOption)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\DependencyChain" File="DependenyChainFactory.cs" Line="141">In method 'DependencyChainFactory.GetChain(DependencyChain, ILexer, ExcelRangeBase, ExcelCalculationOption)', call System.IDisposable.Dispose on object 'fs' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\DependencyChain" File="DependenyChainFactory.cs" Line="144">Replace the call to 'string.operator ==(string, string)' in 'DependencyChainFactory.GetChain(DependencyChain, ILexer, ExcelRangeBase, ExcelCalculationOption)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EpplusExcelDataProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Epplus" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Epplus' in type name 'EpplusExcelDataProvider'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#_rangeAddressFactory" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'EpplusExcelDataProvider._rangeAddressFactory' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusExcelDataProvider.cs" Line="406">Change 'EpplusExcelDataProvider.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusExcelDataProvider.cs" Line="406">Modify 'EpplusExcelDataProvider.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusExcelDataProvider.cs" Line="406">Ensure that 'EpplusExcelDataProvider.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRange(System.String,System.Int32,System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusExcelDataProvider.cs" Line="266">In member 'EpplusExcelDataProvider.GetRange(string, int, int, string)', change parameter name 'worksheet' to 'worksheetName' in order to match the identifier as it has been declared in 'ExcelDataProvider.GetRange(string, int, int, string)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRangeFormulaTokens(System.String,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusExcelDataProvider.cs" Line="450">Change 'List&lt;Token&gt;' in 'EpplusExcelDataProvider.GetRangeFormulaTokens(string, int, int)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRangeValues(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusExcelDataProvider.cs" Line="344">In method 'EpplusExcelDataProvider.GetRangeValues(string)', call System.IDisposable.Dispose on object 'new CellsStoreEnumerator&lt;object&gt;(ws._values, addr._fromRow, addr._fromCol, addr._toRow, addr._toCol)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EpplusExcelDataProvider+CellInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'EpplusExcelDataProvider.CellInfo'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="EpplusExcelDataProvider+NameInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'EpplusExcelDataProvider.NameInfo'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="EpplusExcelDataProvider+RangeInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'EpplusExcelDataProvider.RangeInfo' to end in 'Collection'.</Issue>
          </Message>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'EpplusExcelDataProvider.RangeInfo' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ws" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusExcelDataProvider.cs" Line="19">In method 'EpplusExcelDataProvider.RangeInfo.RangeInfo(ExcelWorksheet, int, int, int, int)', correct the spelling of 'ws' in parameter name 'ws' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusExcelDataProvider.cs" Line="33">In externally visible method 'EpplusExcelDataProvider.RangeInfo.RangeInfo(ExcelWorksheet, int, int, int, int)', validate parameter 'ws' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusExcelDataProvider.cs" Line="93">Change 'EpplusExcelDataProvider.RangeInfo.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message Id="_values" TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusExcelDataProvider.cs" Line="93">'EpplusExcelDataProvider.RangeInfo' contains field 'EpplusExcelDataProvider.RangeInfo._values' that is of IDisposable type: 'CellsStoreEnumerator&lt;object&gt;'. Change the Dispose method on 'EpplusExcelDataProvider.RangeInfo' to call Dispose or Close on this field.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusExcelDataProvider.cs" Line="93">Modify 'EpplusExcelDataProvider.RangeInfo.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EpplusNameValueProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Epplus" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Epplus' in type name 'EpplusNameValueProvider'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.FormulaParsing.ExcelDataProvider)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="EpplusNameValueProvider.cs" Line="17">In externally visible method 'EpplusNameValueProvider.EpplusNameValueProvider(ExcelDataProvider)', validate parameter 'excelDataProvider' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelCalculationOption" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AllowCirculareReferences" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Circulare" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelCalculationOption.cs" Line="14">Correct the spelling of 'Circulare' in member name 'ExcelCalculationOption.AllowCirculareReferences' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelCell" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Object,System.String,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ExcelCell.cs" Line="10">In method 'ExcelCell.ExcelCell(object, string, int, int)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDataProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error">Modify 'ExcelDataProvider.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
             <Issue Name="DisposeSignature" Certainty="95" Level="Error">Ensure that 'ExcelDataProvider.Dispose()' is declared as public and sealed.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRangeFormulaTokens(System.String,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;Token&gt;' in 'ExcelDataProvider.GetRangeFormulaTokens(string, int, int)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWorkbookNameValues()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'ExcelDataProvider.GetWorkbookNameValues()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWorksheetNames()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'ExcelDataProvider.GetWorksheetNames()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDataProvider+ICellInfo" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelDataProvider.ICellInfo'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelDataProvider+INameInfo" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'ExcelDataProvider.INameInfo'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelDataProvider+IRangeInfo" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ExcelDataProvider.IRangeInfo' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetNCells()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'ExcelDataProvider.IRangeInfo.GetNCells()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsMulti" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Multi" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Multi' in member name 'ExcelDataProvider.IRangeInfo.IsMulti' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FormulaParser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.FormulaParsing.ExcelDataProvider,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="FormulaParser.cs" Line="61">In externally visible method 'FormulaParser.FormulaParser(ExcelDataProvider, ParsingContext)', validate parameter 'parsingContext' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Configure(System.Action`1&lt;OfficeOpenXml.FormulaParsing.ParsingConfiguration&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="FormulaParser.cs" Line="80">In externally visible method 'FormulaParser.Configure(Action&lt;ParsingConfiguration&gt;)', validate parameter 'configMethod' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Lexer" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lexer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="FormulaParser.cs" Line="90">Correct the spelling of 'Lexer' in member name 'FormulaParser.Lexer' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FormulaParserManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddOrReplaceFunction(System.String,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Impl" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="FormulaParserManager.cs" Line="73">In method 'FormulaParserManager.AddOrReplaceFunction(string, ExcelFunction)', correct the spelling of 'Impl' in parameter name 'functionImpl' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetImplementedFunctionNames()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="FormulaParserManager.cs" Line="83">Change 'FormulaParserManager.GetImplementedFunctionNames()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IParsingLifetimeEventHandler" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'IParsingLifetimeEventHandler' so that it does not end in 'EventHandler'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ParsedValue" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Object,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ParsedValue.cs" Line="10">In method 'ParsedValue.ParsedValue(object, int, int)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ParsingConfiguration" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Lexer" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lexer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ParsingConfiguration.cs" Line="14">Correct the spelling of 'Lexer' in member name 'ParsingConfiguration.Lexer' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetExpresionCompiler(OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Expresion" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ParsingConfiguration.cs" Line="53">Correct the spelling of 'Expresion' in member name 'ParsingConfiguration.SetExpresionCompiler(IExpressionCompiler)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetLexer(OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lexer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ParsingConfiguration.cs" Line="41">Correct the spelling of 'Lexer' in member name 'ParsingConfiguration.SetLexer(ILexer)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="lexer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ParsingConfiguration.cs" Line="41">In method 'ParsingConfiguration.SetLexer(ILexer)', correct the spelling of 'lexer' in parameter name 'lexer' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ParsingContext" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OfficeOpenXml.FormulaParsing.IParsingLifetimeEventHandler.ParsingCompleted()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ParsingContext.cs" Line="63">Make 'ParsingContext' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IParsingLifetimeEventHandler.ParsingCompleted()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ParsingScope" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="ProvideDisposeBool" Certainty="95" Level="Error">Provide an overridable implementation of Dispose(bool) on 'ParsingScope' or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="NotCalled" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ParsingScope.cs" Line="50">Change 'ParsingScope.Dispose()' to call 'GC.SuppressFinalize(object)'. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Issue>
            </Message>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ParsingScope.cs" Line="50">Modify 'ParsingScope.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ParsingScopes" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#NewScope(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ParsingScopes.cs" Line="33">In method 'ParsingScopes.NewScope(RangeAddress)', object 'scope' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'scope' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing" File="ParsingScopes.cs" Line="37">In method 'ParsingScopes.NewScope(RangeAddress)', object 'scope' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'scope' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Excel">
       <Types>
        <Type Name="ExcelCellState" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If enumeration name 'ExcelCellState' is singular, change it to a plural form.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Excel.Functions">
       <Types>
        <Type Name="ArgumentCollectionUtil" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Util" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Util' in type name 'ArgumentCollectionUtil'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CalculateCollection(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,System.Double,System.Func`3&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,System.Double,System.Double&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ArgumentCollectionUtil.cs" Line="71">In externally visible method 'ArgumentCollectionUtil.CalculateCollection(IEnumerable&lt;FunctionArgument&gt;, double, Func&lt;FunctionArgument, double, double&gt;)', validate parameter 'collection' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ArgumentCollectionUtil.cs" Line="79">In externally visible method 'ArgumentCollectionUtil.CalculateCollection(IEnumerable&lt;FunctionArgument&gt;, double, Func&lt;FunctionArgument, double, double&gt;)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ArgumentParser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Parse(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'ArgumentParser.Parse(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BoolArgumentParser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Parse(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="BoolArgumentParser.cs" Line="39">'obj', a parameter, is cast to type 'ExcelDataProvider.IRangeInfo' multiple times in method 'BoolArgumentParser.Parse(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="System.Convert.ToBoolean(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="BoolArgumentParser.cs" Line="44">Because the behavior of 'Convert.ToBoolean(object)' could vary based on the current user's locale settings, replace this call in 'BoolArgumentParser.Parse(object)' with a call to 'Convert.ToBoolean(object, IFormatProvider)'. If the result of 'Convert.ToBoolean(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BuiltInFunctions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="90" Level="Error">'BuiltInFunctions' is coupled with 111 different types from 9 different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above 95 indicates poor maintainability, a class coupling between 95 and 80 indicates moderate maintainability, and a class coupling below 80 indicates good maintainability.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Method" Certainty="90" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="BuiltInFunctions.cs" Line="41">'BuiltInFunctions.BuiltInFunctions()' is coupled with 111 different types from 9 different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above 40 indicates poor maintainability, a class coupling between 40 and 30 indicates moderate maintainability, and a class coupling below 30 indicates good maintainability.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CellStateHelper" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#IsSubTotal(OfficeOpenXml.FormulaParsing.ExcelDataProvider+ICellInfo)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Equals(System.String,System.StringComparison)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="StringComparison" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="CellStateHelper.cs" Line="37">'CellStateHelper.IsSubTotal(ExcelDataProvider.ICellInfo)' passes 'StringComparison.InvariantCultureIgnoreCase' as the 'StringComparison' parameter to 'string.Equals(string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShouldIgnore(System.Boolean,OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="CellStateHelper.cs" Line="48">Parameter 'context' of 'CellStateHelper.ShouldIgnore(bool, FunctionArgument, ParsingContext)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CollectionFlattener`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FuncArgsToFlatEnumerable(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,System.Action`2&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,System.Collections.Generic.IList`1&lt;!0&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="CollectionFlattener.cs" Line="35">Consider a design where 'CollectionFlattener&lt;T&gt;.FuncArgsToFlatEnumerable(IEnumerable&lt;FunctionArgument&gt;, Action&lt;FunctionArgument, IList&lt;T&gt;&gt;)' doesn't nest generic type 'Action&lt;FunctionArgument, IList&lt;T&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CompileResultValidator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Validate(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'CompileResultValidator.Validate(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DoubleArgumentParser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Parse(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="DoubleArgumentParser.cs" Line="43">'obj', a parameter, is cast to type 'ExcelDataProvider.IRangeInfo' multiple times in method 'DoubleArgumentParser.Parse(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="e" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="DoubleArgumentParser.cs" Line="53">'DoubleArgumentParser.Parse(object)' declares a variable, 'e', of type 'Exception', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DoubleEnumerableArgConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ConvertArgsIncludingOtherTypes(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="DoubleEnumerableArgConverter.cs" Line="79">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'DoubleEnumerableArgConverter.ConvertArgsIncludingOtherTypes(IEnumerable&lt;FunctionArgument&gt;)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelFunction" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'ExcelFunction' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.FormulaParsing.Excel.Functions.ArgumentCollectionUtil,OfficeOpenXml.FormulaParsing.Excel.Functions.ArgumentParsers,OfficeOpenXml.FormulaParsing.Excel.Functions.CompileResultValidators)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Util" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="49">In method 'ExcelFunction.ExcelFunction(ArgumentCollectionUtil, ArgumentParsers, CompileResultValidators)', correct the spelling of 'Util' in parameter name 'argumentCollectionUtil' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AreEqual(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="317">In method 'ExcelFunction.AreEqual(double, double)', correct the spelling of 'd' in parameter name 'd1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="317">In method 'ExcelFunction.AreEqual(double, double)', correct the spelling of 'd' in parameter name 'd2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="317">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFunction.AreEqual(double, double)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ArgToBool(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="bool" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="244">Consider replacing the language-specific data type identifier 'Bool' in member name 'ExcelFunction.ArgToBool(IEnumerable&lt;FunctionArgument&gt;, int)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ArgToDecimal(System.Object)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="212">In member 'ExcelFunction.ArgToDecimal(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ArgToInt(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="int" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="LanguageSpecificMember" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="186">Consider replacing the language-specific data type identifier 'Int' in member name 'ExcelFunction.ArgToInt(IEnumerable&lt;FunctionArgument&gt;, int)' with either a language-independent equivalent or a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ArgToString(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="199">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFunction.ArgToString(IEnumerable&lt;FunctionArgument&gt;, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="404">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFunction.CheckForAndHandleExcelError(FunctionArgument)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="405">In externally visible method 'ExcelFunction.CheckForAndHandleExcelError(FunctionArgument)', validate parameter 'arg' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.ExcelDataProvider+ICellInfo)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="417">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFunction.CheckForAndHandleExcelError(ExcelDataProvider.ICellInfo)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="418">In externally visible method 'ExcelFunction.CheckForAndHandleExcelError(ExcelDataProvider.ICellInfo)', validate parameter 'cell' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFirstValue(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="99">In method 'ExcelFunction.GetFirstValue(IEnumerable&lt;FunctionArgument&gt;)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="99">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFunction.GetFirstValue(IEnumerable&lt;FunctionArgument&gt;)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsLookupFuction" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fuction" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="80">Correct the spelling of 'Fuction' in member name 'ExcelFunction.IsLookupFuction' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNumeric(System.Object)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="299">In method 'ExcelFunction.IsNumeric(object)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="299">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFunction.IsNumeric(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNumericString(System.Object)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="230">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFunction.IsNumericString(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThrowArgumentExceptionIf(System.Func`1&lt;System.Boolean&gt;,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="256">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFunction.ThrowArgumentExceptionIf(Func&lt;bool&gt;, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="257">In externally visible method 'ExcelFunction.ThrowArgumentExceptionIf(Func&lt;bool&gt;, string)', validate parameter 'condition' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThrowArgumentExceptionIf(System.Func`1&lt;System.Boolean&gt;,System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="271">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ExcelFunction.ThrowArgumentExceptionIf(Func&lt;bool&gt;, string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThrowExcelErrorValueException(OfficeOpenXml.eErrorType)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="280">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFunction.ThrowExcelErrorValueException(eErrorType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ThrowExcelErrorValueExceptionIf(System.Func`1&lt;System.Boolean&gt;,OfficeOpenXml.eErrorType)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="291">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFunction.ThrowExcelErrorValueExceptionIf(Func&lt;bool&gt;, eErrorType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="292">In externally visible method 'ExcelFunction.ThrowExcelErrorValueExceptionIf(Func&lt;bool&gt;, eErrorType)', validate parameter 'condition' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateArguments(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func&lt;System.Boolean&gt;,System.String,System.Object[])" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="157">Method 'ExcelFunction.ValidateArguments(IEnumerable&lt;FunctionArgument&gt;, int)' passes a literal string as parameter 'message' of a call to 'ExcelFunction.ThrowArgumentExceptionIf(Func&lt;bool&gt;, string, params object[])'. Retrieve the following string(s) from a resource table instead: "Expecting at least {0} arguments".</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="ExcelFunction.cs" Line="157">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelFunction.ValidateArguments(IEnumerable&lt;FunctionArgument&gt;, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FunctionArgument" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionArgument.cs" Line="34">In method 'FunctionArgument.FunctionArgument(object)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExcelStateFlagIsSet(OfficeOpenXml.FormulaParsing.Excel.ExcelCellState)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionArgument.cs" Line="47">Replace the term 'Flag' in member name 'FunctionArgument.ExcelStateFlagIsSet(ExcelCellState)' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetExcelStateFlag(OfficeOpenXml.FormulaParsing.Excel.ExcelCellState)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Flag" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionArgument.cs" Line="42">Replace the term 'Flag' in member name 'FunctionArgument.SetExcelStateFlag(ExcelCellState)' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionArgument.cs" Line="55">The property name 'FunctionArgument.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FunctionRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddOrReplaceFunction(System.String,OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Impl" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionRepository.cs" Line="109">In method 'FunctionRepository.AddOrReplaceFunction(string, ExcelFunction)', correct the spelling of 'Impl' in parameter name 'functionImpl' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionRepository.cs" Line="112">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FunctionRepository.AddOrReplaceFunction(string, ExcelFunction)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionRepository.cs" Line="112">In externally visible method 'FunctionRepository.AddOrReplaceFunction(string, ExcelFunction)', validate parameter 'functionName' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFunction(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionRepository.cs" Line="69">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FunctionRepository.GetFunction(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionRepository.cs" Line="74">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FunctionRepository.GetFunction(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionRepository.cs" Line="69">In externally visible method 'FunctionRepository.GetFunction(string)', validate parameter 'name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsFunctionName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionRepository.cs" Line="92">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FunctionRepository.IsFunctionName(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionRepository.cs" Line="92">In externally visible method 'FunctionRepository.IsFunctionName(string)', validate parameter 'name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadModule(OfficeOpenXml.FormulaParsing.Excel.Functions.IFunctionModule)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Module" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionRepository.cs" Line="59">In virtual/interface member 'FunctionRepository.LoadModule(IFunctionModule)', rename parameter 'module' so that it no longer conflicts with the reserved language keyword 'Module'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionRepository.cs" Line="62">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'FunctionRepository.LoadModule(IFunctionModule)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="FunctionRepository.cs" Line="60">In externally visible method 'FunctionRepository.LoadModule(IFunctionModule)', validate parameter 'module' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HiddenValuesHandlingFunction" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ShouldIgnore(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="HiddenValuesHandlingFunction.cs" Line="72">In externally visible method 'HiddenValuesHandlingFunction.ShouldIgnore(FunctionArgument)', validate parameter 'arg' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShouldIgnore(OfficeOpenXml.FormulaParsing.ExcelDataProvider+ICellInfo,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="HiddenValuesHandlingFunction.cs" Line="67">In method 'HiddenValuesHandlingFunction.ShouldIgnore(ExcelDataProvider.ICellInfo, ParsingContext)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IntArgumentParser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Parse(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="IntArgumentParser.cs" Line="42">'obj', a parameter, is cast to type 'ExcelDataProvider.IRangeInfo' multiple times in method 'IntArgumentParser.Parse(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt32(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="IntArgumentParser.cs" Line="52">Because the behavior of 'Convert.ToInt32(object)' could vary based on the current user's locale settings, replace this call in 'IntArgumentParser.Parse(object)' with a call to 'Convert.ToInt32(object, IFormatProvider)'. If the result of 'Convert.ToInt32(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions" File="IntArgumentParser.cs" Line="45">In externally visible method 'IntArgumentParser.Parse(object)', validate parameter 'obj' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Excel.Functions.DateTime">
       <Types>
        <Type Name="Date" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Date" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'Date' so that it no longer conflicts with the reserved language keyword 'Date'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Day" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.DateTime.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Day.cs" Line="46">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Day.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Days360" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetNumWholeMonths(System.DateTime,System.DateTime)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Days360.cs" Line="75">'Days360.GetNumWholeMonths(DateTime, DateTime)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Days360.cs" Line="75">The 'this' parameter (or 'Me' in Visual Basic) of 'Days360.GetNumWholeMonths(DateTime, DateTime)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Edate" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Edate" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Edate' in type name 'Edate'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Eomonth" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Eomonth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Eomonth' in type name 'Eomonth'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IsoWeekNum" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Iso" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Iso' in type name 'IsoWeekNum'.</Issue>
          </Message>
          <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Num' in type name 'IsoWeekNum'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Month" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.DateTime.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Month.cs" Line="46">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Month.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Time" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction.ThrowArgumentExceptionIf(System.Func&lt;System.Boolean&gt;,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Time.cs" Line="57">Method 'Time.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' passes a literal string as parameter 'message' of a call to 'ExcelFunction.ThrowArgumentExceptionIf(Func&lt;bool&gt;, string)'. Retrieve the following string(s) from a resource table instead: "Invalid hour: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Time.cs" Line="56">Method 'Time.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' passes a literal string as parameter 'message' of a call to 'ExcelFunction.ThrowArgumentExceptionIf(Func&lt;bool&gt;, string)'. Retrieve the following string(s) from a resource table instead: "Invalid minute: ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Time.cs" Line="55">Method 'Time.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' passes a literal string as parameter 'message' of a call to 'ExcelFunction.ThrowArgumentExceptionIf(Func&lt;bool&gt;, string)'. Retrieve the following string(s) from a resource table instead: "Invalid second: ".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TimeBaseFunction" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'TimeBaseFunction' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#SecondsInADay" Kind="Property" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="TimeBaseFunction.cs" Line="60">The 'this' parameter (or 'Me' in Visual Basic) of 'TimeBaseFunction.SecondsInADay' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TimeStringParser" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetSerialNumber(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="TimeStringParser.cs" Line="39">The 'this' parameter (or 'Me' in Visual Basic) of 'TimeStringParser.GetSerialNumber(int, int, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValuesFromString(System.String,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="TimeStringParser.cs" Line="115">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TimeStringParser.GetValuesFromString(string, out int, out int, out int)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="TimeStringParser.cs" Line="118">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TimeStringParser.GetValuesFromString(string, out int, out int, out int)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="TimeStringParser.cs" Line="124">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'TimeStringParser.GetValuesFromString(string, out int, out int, out int)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateValues(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="TimeStringParser.cs" Line="45">The 'this' parameter (or 'Me' in Visual Basic) of 'TimeStringParser.ValidateValues(int, int, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="hour" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="TimeStringParser.cs" Line="45">Parameter 'hour' of 'TimeStringParser.ValidateValues(int, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Weekday" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CalculateDayOfWeek(System.DateTime,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Weekday.cs" Line="49">The 'this' parameter (or 'Me' in Visual Basic) of 'Weekday.CalculateDayOfWeek(DateTime, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Weeknum" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Weeknum" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Weeknum' in type name 'Weeknum'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CurrentInfo" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Weeknum.cs" Line="53">Correct the spelling of the unrecognized token 'CurrentInfo' in the literal '"Could not execute Weeknum function because DateTimeFormatInfo.CurrentInfo was nu..."'.</Issue>
            </Message>
            <Message Id="DateTimeFormatInfo" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Weeknum.cs" Line="53">Correct the spelling of the unrecognized token 'DateTimeFormatInfo' in the literal '"Could not execute Weeknum function because DateTimeFormatInfo.CurrentInfo was nu..."'.</Issue>
            </Message>
            <Message Id="Weeknum" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Weeknum.cs" Line="53">Correct the spelling of the unrecognized token 'Weeknum' in the literal '"Could not execute Weeknum function because DateTimeFormatInfo.CurrentInfo was nu..."'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Workday" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#IsHoliday(System.DateTime)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Workday.cs" Line="84">The 'this' parameter (or 'Me' in Visual Basic) of 'Workday.IsHoliday(DateTime)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Year" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.DateTime.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Year.cs" Line="46">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Year.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Yearfrac" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Yearfrac" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Yearfrac' in type name 'Yearfrac'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CalculateAcutalYear(System.DateTime,System.DateTime)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Yearfrac.cs" Line="67">The 'this' parameter (or 'Me' in Visual Basic) of 'Yearfrac.CalculateAcutalYear(DateTime, DateTime)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\DateTime" File="Yearfrac.cs" Line="37">In externally visible method 'Yearfrac.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Excel.Functions.Information">
       <Types>
        <Type Name="IsBlank" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Information" File="IsBlank.cs" Line="54">Replace the call to 'string.operator !=(string, string)' in 'IsBlank.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IsErr" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Information" File="IsErr.cs" Line="20">'arg', a variable, is cast to type 'ExcelDataProvider.IRangeInfo' multiple times in method 'IsErr.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Information" File="IsErr.cs" Line="29">'arg', a variable, is cast to type 'ExcelErrorValue' multiple times in method 'IsErr.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IsNa" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Information" File="IsNa.cs" Line="20">'v', a variable, is cast to type 'ExcelErrorValue' multiple times in method 'IsNa.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="N" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="N" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than type name 'N'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Excel.Functions.Logical">
       <Types>
        <Type Name="And" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="And" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'And' so that it no longer conflicts with the reserved language keyword 'And'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="False" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="False" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'False' so that it no longer conflicts with the reserved language keyword 'False'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="If" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="If" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'If' so that it no longer conflicts with the reserved language keyword 'If'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Not" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Not" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'Not' so that it no longer conflicts with the reserved language keyword 'Not'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Or" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Or" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'Or' so that it no longer conflicts with the reserved language keyword 'Or'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="True" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="True" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'True' so that it no longer conflicts with the reserved language keyword 'True'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Excel.Functions.Math">
       <Types>
        <Type Name="Average" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Average.cs" Line="41">In externally visible method 'Average.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'arguments' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AverageA" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="AverageA.cs" Line="41">In externally visible method 'AverageA.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'arguments' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AverageIf" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.FormulaParsing.ExcelUtilities.NumericExpressionEvaluator,OfficeOpenXml.FormulaParsing.ExcelUtilities.WildCardValueMatcher)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="wildCard" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="AverageIf.cs" Line="49">In member 'AverageIf.AverageIf(NumericExpressionEvaluator, WildCardValueMatcher)', the compound word 'wildCard' in parameter name 'wildCardValueMatcher' exists as a discrete term. If your usage is intended to be single word, case it as 'wildcard' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Calculate(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="AverageIf.cs" Line="136">'AverageIf.Calculate(FunctionArgument, string)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Ceiling" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ValidateNumberAndSign(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="num" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Ceiling.cs" Line="64">Correct the spelling of the unrecognized token 'num' in the literal '"num: "'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Ceiling.cs" Line="60">The 'this' parameter (or 'Me' in Visual Basic) of 'Ceiling.ValidateNumberAndSign(double, double)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Ceiling.cs" Line="63">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'Ceiling.ValidateNumberAndSign(double, double)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Cosh" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Cosh" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Cosh' in type name 'Cosh'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Count" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Count.cs" Line="87">The 'this' parameter (or 'Me' in Visual Basic) of 'Count._CheckForAndHandleExcelError(FunctionArgument, ParsingContext)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="arg" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Count.cs" Line="87">Parameter 'arg' of 'Count._CheckForAndHandleExcelError(FunctionArgument, ParsingContext)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Count.cs" Line="87">Parameter 'context' of 'Count._CheckForAndHandleExcelError(FunctionArgument, ParsingContext)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_CheckForAndHandleExcelError(OfficeOpenXml.FormulaParsing.ExcelDataProvider+ICellInfo,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Count.cs" Line="95">The 'this' parameter (or 'Me' in Visual Basic) of 'Count._CheckForAndHandleExcelError(ExcelDataProvider.ICellInfo, ParsingContext)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="cell" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Count.cs" Line="95">Parameter 'cell' of 'Count._CheckForAndHandleExcelError(ExcelDataProvider.ICellInfo, ParsingContext)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Count.cs" Line="95">Parameter 'context' of 'Count._CheckForAndHandleExcelError(ExcelDataProvider.ICellInfo, ParsingContext)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CountA" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ShouldCount(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="CountA.cs" Line="92">The 'this' parameter (or 'Me' in Visual Basic) of 'CountA.ShouldCount(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CountIf" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.FormulaParsing.ExcelUtilities.NumericExpressionEvaluator,OfficeOpenXml.FormulaParsing.ExcelUtilities.WildCardValueMatcher)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="wildCard" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="CountIf.cs" Line="24">In member 'CountIf.CountIf(NumericExpressionEvaluator, WildCardValueMatcher)', the compound word 'wildCard' in parameter name 'wildCardValueMatcher' exists as a discrete term. If your usage is intended to be single word, case it as 'wildcard' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Exp" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Exp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Exp' in type name 'Exp'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Floor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ValidateNumberAndSign(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="num" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Floor.cs" Line="72">Correct the spelling of the unrecognized token 'num' in the literal '"num: "'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Floor.cs" Line="68">The 'this' parameter (or 'Me' in Visual Basic) of 'Floor.ValidateNumberAndSign(double, double)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Floor.cs" Line="71">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'Floor.ValidateNumberAndSign(double, double)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Ln" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Ln" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Ln' in type name 'Ln' by changing it to 'LN'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Maxa" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Maxa" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Maxa' in type name 'Maxa'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Mod" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Mod" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'Mod' so that it no longer conflicts with the reserved language keyword 'Mod'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Product" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Product.cs" Line="63">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'Product.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RandBetween" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CalulateDiff(System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="RandBetween.cs" Line="47">The 'this' parameter (or 'Me' in Visual Basic) of 'RandBetween.CalulateDiff(double, double)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Rounddown" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Rounddown" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rounddown' in type name 'Rounddown'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Sinh" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Sinh" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Sinh' in type name 'Sinh'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Sqrt" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Sqrt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Sqrt' in type name 'Sqrt'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SqrtPi" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Sqrt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Sqrt' in type name 'SqrtPi'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Stdev" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Stdev" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Stdev' in type name 'Stdev'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="StdevP" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Stdev" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Stdev' in type name 'StdevP'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Subtotal" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BeforeInvoke(OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Subtotal.cs" Line="78">In externally visible method 'Subtotal.BeforeInvoke(ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Subtotal.cs" Line="85">In externally visible method 'Subtotal.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SumIf" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CalculateSingleRange(OfficeOpenXml.FormulaParsing.ExcelDataProvider+IRangeInfo,System.String,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="SumIf.cs" Line="135">Parameter 'context' of 'SumIf.CalculateSingleRange(ExcelDataProvider.IRangeInfo, string, ParsingContext)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CalculateWithSumRange(OfficeOpenXml.FormulaParsing.ExcelDataProvider+IRangeInfo,System.String,OfficeOpenXml.FormulaParsing.ExcelDataProvider+IRangeInfo,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="SumIf.cs" Line="111">'v', a variable, is cast to type 'ExcelErrorValue' multiple times in method 'SumIf.CalculateWithSumRange(ExcelDataProvider.IRangeInfo, string, ExcelDataProvider.IRangeInfo, ParsingContext)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="SumIf.cs" Line="97">Parameter 'context' of 'SumIf.CalculateWithSumRange(ExcelDataProvider.IRangeInfo, string, ExcelDataProvider.IRangeInfo, ParsingContext)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CalculateWithSumRange(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,System.String,System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="SumIf.cs" Line="81">'SumIf.CalculateWithSumRange(IEnumerable&lt;FunctionArgument&gt;, string, IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SumProduct" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddValue(System.Object,System.Collections.Generic.List`1&lt;System.Double&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="SumProduct.cs" Line="98">'convertVal', a parameter, is cast to type 'ExcelErrorValue' multiple times in method 'SumProduct.AddValue(object, List&lt;double&gt;)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="SumProduct.cs" Line="94">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'SumProduct.AddValue(object, List&lt;double&gt;)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="SumProduct.cs" Line="41">In externally visible method 'SumProduct.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'arguments' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Sumsq" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Sumsq" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Sumsq' in type name 'Sumsq'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Tanh" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Tanh" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Tanh' in type name 'Tanh'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Trunc" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Trunc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Trunc' in type name 'Trunc'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="nDigits" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Trunc.cs" Line="44">'Trunc.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' declares a variable, 'nDigits', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Math" File="Trunc.cs" Line="45">In externally visible method 'Trunc.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Excel.Functions.Numeric">
       <Types>
        <Type Name="CInt" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectPrefix" Category="Microsoft.Naming" CheckId="CA1722" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove the leading 'C' from type name 'CInt'.</Issue>
          </Message>
          <Message Id="CInt" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'CInt' so that it no longer conflicts with the reserved language keyword 'CInt'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#HandleDecimalSeparator(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Numeric" File="CInt.cs" Line="63">The 'this' parameter (or 'Me' in Visual Basic) of 'CInt.HandleDecimalSeparator(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup">
       <Types>
        <Type Name="Address" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Excelformulaparser" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="Address.cs" Line="56">Correct the spelling of the unrecognized token 'Excelformulaparser' in the literal '"Excelformulaparser does not support the R1C1 format!"'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="Address.cs" Line="63">In externally visible method 'Address.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ArrayLookupNavigator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupDirection,OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupArguments,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="ArrayLookupNavigator.cs" Line="20">In externally visible method 'ArrayLookupNavigator.ArrayLookupNavigator(LookupDirection, LookupArguments, ParsingContext)', validate parameter 'arguments' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_currentValue" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ArrayLookupNavigator._currentValue' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Column" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="Column.cs" Line="42">In externally visible method 'Column.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Columns" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="Columns.cs" Line="51">In externally visible method 'Columns.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Hyperlink" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="friendlyName" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="Hyperlink.cs" Line="15">'Hyperlink.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' declares a variable, 'friendlyName', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="link" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="Hyperlink.cs" Line="14">'Hyperlink.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' declares a variable, 'link', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Lookup" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#HaveTwoRanges(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="Lookup.cs" Line="49">The 'this' parameter (or 'Me' in Visual Basic) of 'Lookup.HaveTwoRanges(IEnumerable&lt;FunctionArgument&gt;)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LookupFunction" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'LookupFunction' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetLookupDirection(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="LookupFunction.cs" Line="66">The 'this' parameter (or 'Me' in Visual Basic) of 'LookupFunction.GetLookupDirection(RangeAddress)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="LookupFunction.cs" Line="67">In externally visible method 'LookupFunction.GetLookupDirection(RangeAddress)', validate parameter 'rangeAddress' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsMatch(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="LookupFunction.cs" Line="61">In method 'LookupFunction.IsMatch(object, object)', correct the spelling of 'o' in parameter name 'o1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="LookupFunction.cs" Line="61">In method 'LookupFunction.IsMatch(object, object)', correct the spelling of 'o' in parameter name 'o2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Lookup(OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupNavigator,OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupArguments)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Lookupfunction" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="LookupFunction.cs" Line="79">Correct the spelling of the unrecognized token 'Lookupfunction' in the literal '"Lookupfunction failed to lookup value"'.</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="LookupFunction.cs" Line="115">Correct the spelling of the unrecognized token 'Lookupfunction' in the literal '"Lookupfunction failed to lookup value"'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="LookupFunction.cs" Line="83">In externally visible method 'LookupFunction.Lookup(LookupNavigator, LookupArguments)', validate parameter 'navigator' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="LookupFunction.cs" Line="77">In externally visible method 'LookupFunction.Lookup(LookupNavigator, LookupArguments)', validate parameter 'lookupArgs' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LookupNavigator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'LookupNavigator' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupDirection,OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupArguments,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="LookupNavigator.cs" Line="46">In externally visible method 'LookupNavigator.LookupNavigator(LookupDirection, LookupArguments, ParsingContext)', validate parameter 'parsingContext' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Arguments" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'LookupNavigator.Arguments' or change the field to one that is an immutable reference type. If the reference type 'LookupArguments' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'LookupNavigator.Arguments' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Direction" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'LookupNavigator.Direction' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLookupValue()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'LookupNavigator.GetLookupValue()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParsingContext" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'LookupNavigator.ParsingContext' or change the field to one that is an immutable reference type. If the reference type 'ParsingContext' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'LookupNavigator.ParsingContext' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LookupNavigatorFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Create(OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupDirection,OfficeOpenXml.FormulaParsing.Excel.Functions.RefAndLookup.LookupArguments,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="datatype" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="LookupNavigatorFactory.cs" Line="20">Correct the spelling of the unrecognized token 'datatype' in the literal '"Invalid argument datatype"'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="LookupNavigatorFactory.cs" Line="12">In externally visible method 'LookupNavigatorFactory.Create(LookupDirection, LookupArguments, ParsingContext)', validate parameter 'args' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Match" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="Match.cs" Line="55">In externally visible method 'Match.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Row" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="Row.cs" Line="42">In externally visible method 'Row.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Rows" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\RefAndLookup" File="Rows.cs" Line="51">In externally visible method 'Rows.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Excel.Functions.Text">
       <Types>
        <Type Name="CStr" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Str' in type name 'CStr'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectPrefix" Category="Microsoft.Naming" CheckId="CA1722" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove the leading 'C' from type name 'CStr'.</Issue>
          </Message>
          <Message Id="CStr" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'CStr' so that it no longer conflicts with the reserved language keyword 'CStr'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Exact" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Compare(System.String,System.String,System.StringComparison)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="StringComparison" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Text" File="Exact.cs" Line="50">'Exact.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' passes 'StringComparison.InvariantCulture' as the 'StringComparison' parameter to 'string.Compare(string, string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Lower" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Text" File="Lower.cs" Line="38">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Lower.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Proper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Text" File="Proper.cs" Line="39">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Proper.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Replace" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetFirstPart(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Text" File="Replace.cs" Line="49">The 'this' parameter (or 'Me' in Visual Basic) of 'Replace.GetFirstPart(string, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLastPart(System.String,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Text" File="Replace.cs" Line="54">The 'this' parameter (or 'Me' in Visual Basic) of 'Replace.GetLastPart(string, int, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="T" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="T" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than type name 'T'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Text" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="System" Certainty="95" Level="Error">The type name 'Text' conflicts in whole or in part with the namespace name 'System.Drawing.Text' defined in the .NET Framework. Rename the type to eliminate the conflict.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Text" File="Text.cs" Line="43">In externally visible method 'Text.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Upper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Execute(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Functions\Text" File="Upper.cs" Line="38">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'Upper.Execute(IEnumerable&lt;FunctionArgument&gt;, ParsingContext)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Excel.Operators">
       <Types>
        <Type Name="IOperator" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Operator" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Operator" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IOperator.Operator' so that it no longer conflicts with the reserved language keyword 'Operator'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Operator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Operator" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'Operator' so that it no longer conflicts with the reserved language keyword 'Operator'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Apply(OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult,OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Operators" File="Operator.cs" Line="77">In externally visible method 'Operator.Apply(CompileResult, CompileResult)', validate parameter 'left' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Operators" File="Operator.cs" Line="81">In externally visible method 'Operator.Apply(CompileResult, CompileResult)', validate parameter 'right' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Eq" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Eq" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Operators" File="Operator.cs" Line="230">Correct the casing of 'Eq' in member name 'Operator.Eq' by changing it to 'EQ'.</Issue>
            </Message>
            <Message Id="Eq" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Operators" File="Operator.cs" Line="230">Correct the spelling of 'Eq' in member name 'Operator.Eq' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Exp" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Exp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Operators" File="Operator.cs" Line="186">Correct the spelling of 'Exp' in member name 'Operator.Exp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Operator" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.get_Operator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Operators" File="Operator.cs" Line="72">Make 'Operator' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IOperator.Operator.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.Precedence" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator.get_Precedence()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Excel\Operators" File="Operator.cs" Line="67">Make 'Operator' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IOperator.Precedence.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="Operators" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'Operators' is plural, change it to its singular form.</Issue>
          </Message>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">The type name 'Operators' conflicts in whole or in part with the namespace name 'OfficeOpenXml.FormulaParsing.Excel.Operators'. Change either name to eliminate the conflict.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="OperatorsDict" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dict" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dict' in type name 'OperatorsDict'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'OperatorsDict' to end in 'Dictionary'.</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="75" Level="Warning">Add [Serializable] to 'OperatorsDict' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.ExcelUtilities">
       <Types>
        <Type Name="AddressTranslator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetAlphaPart(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="AddressTranslator.cs" Line="117">The 'this' parameter (or 'Me' in Visual Basic) of 'AddressTranslator.GetAlphaPart(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetIntPart(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="AddressTranslator.cs" Line="122">The 'this' parameter (or 'Me' in Visual Basic) of 'AddressTranslator.GetIntPart(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="AddressTranslator.cs" Line="125">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'AddressTranslator.GetIntPart(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNumericAlphaValue(System.Char)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="AddressTranslator.cs" Line="112">The 'this' parameter (or 'Me' in Visual Basic) of 'AddressTranslator.GetNumericAlphaValue(char)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToColAndRow(System.String,System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="AddressTranslator.cs" Line="69">Consider a design that does not require that 'col' be an out parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="AddressTranslator.cs" Line="69">Consider a design that does not require that 'row' be an out parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToColAndRow(System.String,System.Int32&amp;,System.Int32&amp;,OfficeOpenXml.FormulaParsing.ExcelUtilities.AddressTranslator+RangeCalculationBehaviour)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="AddressTranslator.cs" Line="81">Consider a design that does not require that 'col' be an out parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="AddressTranslator.cs" Line="81">Consider a design that does not require that 'row' be an out parameter.</Issue>
            </Message>
            <Message Id="behaviour" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="AddressTranslator.cs" Line="81">In method 'AddressTranslator.ToColAndRow(string, out int, out int, AddressTranslator.RangeCalculationBehaviour)', correct the spelling of 'behaviour' in parameter name 'behaviour' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="AddressTranslator.cs" Line="82">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'AddressTranslator.ToColAndRow(string, out int, out int, AddressTranslator.RangeCalculationBehaviour)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="AddressTranslator.cs" Line="82">In externally visible method 'AddressTranslator.ToColAndRow(string, out int, out int, AddressTranslator.RangeCalculationBehaviour)', validate parameter 'address' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AddressTranslator+RangeCalculationBehaviour" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Behaviour" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Behaviour' in type name 'AddressTranslator.RangeCalculationBehaviour'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="CellReferenceProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetReferencedAddresses(System.String,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="CellReferenceProvider.cs" Line="44">In externally visible method 'CellReferenceProvider.GetReferencedAddresses(string, ParsingContext)', validate parameter 'context' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelAddressUtil" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Util" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Util' in type name 'ExcelAddressUtil'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#IsValidAddress(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ExcelAddressUtil.cs" Line="44">In externally visible method 'ExcelAddressUtil.IsValidAddress(string)', validate parameter 'token' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelReferenceType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Name="NotFlagsNoZeroValue" Certainty="95" Level="CriticalError">Add a member to 'ExcelReferenceType' that has a value of zero with a suggested name of 'None'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="FormulaDependencies" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_formulaDependencyFactory" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'FormulaDependencies._formulaDependencyFactory' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFormulaScope(OfficeOpenXml.FormulaParsing.ParsingScope)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="FormulaDependencies.cs" Line="58">The 'this' parameter (or 'Me' in Visual Basic) of 'FormulaDependencies.AddFormulaScope(ParsingScope)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="parsingScope" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="FormulaDependencies.cs" Line="58">Parameter 'parsingScope' of 'FormulaDependencies.AddFormulaScope(ParsingScope)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dependencies" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="FormulaDependencies.cs" Line="55">Consider a design where 'FormulaDependencies.Dependencies' doesn't nest generic type 'IEnumerable&lt;KeyValuePair&lt;string, FormulaDependency&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FormulaDependency" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.FormulaParsing.ParsingScope)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="FormulaDependency.cs" Line="43">In externally visible method 'FormulaDependency.FormulaDependency(ParsingScope)', validate parameter 'scope' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IndexToAddressTranslator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetColumnLetter(System.Int32,System.Boolean)" Kind="Method" Static="True" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="i" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="IndexToAddressTranslator.cs" Line="59">In method 'IndexToAddressTranslator.GetColumnLetter(int, bool)', correct the spelling of 'i' in parameter name 'iColumnNumber' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRowNumber(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="IndexToAddressTranslator.cs" Line="87">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'IndexToAddressTranslator.GetRowNumber(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NumericExpressionEvaluator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Evaluate(System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="NumericExpressionEvaluator.cs" Line="95">In externally visible method 'NumericExpressionEvaluator.Evaluate(object, string)', validate parameter 'expression' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNonNumericStartChars(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="NumericExpressionEvaluator.cs" Line="60">The 'this' parameter (or 'Me' in Visual Basic) of 'NumericExpressionEvaluator.GetNonNumericStartChars(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OperandAsDouble(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="NumericExpressionEvaluator.cs" Line="70">The 'this' parameter (or 'Me' in Visual Basic) of 'NumericExpressionEvaluator.OperandAsDouble(object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="NumericExpressionEvaluator.cs" Line="73">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'NumericExpressionEvaluator.OperandAsDouble(object)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RangeAddress" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CollidesWith(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="RangeAddress.cs" Line="76">In externally visible method 'RangeAddress.CollidesWith(RangeAddress)', validate parameter 'other' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RangeAddressFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_excelDataProvider" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'RangeAddressFactory._excelDataProvider' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Create(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="RangeAddressFactory.cs" Line="116">The 'this' parameter (or 'Me' in Visual Basic) of 'RangeAddressFactory.Create(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Create(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="RangeAddressFactory.cs" Line="88">The 'this' parameter (or 'Me' in Visual Basic) of 'RangeAddressFactory.Create(string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleMultipleCellAddress(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress,OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressInfo)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="RangeAddressFactory.cs" Line="152">'RangeAddressFactory.HandleMultipleCellAddress(RangeAddress, ExcelAddressInfo)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleSingleCellAddress(OfficeOpenXml.FormulaParsing.ExcelUtilities.RangeAddress,OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressInfo)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="RangeAddressFactory.cs" Line="142">'RangeAddressFactory.HandleSingleCellAddress(RangeAddress, ExcelAddressInfo)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValueMatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CompareObjectToString(System.Object,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="78">In method 'ValueMatcher.CompareObjectToString(object, string)', correct the spelling of 'o' in parameter name 'o1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="78">In method 'ValueMatcher.CompareObjectToString(object, string)', correct the spelling of 'o' in parameter name 'o2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="82">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ValueMatcher.CompareObjectToString(object, string)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareStringToObject(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="68">In method 'ValueMatcher.CompareStringToObject(string, object)', correct the spelling of 'o' in parameter name 'o1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="68">In method 'ValueMatcher.CompareStringToObject(string, object)', correct the spelling of 'o' in parameter name 'o2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="72">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ValueMatcher.CompareStringToObject(string, object)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareStringToString(System.String,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="63">In method 'ValueMatcher.CompareStringToString(string, string)', correct the spelling of 's' in parameter name 's1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="63">In method 'ValueMatcher.CompareStringToString(string, string)', correct the spelling of 's' in parameter name 's2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="64">Because the behavior of 'string.CompareTo(string)' could vary based on the current user's locale settings, replace this call in 'ValueMatcher.CompareStringToString(string, string)' with a call to 'string.Compare(string, string, StringComparison)'. If the result of 'string.Compare(string, string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="64">In externally visible method 'ValueMatcher.CompareStringToString(string, string)', validate parameter 's1' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsMatch(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="43">In method 'ValueMatcher.IsMatch(object, object)', correct the spelling of 'o' in parameter name 'o1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="43">In method 'ValueMatcher.IsMatch(object, object)', correct the spelling of 'o' in parameter name 'o2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="49">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ValueMatcher.IsMatch(object, object)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="49">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ValueMatcher.IsMatch(object, object)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="59">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ValueMatcher.IsMatch(object, object)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="59">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ValueMatcher.IsMatch(object, object)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="51">In externally visible method 'ValueMatcher.IsMatch(object, object)', validate parameter 'o1' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="ValueMatcher.cs" Line="55">In externally visible method 'ValueMatcher.IsMatch(object, object)', validate parameter 'o2' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WildCardValueMatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="WildCard" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'WildCard' in type name 'WildCardValueMatcher' exists as a discrete term. If your usage is intended to be single word, case it as 'Wildcard'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CompareStringToString(System.String,System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="WildCardValueMatcher.cs" Line="46">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'WildCardValueMatcher.CompareStringToString(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExcelUtilities" File="WildCardValueMatcher.cs" Line="43">In externally visible method 'WildCardValueMatcher.CompareStringToString(string, string)', validate parameter 's1' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Exceptions">
       <Types>
        <Type Name="CircularReferenceException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CircularReferenceException': protected CircularReferenceException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CircularReferenceException': public CircularReferenceException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'CircularReferenceException': public CircularReferenceException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'CircularReferenceException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelErrorCodes" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="ExcelErrorCodes.cs" Line="60">'obj', a parameter, is cast to type 'ExcelErrorCodes' multiple times in method 'ExcelErrorCodes.Equals(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NoValueAvaliable" Kind="Property" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Avaliable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="ExcelErrorCodes.cs" Line="103">Correct the spelling of 'Avaliable' in member name 'ExcelErrorCodes.NoValueAvaliable' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Equality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="ExcelErrorCodes.cs" Line="66">In method 'ExcelErrorCodes.operator ==(ExcelErrorCodes, ExcelErrorCodes)', correct the spelling of 'c' in parameter name 'c1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="ExcelErrorCodes.cs" Line="66">In method 'ExcelErrorCodes.operator ==(ExcelErrorCodes, ExcelErrorCodes)', correct the spelling of 'c' in parameter name 'c2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="ExcelErrorCodes.cs" Line="67">In externally visible method 'ExcelErrorCodes.operator ==(ExcelErrorCodes, ExcelErrorCodes)', validate parameter 'c1' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="ExcelErrorCodes.cs" Line="67">In externally visible method 'ExcelErrorCodes.operator ==(ExcelErrorCodes, ExcelErrorCodes)', validate parameter 'c2' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Inequality(OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes,OfficeOpenXml.FormulaParsing.Exceptions.ExcelErrorCodes)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="ExcelErrorCodes.cs" Line="71">In method 'ExcelErrorCodes.operator !=(ExcelErrorCodes, ExcelErrorCodes)', correct the spelling of 'c' in parameter name 'c1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="ExcelErrorCodes.cs" Line="71">In method 'ExcelErrorCodes.operator !=(ExcelErrorCodes, ExcelErrorCodes)', correct the spelling of 'c' in parameter name 'c2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="ExcelErrorCodes.cs" Line="72">In externally visible method 'ExcelErrorCodes.operator !=(ExcelErrorCodes, ExcelErrorCodes)', validate parameter 'c1' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="ExcelErrorCodes.cs" Line="72">In externally visible method 'ExcelErrorCodes.operator !=(ExcelErrorCodes, ExcelErrorCodes)', validate parameter 'c2' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelErrorValueException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ExcelErrorValueException': protected ExcelErrorValueException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ExcelErrorValueException': public ExcelErrorValueException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ExcelErrorValueException': public ExcelErrorValueException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ExcelErrorValueException': public ExcelErrorValueException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ExcelErrorValueException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelErrorValue)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="ExcelErrorValueException.cs" Line="18">In externally visible method 'ExcelErrorValueException.ExcelErrorValueException(ExcelErrorValue)', validate parameter 'error' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UnrecognizedTokenException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UnrecognizedTokenException': protected UnrecognizedTokenException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UnrecognizedTokenException': public UnrecognizedTokenException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UnrecognizedTokenException': public UnrecognizedTokenException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UnrecognizedTokenException': public UnrecognizedTokenException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'UnrecognizedTokenException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Exceptions" File="UnrecognizedTokenException.cs" Line="42">In externally visible method 'UnrecognizedTokenException.UnrecognizedTokenException(Token)', validate parameter 'token' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.ExpressionGraph">
       <Types>
        <Type Name="AtomicExpression" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'AtomicExpression' to protected.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="CompileResult" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_result" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'CompileResult._result' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResultNumeric" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_ResultNumeric()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="CompileResult.cs" Line="81">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'CompileResult.ResultNumeric.get()' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="CompileResultFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Create(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="CompileResultFactory.cs" Line="41">In member 'CompileResultFactory.Create(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelAddressExpression" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_rangeAddressFactory" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelAddressExpression._rangeAddressFactory' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompileSingleCell(OfficeOpenXml.FormulaParsing.ExcelDataProvider+IRangeInfo)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExcelAddressExpression.cs" Line="110">'ExcelAddressExpression.CompileSingleCell(ExcelDataProvider.IRangeInfo)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Expression" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'Expression' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddChild(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="Expression.cs" Line="82">In externally visible method 'Expression.AddChild(Expression)', validate parameter 'child' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParentIsLookupFunction" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ParentIs" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="Expression.cs" Line="63">The compound word 'ParentIs' in member name 'Expression.ParentIsLookupFunction' exists as a discrete term. If your usage is intended to be single word, case it as 'Parentis' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Prev" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Prev" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="Expression.cs" Line="46">Correct the spelling of 'Prev' in member name 'Expression.Prev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExpressionCompiler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#HandlePrecedenceLevel(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="last" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExpressionCompiler.cs" Line="113">'ExpressionCompiler.HandlePrecedenceLevel(int)' declares a variable, 'last', of type 'Expression', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PerformCompilation(System.String,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="column" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExpressionCompiler.cs" Line="70">Parameter 'column' of 'ExpressionCompiler.PerformCompilation(string, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="row" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExpressionCompiler.cs" Line="70">Parameter 'row' of 'ExpressionCompiler.PerformCompilation(string, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="worksheet" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExpressionCompiler.cs" Line="70">Parameter 'worksheet' of 'ExpressionCompiler.PerformCompilation(string, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExpressionConverter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FromCompileResult(OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToDouble(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExpressionConverter.cs" Line="54">Because the behavior of 'Convert.ToDouble(object)' could vary based on the current user's locale settings, replace this call in 'ExpressionConverter.FromCompileResult(CompileResult)' with a call to 'Convert.ToDouble(object, IFormatProvider)'. If the result of 'Convert.ToDouble(object, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExpressionConverter.cs" Line="51">In externally visible method 'ExpressionConverter.FromCompileResult(CompileResult)', validate parameter 'compileResult' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToStringExpression(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExpressionConverter.cs" Line="43">In externally visible method 'ExpressionConverter.ToStringExpression(Expression)', validate parameter 'expression' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExpressionFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Create(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExpressionFactory.cs" Line="54">In externally visible method 'ExpressionFactory.Create(Token)', validate parameter 'token' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExpressionGraph" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">The type name 'ExpressionGraph' conflicts in whole or in part with the namespace name 'OfficeOpenXml.FormulaParsing.ExpressionGraph'. Change either name to eliminate the conflict.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Add(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExpressionGraph.cs" Line="50">In externally visible method 'ExpressionGraph.Add(Expression)', validate parameter 'expression' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExpressionGraph.cs" Line="66">In externally visible method 'ExpressionGraph.Remove(Expression)', validate parameter 'item' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExpressionGraphBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#IsWaste(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="ExpressionGraphBuilder.cs" Line="169">The 'this' parameter (or 'Me' in Visual Basic) of 'ExpressionGraphBuilder.IsWaste(Token)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IntegerExpression" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph" File="IntegerExpression.cs" Line="57">In method 'IntegerExpression.IntegerExpression(double)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy">
       <Types>
        <Type Name="CompileStrategy" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'CompileStrategy' to protected.</Issue>
          </Message>
          <Message TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">The type name 'CompileStrategy' conflicts in whole or in part with the namespace name 'OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy'. Change either name to eliminate the conflict.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#_expression" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="25" Level="Error">Remove the read-only designation from 'CompileStrategy._expression' or change the field to one that is an immutable reference type. If the reference type 'Expression' is, in fact, immutable, exclude this message.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'CompileStrategy._expression' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CompileStrategyFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Create(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph\CompileStrategy" File="CompileStrategyFactory.cs" Line="43">In externally visible method 'CompileStrategyFactory.Create(Expression)', validate parameter 'expression' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.ExpressionGraph.FunctionCompilers">
       <Types>
        <Type Name="DefaultCompiler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Compile(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph\FunctionCompilers" File="DefaultCompiler.cs" Line="52">In externally visible method 'DefaultCompiler.Compile(IEnumerable&lt;Expression&gt;, ParsingContext)', validate parameter 'children' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ErrorHandlingFunctionCompiler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Compile(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph\FunctionCompilers" File="ErrorHandlingFunctionCompiler.cs" Line="62">Modify 'ErrorHandlingFunctionCompiler.Compile(IEnumerable&lt;Expression&gt;, ParsingContext)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="e" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph\FunctionCompilers" File="ErrorHandlingFunctionCompiler.cs" Line="62">'ErrorHandlingFunctionCompiler.Compile(IEnumerable&lt;Expression&gt;, ParsingContext)' declares a variable, 'e', of type 'Exception', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph\FunctionCompilers" File="ErrorHandlingFunctionCompiler.cs" Line="51">In externally visible method 'ErrorHandlingFunctionCompiler.Compile(IEnumerable&lt;Expression&gt;, ParsingContext)', validate parameter 'children' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FunctionCompiler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'FunctionCompiler' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BuildFunctionArguments(System.Object,System.Collections.Generic.List`1&lt;OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionArgument&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph\FunctionCompilers" File="FunctionCompiler.cs" Line="60">'result', a parameter, is cast to type 'IEnumerable&lt;object&gt;' multiple times in method 'FunctionCompiler.BuildFunctionArguments(object, List&lt;FunctionArgument&gt;)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant isint instruction.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph\FunctionCompilers" File="FunctionCompiler.cs" Line="56">Change 'List&lt;FunctionArgument&gt;' in 'FunctionCompiler.BuildFunctionArguments(object, List&lt;FunctionArgument&gt;)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph\FunctionCompilers" File="FunctionCompiler.cs" Line="65">In externally visible method 'FunctionCompiler.BuildFunctionArguments(object, List&lt;FunctionArgument&gt;)', validate parameter 'args' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FunctionCompilerFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Create(OfficeOpenXml.FormulaParsing.Excel.Functions.ExcelFunction)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Function" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph\FunctionCompilers" File="FunctionCompilerFactory.cs" Line="43">In virtual/interface member 'FunctionCompilerFactory.Create(ExcelFunction)', rename parameter 'function' so that it no longer conflicts with the reserved language keyword 'Function'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph\FunctionCompilers" File="FunctionCompilerFactory.cs" Line="44">In externally visible method 'FunctionCompilerFactory.Create(ExcelFunction)', validate parameter 'function' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LookupFunctionCompiler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Compile(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression&gt;,OfficeOpenXml.FormulaParsing.ParsingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\ExpressionGraph\FunctionCompilers" File="LookupFunctionCompiler.cs" Line="52">In externally visible method 'LookupFunctionCompiler.Compile(IEnumerable&lt;Expression&gt;, ParsingContext)', validate parameter 'children' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.LexicalAnalysis">
       <Types>
        <Type Name="ILexer" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Lexer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Lexer' in type name 'ILexer'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ISourceCodeTokenizer" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Tokenizer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Tokenizer' in type name 'ISourceCodeTokenizer'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Lexer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Lexer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Lexer' in type name 'Lexer'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer,OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="tokenizer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="Lexer.cs" Line="48">In method 'Lexer.Lexer(ISourceCodeTokenizer, ISyntacticAnalyzer)', correct the spelling of 'tokenizer' in parameter name 'tokenizer' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SourceCodeTokenizer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Tokenizer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Tokenizer' in type name 'SourceCodeTokenizer'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#FixOperators(OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenizerContext)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="SourceCodeTokenizer.cs" Line="166">'SourceCodeTokenizer.FixOperators(TokenizerContext)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="SourceCodeTokenizer.cs" Line="166">The 'this' parameter (or 'Me' in Visual Basic) of 'SourceCodeTokenizer.FixOperators(TokenizerContext)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="context" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="SourceCodeTokenizer.cs" Line="166">Parameter 'context' of 'SourceCodeTokenizer.FixOperators(TokenizerContext)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Tokenize(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="SourceCodeTokenizer.cs" Line="61">'SourceCodeTokenizer.Tokenize(string)' has a cyclomatic complexity of 26. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SyntacticAnalyzer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Analyze(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="SyntacticAnalyzer.cs" Line="52">In externally visible method 'SyntacticAnalyzer.Analyze(IEnumerable&lt;Token&gt;)', validate parameter 'tokens' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnsureParenthesesAreWellFormed(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.SyntacticAnalyzer+AnalyzingContext)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="SyntacticAnalyzer.cs" Line="77">The 'this' parameter (or 'Me' in Visual Basic) of 'SyntacticAnalyzer.EnsureParenthesesAreWellFormed(Token, SyntacticAnalyzer.AnalyzingContext)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EnsureStringsAreWellFormed(OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token,OfficeOpenXml.FormulaParsing.LexicalAnalysis.SyntacticAnalyzer+AnalyzingContext)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="SyntacticAnalyzer.cs" Line="89">The 'this' parameter (or 'Me' in Visual Basic) of 'SyntacticAnalyzer.EnsureStringsAreWellFormed(Token, SyntacticAnalyzer.AnalyzingContext)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Token" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Append(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="Token.cs" Line="51">In member 'Token.Append(string)', consider replacing the data type identifier 'string' in parameter name 'stringToAppend' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TokenFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Create(System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenFactory.cs" Line="121">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'TokenFactory.Create(IEnumerable&lt;Token&gt;, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenFactory.cs" Line="125">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'TokenFactory.Create(IEnumerable&lt;Token&gt;, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenFactory.cs" Line="129">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'TokenFactory.Create(IEnumerable&lt;Token&gt;, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenFactory.cs" Line="133">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'TokenFactory.Create(IEnumerable&lt;Token&gt;, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenFactory.cs" Line="152">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'TokenFactory.Create(IEnumerable&lt;Token&gt;, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenFactory.cs" Line="85">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TokenFactory.Create(IEnumerable&lt;Token&gt;, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenFactory.cs" Line="96">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'TokenFactory.Create(IEnumerable&lt;Token&gt;, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenFactory.cs" Line="73">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'TokenFactory.Create(IEnumerable&lt;Token&gt;, string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenFactory.cs" Line="73">In externally visible method 'TokenFactory.Create(IEnumerable&lt;Token&gt;, string)', validate parameter 'token' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TokenizerContext" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Tokenizer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Tokenizer' in type name 'TokenizerContext'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AppendToCurrentToken(System.Char)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenizerContext.cs" Line="102">In method 'TokenizerContext.AppendToCurrentToken(char)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AppendToLastToken(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenizerContext.cs" Line="107">In member 'TokenizerContext.AppendToLastToken(string)', consider replacing the data type identifier 'string' in parameter name 'stringToAppend' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FormulaChars" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenizerContext.cs" Line="56">Change 'TokenizerContext.FormulaChars' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TokenSeparatorProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens" Kind="Property" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.get_Tokens()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\LexicalAnalysis" File="TokenSeparatorProvider.cs" Line="80">Make 'TokenSeparatorProvider' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ITokenSeparatorProvider.Tokens.get()' and is visible to derived classes.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="TokenType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Negator" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Negator" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Negator' in member name 'TokenType.Negator' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SemiColon" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SemiColon" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'SemiColon' in member name 'TokenType.SemiColon' exists as a discrete term. If your usage is intended to be single word, case it as 'Semicolon' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.FormulaParsing.Utilities">
       <Types>
        <Type Name="ArgumentInfo`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Utilities" File="ArgumentInfo.cs" Line="10">In method 'ArgumentInfo&lt;T&gt;.ArgumentInfo(T)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExtensionMethods" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#IsNotNull`1(OfficeOpenXml.FormulaParsing.Utilities.ArgumentInfo`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Utilities" File="ExtensionMethods.cs" Line="20">In method 'ExtensionMethods.IsNotNull&lt;T&gt;(this ArgumentInfo&lt;T&gt;)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Utilities" File="ExtensionMethods.cs" Line="21">In externally visible method 'ExtensionMethods.IsNotNull&lt;T&gt;(this ArgumentInfo&lt;T&gt;)', validate parameter 'val' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNotNullOrEmpty(OfficeOpenXml.FormulaParsing.Utilities.ArgumentInfo`1&lt;System.String&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Utilities" File="ExtensionMethods.cs" Line="11">In method 'ExtensionMethods.IsNotNullOrEmpty(this ArgumentInfo&lt;string&gt;)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Utilities" File="ExtensionMethods.cs" Line="12">In externally visible method 'ExtensionMethods.IsNotNullOrEmpty(this ArgumentInfo&lt;string&gt;)', validate parameter 'val' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNumeric(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Utilities" File="ExtensionMethods.cs" Line="28">In member 'ExtensionMethods.IsNumeric(this object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IntegerIdProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#NewId()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="IdProvider" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\FormulaParsing\Utilities" File="IntegerIdProvider.cs" Line="16">Correct the spelling of the unrecognized token 'IdProvider' in the literal '"IdProvider run out of id:s"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.Packaging">
       <Types>
        <Type Name="ZipPackage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="123">In method 'ZipPackage.ZipPackage(Stream)', object 'part' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'part' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="161">Object 'this' can be disposed more than once in method 'ZipPackage.ZipPackage(Stream)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 161</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="161">Object 'zip' can be disposed more than once in method 'ZipPackage.ZipPackage(Stream)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 161</Issue>
            </Message>
            <Message Id="size" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="105">'ZipPackage.ZipPackage(Stream)' declares a variable, 'size', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="106">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ZipPackage.ZipPackage(Stream)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="111">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ZipPackage.ZipPackage(Stream)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="117">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ZipPackage.ZipPackage(Stream)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="138">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipPackage.ZipPackage(Stream)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="117">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipPackage.ZipPackage(Stream)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Close()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="314">The 'this' parameter (or 'Me' in Visual Basic) of 'ZipPackage.Close()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreatePart(System.Uri,System.String,OfficeOpenXml.CompressionLevel)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="197">In method 'ZipPackage.CreatePart(Uri, string, CompressionLevel)', object 'part' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'part' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Flush()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="310">The 'this' parameter (or 'Me' in Visual Basic) of 'ZipPackage.Flush()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUriKey(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="215">The 'this' parameter (or 'Me' in Visual Basic) of 'ZipPackage.GetUriKey(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="259">In method 'ZipPackage.Save()', object 'ms' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="288">Object 'ms' can be disposed more than once in method 'ZipPackage.Save()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 288</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="288">Object 'os' can be disposed more than once in method 'ZipPackage.Save()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 288</Issue>
            </Message>
            <Message Id="entry" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackage.cs" Line="264">'ZipPackage.Save()' declares a variable, 'entry', of type 'ZipEntry', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZipPackagePart" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetStream(System.IO.FileMode)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="fileMode" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackagePart.cs" Line="88">Parameter 'fileMode' of 'ZipPackagePart.GetStream(FileMode)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStream(System.IO.FileMode,System.IO.FileAccess)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="fileAccess" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackagePart.cs" Line="92">Parameter 'fileAccess' of 'ZipPackagePart.GetStream(FileMode, FileAccess)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetZipStream()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackagePart.cs" Line="127">In method 'ZipPackagePart.GetZipStream()', object 'ms' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackagePart.cs" Line="126">The 'this' parameter (or 'Me' in Visual Basic) of 'ZipPackagePart.GetZipStream()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteZip(Ionic.Zip.ZipOutputStream)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackagePart.cs" Line="159">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ZipPackagePart.WriteZip(ZipOutputStream)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZipPackageRelationshipBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_rels" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZipPackageRelationshipBase._rels' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="rels" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'rels' in member name 'ZipPackageRelationshipBase._rels' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateRelationship(System.Uri,OfficeOpenXml.Packaging.TargetMode,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="72">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ZipPackageRelationshipBase.CreateRelationship(Uri, TargetMode, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#maxRId" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="RId" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'RId' in member name 'ZipPackageRelationshipBase.maxRId' exists as a discrete term. If your usage is intended to be single word, case it as 'Rid' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZipPackageRelationshipBase.maxRId' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadRelation(System.String,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="107">Modify 'ZipPackageRelationshipBase.ReadRelation(string, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="102">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ZipPackageRelationshipBase.ReadRelation(string, string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="116">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ZipPackageRelationshipBase.ReadRelation(string, string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="116">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipPackageRelationshipBase.ReadRelation(string, string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateMaxRId(System.String,System.Int32&amp;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="RId" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="53">In member 'ZipPackageRelationshipBase.UpdateMaxRId(string, ref int)', the compound word 'RId' in parameter name 'maxRId' exists as a discrete term. If your usage is intended to be single word, case it as 'Rid' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="53">The compound word 'RId' in member name 'ZipPackageRelationshipBase.UpdateMaxRId(string, ref int)' exists as a discrete term. If your usage is intended to be single word, case it as 'Rid' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="53">Consider a design that does not require that 'maxRId' be a reference parameter.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="53">The 'this' parameter (or 'Me' in Visual Basic) of 'ZipPackageRelationshipBase.UpdateMaxRId(string, ref int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="54">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ZipPackageRelationshipBase.UpdateMaxRId(string, ref int)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="54">In externally visible method 'ZipPackageRelationshipBase.UpdateMaxRId(string, ref int)', validate parameter 'id' before using it.</Issue>
            </Message>
            <Message Id="maxRId" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipBase.cs" Line="53">'maxRId', a parameter declared in 'ZipPackageRelationshipBase.UpdateMaxRId(string, ref int)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ZipPackageRelationshipCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_rels" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ZipPackageRelationshipCollection._rels' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="rels" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'rels' in member name 'ZipPackageRelationshipCollection._rels' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteZip(Ionic.Zip.ZipOutputStream,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Text.StringBuilder.AppendFormat(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Packaging" File="ZipPackageRelationshipCollection.cs" Line="91">Because the behavior of 'StringBuilder.AppendFormat(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ZipPackageRelationshipCollection.WriteZip(ZipOutputStream, string)' with a call to 'StringBuilder.AppendFormat(IFormatProvider, string, params object[])'. If the result of 'StringBuilder.AppendFormat(IFormatProvider, string, params object[])' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.Style">
       <Types>
        <Type Name="Border" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BorderAround(OfficeOpenXml.Style.ExcelBorderStyle)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Style" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelBorder.cs" Line="150">In member 'Border.BorderAround(ExcelBorderStyle)', correct the casing of 'Style' in parameter name 'Style' by changing it to 'style'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BorderAround(OfficeOpenXml.Style.ExcelBorderStyle,System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Color" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelBorder.cs" Line="160">In member 'Border.BorderAround(ExcelBorderStyle, Color)', correct the casing of 'Color' in parameter name 'Color' by changing it to 'color'.</Issue>
            </Message>
            <Message Id="Style" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelBorder.cs" Line="160">In member 'Border.BorderAround(ExcelBorderStyle, Color)', correct the casing of 'Style' in parameter name 'Style' by changing it to 'style'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelBorder.cs" Line="164">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'Border.BorderAround(ExcelBorderStyle, Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelBorder.cs" Line="165">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'Border.BorderAround(ExcelBorderStyle, Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelBorder.cs" Line="166">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'Border.BorderAround(ExcelBorderStyle, Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelBorder.cs" Line="167">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'Border.BorderAround(ExcelBorderStyle, Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eStrikeType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eStrikeType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eUnderLineType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="UnderLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'UnderLine' in type name 'eUnderLineType' exists as a discrete term. If your usage is intended to be single word, case it as 'Underline'.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eUnderLineType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#WavyDbl" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dbl" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dbl' in member name 'eUnderLineType.WavyDbl' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelBorderItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetSource()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelBorderItem.cs" Line="107">'ExcelBorderItem.GetSource()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Borderitem" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelBorderItem.cs" Line="107">Correct the spelling of the unrecognized token 'Borderitem' in the literal '"Invalid class for Borderitem"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelColor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetSource()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelColor.cs" Line="149">'ExcelColor.GetSource()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LookupColor(OfficeOpenXml.Style.ExcelColor)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelColor.cs" Line="162">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelColor.LookupColor(ExcelColor)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="iTint" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelColor.cs" Line="164">'ExcelColor.LookupColor(ExcelColor)' declares a variable, 'iTint', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelColor.cs" Line="250">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelColor.LookupColor(ExcelColor)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelColor.cs" Line="236">In externally visible method 'ExcelColor.LookupColor(ExcelColor)', validate parameter 'theColor' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Rgb" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Rgb" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelColor.cs" Line="88">Correct the spelling of 'Rgb' in member name 'ExcelColor.Rgb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetColor(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelColor.cs" Line="116">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelColor.SetColor(Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Tint" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Tint(System.Decimal)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelColor.cs" Line="77">Method 'ExcelColor.Tint.set(decimal)' passes 'Value must be between -1 and 1' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelFont" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Id()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelFont.cs" Line="231">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelFont.Id.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="System.Single.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelFont.cs" Line="231">Because the behavior of 'float.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelFont.Id.get()' with a call to 'float.ToString(IFormatProvider)'. If the result of 'float.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SetFromFont(System.Drawing.Font)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Font" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelFont.cs" Line="217">In member 'ExcelFont.SetFromFont(Font)', correct the casing of 'Font' in parameter name 'Font' by changing it to 'font'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelFont.cs" Line="218">In externally visible method 'ExcelFont.SetFromFont(Font)', validate parameter 'Font' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnderLine" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnderLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelFont.cs" Line="164">The compound word 'UnderLine' in member name 'ExcelFont.UnderLine' exists as a discrete term. If your usage is intended to be single word, case it as 'Underline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnderLineType" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnderLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelFont.cs" Line="183">The compound word 'UnderLine' in member name 'ExcelFont.UnderLineType' exists as a discrete term. If your usage is intended to be single word, case it as 'Underline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VerticalAlign" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_VerticalAlign()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelFont.cs" Line="198">Replace the call to 'string.operator ==(string, string)' in 'ExcelFont.VerticalAlign.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelGradientFill" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Bottom" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Bottom(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelGradientFill.cs" Line="110">Method 'ExcelGradientFill.Bottom.set(double)' passes 'Value must be between 0 and 1' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Id()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelGradientFill.cs" Line="185">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelGradientFill.Id.get()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelGradientFill.cs" Line="185">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelGradientFill.Id.get()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelGradientFill.cs" Line="185">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelGradientFill.Id.get()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelGradientFill.cs" Line="185">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelGradientFill.Id.get()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelGradientFill.cs" Line="185">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelGradientFill.Id.get()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Left" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Left(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelGradientFill.cs" Line="128">Method 'ExcelGradientFill.Left.set(double)' passes 'Value must be between 0 and 1' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Right" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Right(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelGradientFill.cs" Line="146">Method 'ExcelGradientFill.Right.set(double)' passes 'Value must be between 0 and 1' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Top" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Top(System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelGradientFill.cs" Line="92">Method 'ExcelGradientFill.Top.set(double)' passes 'Value must be between 0 and 1' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelGradientFill.cs" Line="71">The property name 'ExcelGradientFill.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelNumberFormat" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BuildIn" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_BuildIn(System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelNumberFormat.cs" Line="96">'ExcelNumberFormat.BuildIn.set(bool)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetFromBuildIdFromFormat(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelNumberFormat.cs" Line="163">'ExcelNumberFormat.GetFromBuildIdFromFormat(string)' has a cyclomatic complexity of 72. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFromBuildInFromID(System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelNumberFormat.cs" Line="99">'ExcelNumberFormat.GetFromBuildInFromID(int)' has a cyclomatic complexity of 30. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NumFmtID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelNumberFormat.cs" Line="56">Correct the casing of 'ID' in member name 'ExcelNumberFormat.NumFmtID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Fmt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelNumberFormat.cs" Line="56">Correct the spelling of 'Fmt' in member name 'ExcelNumberFormat.NumFmtID' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelNumberFormat.cs" Line="56">Correct the spelling of 'Num' in member name 'ExcelNumberFormat.NumFmtID' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelParagraph" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.String,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelParagraph.cs" Line="45">Modify member 'ExcelParagraph.ExcelParagraph(XmlNamespaceManager, XmlNode, string, string[])' so that it no longer exposes the concrete type 'XmlNode'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelParagraphCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelParagraphCollection.cs" Line="82">In member 'ExcelParagraphCollection.Add(string)', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelParagraphCollection.cs" Line="65">In member 'ExcelParagraphCollection.this[int]', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(OfficeOpenXml.Style.ExcelRichText)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelParagraphCollection.cs" Line="128">Consider changing the type of parameter 'Item' in 'ExcelParagraphCollection.Remove(ExcelRichText)' from 'ExcelRichText' to its base type 'XmlHelper'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="Item" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelParagraphCollection.cs" Line="128">In member 'ExcelParagraphCollection.Remove(ExcelRichText)', correct the casing of 'Item' in parameter name 'Item' by changing it to 'item'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelParagraphCollection.cs" Line="129">In externally visible method 'ExcelParagraphCollection.Remove(ExcelRichText)', validate parameter 'Item' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveAt(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelParagraphCollection.cs" Line="118">In member 'ExcelParagraphCollection.RemoveAt(int)', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.Style.ExcelParagraph&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelParagraphCollection.cs" Line="162">Make 'ExcelParagraphCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;ExcelParagraph&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelParagraphCollection.cs" Line="171">Make 'ExcelParagraphCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Text" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Text(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="count" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelParagraphCollection.cs" Line="151">'ExcelParagraphCollection.Text.set(string)' declares a variable, 'count', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelRichText" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Color" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Color()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichText.cs" Line="295">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelRichText.Color.get()' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichText.cs" Line="289">Replace the call to 'string.operator ==(string, string)' in 'ExcelRichText.Color.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Color(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichText.cs" Line="300">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelRichText.Color.set(Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#UnderLine" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnderLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichText.cs" Line="194">The compound word 'UnderLine' in member name 'ExcelRichText.UnderLine' exists as a discrete term. If your usage is intended to be single word, case it as 'Underline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VerticalAlign" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_VerticalAlign()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichText.cs" Line="230">Modify 'ExcelRichText.VerticalAlign.get()' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichText.cs" Line="220">Replace the call to 'string.operator ==(string, string)' in 'ExcelRichText.VerticalAlign.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_VerticalAlign(OfficeOpenXml.Style.ExcelVerticalAlignmentFont)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichText.cs" Line="244">In method 'ExcelRichText.VerticalAlign.set(ExcelVerticalAlignmentFont)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelRichTextCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichTextCollection.cs" Line="94">In member 'ExcelRichTextCollection.Add(string)', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichTextCollection.cs" Line="72">In member 'ExcelRichTextCollection.this[int]', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(OfficeOpenXml.Style.ExcelRichText)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Item" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichTextCollection.cs" Line="177">In member 'ExcelRichTextCollection.Remove(ExcelRichText)', correct the casing of 'Item' in parameter name 'Item' by changing it to 'item'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichTextCollection.cs" Line="178">In externally visible method 'ExcelRichTextCollection.Remove(ExcelRichText)', validate parameter 'Item' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveAt(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichTextCollection.cs" Line="167">In member 'ExcelRichTextCollection.RemoveAt(int)', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.Style.ExcelRichText&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichTextCollection.cs" Line="220">Make 'ExcelRichTextCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;ExcelRichText&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelRichTextCollection.cs" Line="229">Make 'ExcelRichTextCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelStyle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Id()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelStyle.cs" Line="247">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelStyle.Id.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Indent" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Indent(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelStyle.cs" Line="163">Method 'ExcelStyle.Indent.set(int)' passes 'Indent must be between 0 and 250' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Numberformat" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Numberformat" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelStyle.cs" Line="67">Correct the spelling of 'Numberformat' in member name 'ExcelStyle.Numberformat' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TextRotation" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_TextRotation(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelStyle.cs" Line="181">Method 'ExcelStyle.TextRotation.set(int)' passes 'TextRotation out of range.' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#XfId" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Xf" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelStyle.cs" Line="225">Correct the casing of 'Xf' in member name 'ExcelStyle.XfId' by changing it to 'XF'.</Issue>
            </Message>
            <Message Id="Xf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelStyle.cs" Line="225">Correct the spelling of 'Xf' in member name 'ExcelStyle.XfId' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelTextFont" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,System.String,System.String[])" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="86">Replace the call to 'string.operator !=(string, string)' in 'ExcelTextFont.ExcelTextFont(XmlNamespaceManager, XmlNode, string, string[])' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Color" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Color()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="229">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelTextFont.Color.get()' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="223">Replace the call to 'string.operator ==(string, string)' in 'ExcelTextFont.Color.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Color(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="235">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelTextFont.Color.set(Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CreateTopNode()" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="112">Replace the call to 'string.operator !=(string, string)' in 'ExcelTextFont.CreateTopNode()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetFromFont(System.Drawing.Font)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Font" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="296">In member 'ExcelTextFont.SetFromFont(Font)', correct the casing of 'Font' in parameter name 'Font' by changing it to 'font'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="297">In externally visible method 'ExcelTextFont.SetFromFont(Font)', validate parameter 'Font' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Size" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Size(System.Single)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="214">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelTextFont.Size.set(float)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#TranslateStrike(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="267">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelTextFont.TranslateStrike(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TranslateStrikeText(OfficeOpenXml.Style.eStrikeType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="279">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelTextFont.TranslateStrikeText(eStrikeType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TranslateUnderline(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="240">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelTextFont.TranslateUnderline(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TranslateUnderlineText(OfficeOpenXml.Style.eUnderLineType)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="254">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelTextFont.TranslateUnderlineText(eUnderLineType)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="263">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelTextFont.TranslateUnderlineText(eUnderLineType)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnderLine" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnderLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="148">The compound word 'UnderLine' in member name 'ExcelTextFont.UnderLine' exists as a discrete term. If your usage is intended to be single word, case it as 'Underline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnderLineColor" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnderLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="161">The compound word 'UnderLine' in member name 'ExcelTextFont.UnderLineColor' exists as a discrete term. If your usage is intended to be single word, case it as 'Underline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_UnderLineColor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="169">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelTextFont.UnderLineColor.get()' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="163">Replace the call to 'string.operator ==(string, string)' in 'ExcelTextFont.UnderLineColor.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_UnderLineColor(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style" File="ExcelTextFont.cs" Line="175">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelTextFont.UnderLineColor.set(Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelUnderLineType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="UnderLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'UnderLine' in type name 'ExcelUnderLineType' exists as a discrete term. If your usage is intended to be single word, case it as 'Underline'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="StyleBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_address" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StyleBase._address' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_positionID" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StyleBase._positionID' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_styles" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'StyleBase._styles' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.Style.Dxf">
       <Types>
        <Type Name="DxfStyleBase`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dxf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dxf' in type name 'DxfStyleBase&lt;T&gt;'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#_styles" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DxfStyleBase&lt;T&gt;._styles' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAsString(System.Object)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="v" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="DxfStyleBase.cs" Line="89">In method 'DxfStyleBase&lt;T&gt;.GetAsString(object)', consider providing a more meaningful name than parameter name 'v'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValue(OfficeOpenXml.XmlHelper,System.String,System.Object)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="v" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="DxfStyleBase.cs" Line="67">In method 'DxfStyleBase&lt;T&gt;.SetValue(XmlHelper, string, object)', consider providing a more meaningful name than parameter name 'v'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="DxfStyleBase.cs" Line="70">In externally visible method 'DxfStyleBase&lt;T&gt;.SetValue(XmlHelper, string, object)', validate parameter 'helper' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValueBool(OfficeOpenXml.XmlHelper,System.String,System.Nullable`1&lt;System.Boolean&gt;)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="v" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="DxfStyleBase.cs" Line="78">In method 'DxfStyleBase&lt;T&gt;.SetValueBool(XmlHelper, string, bool?)', consider providing a more meaningful name than parameter name 'v'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="DxfStyleBase.cs" Line="81">In externally visible method 'DxfStyleBase&lt;T&gt;.SetValueBool(XmlHelper, string, bool?)', validate parameter 'helper' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValueColor(OfficeOpenXml.XmlHelper,System.String,OfficeOpenXml.Style.Dxf.ExcelDxfColor)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="DxfStyleBase.cs" Line="27">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'DxfStyleBase&lt;T&gt;.SetValueColor(XmlHelper, string, ExcelDxfColor)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetValueEnum(OfficeOpenXml.XmlHelper,System.String,System.Enum)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="v" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="DxfStyleBase.cs" Line="54">In method 'DxfStyleBase&lt;T&gt;.SetValueEnum(XmlHelper, string, Enum)', consider providing a more meaningful name than parameter name 'v'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="DxfStyleBase.cs" Line="62">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'DxfStyleBase&lt;T&gt;.SetValueEnum(XmlHelper, string, Enum)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="DxfStyleBase.cs" Line="57">In externally visible method 'DxfStyleBase&lt;T&gt;.SetValueEnum(XmlHelper, string, Enum)', validate parameter 'helper' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDxfBorderBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dxf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dxf' in type name 'ExcelDxfBorderBase'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelDxfBorderItem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dxf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dxf' in type name 'ExcelDxfBorderItem'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelDxfColor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dxf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dxf' in type name 'ExcelDxfColor'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Id()" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfColor.cs" Line="24">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelDxfColor.Id.get()' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDxfFill" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dxf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dxf' in type name 'ExcelDxfFill'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CreateNodes(OfficeOpenXml.XmlHelper,System.String)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfFill.cs" Line="37">In externally visible method 'ExcelDxfFill.CreateNodes(XmlHelper, string)', validate parameter 'helper' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDxfFontBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dxf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dxf' in type name 'ExcelDxfFontBase'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CreateNodes(OfficeOpenXml.XmlHelper,System.String)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfFontBase.cs" Line="62">In externally visible method 'ExcelDxfFontBase.CreateNodes(XmlHelper, string)', validate parameter 'helper' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDxfNumberFormat" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dxf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dxf' in type name 'ExcelDxfNumberFormat'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CreateNodes(OfficeOpenXml.XmlHelper,System.String)" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfNumberFormat.cs" Line="89">In externally visible method 'ExcelDxfNumberFormat.CreateNodes(XmlHelper, string)', validate parameter 'helper' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NumFmtID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfNumberFormat.cs" Line="53">Correct the casing of 'ID' in member name 'ExcelDxfNumberFormat.NumFmtID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Fmt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfNumberFormat.cs" Line="53">Correct the spelling of 'Fmt' in member name 'ExcelDxfNumberFormat.NumFmtID' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfNumberFormat.cs" Line="53">Correct the spelling of 'Num' in member name 'ExcelDxfNumberFormat.NumFmtID' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelDxfStyleConditionalFormatting" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dxf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Dxf' in type name 'ExcelDxfStyleConditionalFormatting'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetBorderStyleEnum(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="65">Modify 'ExcelDxfStyleConditionalFormatting.GetBorderStyleEnum(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="58">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelDxfStyleConditionalFormatting.GetBorderStyleEnum(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="60">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelDxfStyleConditionalFormatting.GetBorderStyleEnum(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="59">Replace the call to 'string.operator ==(string, string)' in 'ExcelDxfStyleConditionalFormatting.GetBorderStyleEnum(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetColor(OfficeOpenXml.XmlHelperInstance,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="92">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelDxfStyleConditionalFormatting.GetColor(XmlHelperInstance, string)' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="92">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelDxfStyleConditionalFormatting.GetColor(XmlHelperInstance, string)' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="92">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelDxfStyleConditionalFormatting.GetColor(XmlHelperInstance, string)' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="92">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelDxfStyleConditionalFormatting.GetColor(XmlHelperInstance, string)' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="90">Replace the call to 'string.operator !=(string, string)' in 'ExcelDxfStyleConditionalFormatting.GetColor(XmlHelperInstance, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPatternTypeEnum(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="79">Modify 'ExcelDxfStyleConditionalFormatting.GetPatternTypeEnum(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="72">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelDxfStyleConditionalFormatting.GetPatternTypeEnum(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="74">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelDxfStyleConditionalFormatting.GetPatternTypeEnum(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="73">Replace the call to 'string.operator ==(string, string)' in 'ExcelDxfStyleConditionalFormatting.GetPatternTypeEnum(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUnderLineEnum(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="102">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelDxfStyleConditionalFormatting.GetUnderLineEnum(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="103">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelDxfStyleConditionalFormatting.GetUnderLineEnum(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Id()" Kind="Method" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\Dxf" File="ExcelDxfStyle.cs" Line="126">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelDxfStyleConditionalFormatting.Id.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.Style.XmlAccess">
       <Types>
        <Type Name="ExcelBorderItemXml" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetBorderStyle(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelBorderItemXml.cs" Line="72">Modify 'ExcelBorderItemXml.GetBorderStyle(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelBorderItemXml.cs" Line="65">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelBorderItemXml.GetBorderStyle(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelBorderItemXml.cs" Line="67">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelBorderItemXml.GetBorderStyle(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelBorderItemXml.cs" Line="66">Replace the call to 'string.operator ==(string, string)' in 'ExcelBorderItemXml.GetBorderStyle(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetBorderString(OfficeOpenXml.Style.ExcelBorderStyle)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelBorderItemXml.cs" Line="150">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelBorderItemXml.SetBorderString(ExcelBorderStyle)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelBorderItemXml.cs" Line="152">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelBorderItemXml.SetBorderString(ExcelBorderStyle)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelColorXml" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateXmlNode(System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelColorXml.cs" Line="190">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelColorXml.CreateXmlNode(XmlNode)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelColorXml.cs" Line="184">Replace the call to 'string.operator !=(string, string)' in 'ExcelColorXml.CreateXmlNode(XmlNode)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Indexed" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Indexed(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelColorXml.cs" Line="155">Method 'ExcelColorXml.Indexed.set(int)' passes 'Index out of range' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Rgb" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Rgb" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelColorXml.cs" Line="130">Correct the spelling of 'Rgb' in member name 'ExcelColorXml.Rgb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetColor(System.Drawing.Color)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelColorXml.cs" Line="173">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelColorXml.SetColor(Color)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelFillXml" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_backgroundColor" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelFillXml._backgroundColor' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_fillPatternType" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelFillXml._fillPatternType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_patternColor" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelFillXml._patternColor' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateXmlNode(System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="pattern" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFillXml.cs" Line="151">'ExcelFillXml.CreateXmlNode(XmlNode)' declares a variable, 'pattern', of type 'XmlNode', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPatternType(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFillXml.cs" Line="66">Modify 'ExcelFillXml.GetPatternType(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFillXml.cs" Line="59">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFillXml.GetPatternType(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFillXml.cs" Line="61">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelFillXml.GetPatternType(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFillXml.cs" Line="60">Replace the call to 'string.operator ==(string, string)' in 'ExcelFillXml.GetPatternType(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetPatternString(OfficeOpenXml.Style.ExcelFillStyle)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFillXml.cs" Line="168">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelFillXml.SetPatternString(ExcelFillStyle)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFillXml.cs" Line="170">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelFillXml.SetPatternString(ExcelFillStyle)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelFontXml" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFontXml.cs" Line="72">Replace the call to 'string.operator ==(string, string)' in 'ExcelFontXml.ExcelFontXml(XmlNamespaceManager, XmlNode)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateXmlNode(System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFontXml.cs" Line="314">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelFontXml.CreateXmlNode(XmlNode)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFontXml.cs" Line="325">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelFontXml.CreateXmlNode(XmlNode)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFontXml.cs" Line="317">Replace the call to 'string.operator !=(string, string)' in 'ExcelFontXml.CreateXmlNode(XmlNode)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFontXml.cs" Line="326">Replace the call to 'string.operator !=(string, string)' in 'ExcelFontXml.CreateXmlNode(XmlNode)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetFromFont(System.Drawing.Font)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Font" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFontXml.cs" Line="270">In member 'ExcelFontXml.SetFromFont(Font)', correct the casing of 'Font' in parameter name 'Font' by changing it to 'font'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFontXml.cs" Line="271">In externally visible method 'ExcelFontXml.SetFromFont(Font)', validate parameter 'Font' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnderLine" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnderLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFontXml.cs" Line="230">The compound word 'UnderLine' in member name 'ExcelFontXml.UnderLine' exists as a discrete term. If your usage is intended to be single word, case it as 'Underline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnderLineType" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnderLine" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelFontXml.cs" Line="245">The compound word 'UnderLine' in member name 'ExcelFontXml.UnderLineType' exists as a discrete term. If your usage is intended to be single word, case it as 'Underline' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelGradientFillXml" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Id()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelGradientFillXml.cs" Line="139">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelGradientFillXml.Id.get()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelGradientFillXml.cs" Line="139">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelGradientFillXml.Id.get()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelGradientFillXml.cs" Line="139">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelGradientFillXml.Id.get()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelGradientFillXml.cs" Line="139">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelGradientFillXml.Id.get()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelGradientFillXml.cs" Line="139">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelGradientFillXml.Id.get()' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelGradientFillXml.cs" Line="69">The property name 'ExcelGradientFillXml.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelNamedStyleXml" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateXmlNode(System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNamedStyleXml.cs" Line="139">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelNamedStyleXml.CreateXmlNode(XmlNode)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNamedStyleXml.cs" Line="140">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelNamedStyleXml.CreateXmlNode(XmlNode)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CustomBuildin" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Buildin" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNamedStyleXml.cs" Line="102">Correct the spelling of 'Buildin' in member name 'ExcelNamedStyleXml.CustomBuildin' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StyleXfId" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Xf" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNamedStyleXml.cs" Line="76">Correct the casing of 'Xf' in member name 'ExcelNamedStyleXml.StyleXfId' by changing it to 'XF'.</Issue>
            </Message>
            <Message Id="Xf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNamedStyleXml.cs" Line="76">Correct the spelling of 'Xf' in member name 'ExcelNamedStyleXml.StyleXfId' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelNumberFormatXml" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateXmlNode(System.Xml.XmlNode)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="175">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.CreateXmlNode(XmlNode)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNewID(System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="129">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelNumberFormatXml.GetNewID(int, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="135">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.GetNewID(int, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NumFmtId" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Fmt" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="99">Correct the spelling of 'Fmt' in member name 'ExcelNumberFormatXml.NumFmtId' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="99">Correct the spelling of 'Num' in member name 'ExcelNumberFormatXml.NumFmtId' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelNumberFormatXml+ExcelFormatTranslator" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="209">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.ExcelFormatTranslator.ExcelFormatTranslator(string, int)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FmtInt(System.Double,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="613">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelNumberFormatXml.ExcelFormatTranslator.FmtInt(double, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Double.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="614">Because the behavior of 'double.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.ExcelFormatTranslator.FmtInt(double, string)' with a call to 'double.ToString(string, IFormatProvider)'. If the result of 'double.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FormatFraction(System.Double)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="536">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.ExcelFormatTranslator.FormatFraction(double)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="536">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.ExcelFormatTranslator.FormatFraction(double)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="600">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.ExcelFormatTranslator.FormatFraction(double)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="608">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.ExcelFormatTranslator.FormatFraction(double)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="530">Replace the call to 'string.operator ==(string, string)' in 'ExcelNumberFormatXml.ExcelFormatTranslator.FormatFraction(double)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="530">Replace the call to 'string.operator ==(string, string)' in 'ExcelNumberFormatXml.ExcelFormatTranslator.FormatFraction(double)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToNetFormat(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="248">'ExcelNumberFormatXml.ExcelFormatTranslator.ToNetFormat(string, bool)' has a cyclomatic complexity of 66. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="248">'ExcelNumberFormatXml.ExcelFormatTranslator.ToNetFormat(string, bool)' has a maintainability index of 19. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="321">Modify 'ExcelNumberFormatXml.ExcelFormatTranslator.ToNetFormat(string, bool)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="fractionPos" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="258">'ExcelNumberFormatXml.ExcelFormatTranslator.ToNetFormat(string, bool)' declares a variable, 'fractionPos', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="306">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.ExcelFormatTranslator.ToNetFormat(string, bool)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="310">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.ExcelFormatTranslator.ToNetFormat(string, bool)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="359">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.ExcelFormatTranslator.ToNetFormat(string, bool)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="316">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelNumberFormatXml.ExcelFormatTranslator.ToNetFormat(string, bool)' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="454">Replace the call to 'string.operator !=(string, string)' in 'ExcelNumberFormatXml.ExcelFormatTranslator.ToNetFormat(string, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="494">Replace the call to 'string.operator !=(string, string)' in 'ExcelNumberFormatXml.ExcelFormatTranslator.ToNetFormat(string, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelNumberFormatXml.cs" Line="490">Replace the call to 'string.operator ==(string, string)' in 'ExcelNumberFormatXml.ExcelFormatTranslator.ToNetFormat(string, bool)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelXfs" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Xfs" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Xfs' in type name 'ExcelXfs'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CreateXmlNode(System.Xml.XmlNode,System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="818">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.CreateXmlNode(XmlNode, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="823">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.CreateXmlNode(XmlNode, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="828">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.CreateXmlNode(XmlNode, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="833">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.CreateXmlNode(XmlNode, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="838">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.CreateXmlNode(XmlNode, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="842">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.CreateXmlNode(XmlNode, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="844">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.CreateXmlNode(XmlNode, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="845">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.CreateXmlNode(XmlNode, bool)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHorizontalAlign(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="92">Modify 'ExcelXfs.GetHorizontalAlign(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="85">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelXfs.GetHorizontalAlign(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="87">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.GetHorizontalAlign(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="86">Replace the call to 'string.operator ==(string, string)' in 'ExcelXfs.GetHorizontalAlign(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetIdBorder(OfficeOpenXml.Style.eStyleClass,OfficeOpenXml.Style.eStyleProperty,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="565">'ExcelXfs.GetIdBorder(eStyleClass, eStyleProperty, object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="569">'ExcelXfs.GetIdBorder(eStyleClass, eStyleProperty, object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetIdFont(OfficeOpenXml.Style.eStyleProperty,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="798">'ExcelXfs.GetIdFont(eStyleProperty, object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="795">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.GetIdFont(eStyleProperty, object)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetIdNumberFormat(OfficeOpenXml.Style.eStyleProperty,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="761">'ExcelXfs.GetIdNumberFormat(eStyleProperty, object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Numberformat" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="761">Correct the spelling of the unrecognized token 'Numberformat' in the literal '"Invalid property for class Numberformat"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNewID(OfficeOpenXml.ExcelStyleCollection`1&lt;OfficeOpenXml.Style.XmlAccess.ExcelXfs&gt;,OfficeOpenXml.Style.StyleBase,OfficeOpenXml.Style.eStyleClass,OfficeOpenXml.Style.eStyleProperty,System.Object)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="518">'ExcelXfs.GetNewID(ExcelStyleCollection&lt;ExcelXfs&gt;, StyleBase, eStyleClass, eStyleProperty, object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetReadingOrder(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="72">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelXfs.GetReadingOrder(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetVerticalAlign(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="106">Modify 'ExcelXfs.GetVerticalAlign(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="99">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelXfs.GetVerticalAlign(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="101">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.GetVerticalAlign(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="100">Replace the call to 'string.operator ==(string, string)' in 'ExcelXfs.GetVerticalAlign(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_Id()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="420">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.Id.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="420">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.Id.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="420">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.Id.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="420">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.Id.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="420">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.Id.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="420">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.Id.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Numberformat" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Numberformat" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="232">Correct the spelling of 'Numberformat' in member name 'ExcelXfs.Numberformat' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RegisterEvent(OfficeOpenXml.Style.XmlAccess.ExcelXfs)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="412">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelXfs.RegisterEvent(ExcelXfs)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="xf" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="412">Parameter 'xf' of 'ExcelXfs.RegisterEvent(ExcelXfs)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetAlignString(System.Enum)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="852">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelXfs.SetAlignString(Enum)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="854">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelXfs.SetAlignString(Enum)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetBorderItem(OfficeOpenXml.Style.XmlAccess.ExcelBorderItemXml,OfficeOpenXml.Style.eStyleProperty,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="591">'ExcelXfs.SetBorderItem(ExcelBorderItemXml, eStyleProperty, object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="bordercolor" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="591">Correct the spelling of the unrecognized token 'bordercolor' in the literal '"Can\'t set bordercolor when style is not set."'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="582">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelXfs.SetBorderItem(ExcelBorderItemXml, eStyleProperty, object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Styles" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Styles(OfficeOpenXml.ExcelStyles)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="225">'ExcelXfs.Styles.set(ExcelStyles)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#XfId" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Xf" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="130">Correct the casing of 'Xf' in member name 'ExcelXfs.XfId' by changing it to 'XF'.</Issue>
            </Message>
            <Message Id="Xf" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Style\XmlAccess" File="ExcelXfsXml.cs" Line="130">Correct the spelling of 'Xf' in member name 'ExcelXfs.XfId' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.Table">
       <Types>
        <Type Name="ExcelTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AutoFilterAddress" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_AutoFilterAddress()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="355">Replace the call to 'string.operator ==(string, string)' in 'ExcelTable.AutoFilterAddress.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#cleanDisplayName(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="192">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelTable.cleanDisplayName(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DataCellStyleName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_DataCellStyleName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="579">'ExcelTable.DataCellStyleName.set(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="579">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelTable.DataCellStyleName.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetStartXml(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="159">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelTable.GetStartXml(string, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="162">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelTable.GetStartXml(string, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="174">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelTable.GetStartXml(string, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="183">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelTable.GetStartXml(string, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="154">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ExcelTable.GetStartXml(string, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HeaderRowCellStyle" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_HeaderRowCellStyle(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="606">'ExcelTable.HeaderRowCellStyle.set(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="606">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelTable.HeaderRowCellStyle.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_Id(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="230">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelTable.Id.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ShowFilter" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_ShowFilter(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="ShowHeader" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="405">Correct the spelling of the unrecognized token 'ShowHeader' in the literal '"Filter can only be applied when ShowHeader is set to true"'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ShowHeader" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_ShowHeader(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="327">'ExcelTable.ShowHeader.set(bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="ShowHeader-property" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="327">Correct the spelling of the unrecognized token 'ShowHeader-property' in the literal '"Cant set ShowHeader-property. Table has too few rows"'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#StyleName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_StyleName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="463">Modify 'ExcelTable.StyleName.set(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
              <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="457">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelTable.StyleName.set(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="457">In externally visible method 'ExcelTable.StyleName.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#TableXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="205">Modify member 'ExcelTable.TableXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TotalsRowCellStyle" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_TotalsRowCellStyle(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="555">'ExcelTable.TotalsRowCellStyle.set(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="555">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelTable.TotalsRowCellStyle.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#WorkSheet" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="WorkSheet" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTable.cs" Line="266">The compound word 'WorkSheet' in member name 'ExcelTable.WorkSheet' exists as a discrete term. If your usage is intended to be single word, case it as 'Worksheet' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelTableCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="pck" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableCollection.cs" Line="49">'ExcelTableCollection.ExcelTableCollection(ExcelWorksheet)' declares a variable, 'pck', of type 'ZipPackage', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(OfficeOpenXml.ExcelAddressBase,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableCollection.cs" Line="78">In member 'ExcelTableCollection.Add(ExcelAddressBase, string)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="Range" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableCollection.cs" Line="78">In member 'ExcelTableCollection.Add(ExcelAddressBase, string)', correct the casing of 'Range' in parameter name 'Range' by changing it to 'range'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableCollection.cs" Line="91">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelTableCollection.Add(ExcelAddressBase, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFromRange(OfficeOpenXml.ExcelRangeBase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Range" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableCollection.cs" Line="123">In member 'ExcelTableCollection.GetFromRange(ExcelRangeBase)', correct the casing of 'Range' in parameter name 'Range' by changing it to 'range'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableCollection.cs" Line="123">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelTableCollection.GetFromRange(ExcelRangeBase)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableCollection.cs" Line="124">In externally visible method 'ExcelTableCollection.GetFromRange(ExcelRangeBase)', validate parameter 'Range' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNewTableName()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableCollection.cs" Line="103">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelTableCollection.GetNewTableName()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableCollection.cs" Line="141">In member 'ExcelTableCollection.this[int]', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Item(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableCollection.cs" Line="144">Method 'ExcelTableCollection.this.get(int)' passes 'Table index out of range' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableCollection.cs" Line="157">In member 'ExcelTableCollection.this[string]', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelTableColumn" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CalculatedColumnFormula" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_CalculatedColumnFormula(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="227">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelTableColumn.CalculatedColumnFormula.set(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="227">In externally visible method 'ExcelTableColumn.CalculatedColumnFormula.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#DataCellStyleName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_DataCellStyleName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="197">'ExcelTableColumn.DataCellStyleName.set(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="197">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelTableColumn.DataCellStyleName.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Id(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="79">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelTableColumn.Id.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Name" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Name()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="106">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelTableColumn.Name.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#TotalsRowFormula" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_TotalsRowFormula(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="177">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelTableColumn.TotalsRowFormula.set(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="177">In externally visible method 'ExcelTableColumn.TotalsRowFormula.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#TotalsRowFunction" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_TotalsRowFunction()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="140">Replace the call to 'string.operator ==(string, string)' in 'ExcelTableColumn.TotalsRowFunction.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_TotalsRowFunction(OfficeOpenXml.Table.RowFunctions)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="153">'ExcelTableColumn.TotalsRowFunction.set(RowFunctions)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="TotalsRowFormula-property" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="153">Correct the spelling of the unrecognized token 'TotalsRowFormula-property' in the literal '"Use the TotalsRowFormula-property to set a custom table formula"'.</Issue>
              </Message>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumn.cs" Line="156">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelTableColumn.TotalsRowFunction.set(RowFunctions)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelTableColumnCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.Table.ExcelTable)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumnCollection.cs" Line="49">In externally visible method 'ExcelTableColumnCollection.ExcelTableColumnCollection(ExcelTable)', validate parameter 'table' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumnCollection.cs" Line="81">In member 'ExcelTableColumnCollection.this[int]', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Item(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumnCollection.cs" Line="84">Method 'ExcelTableColumnCollection.this.get(int)' passes 'Column index out of range' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumnCollection.cs" Line="97">In member 'ExcelTableColumnCollection.this[string]', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.Generic.IEnumerable`1&lt;OfficeOpenXml.Table.ExcelTableColumn&gt;.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumnCollection.cs" Line="110">Make 'ExcelTableColumnCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable&lt;ExcelTableColumn&gt;.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#System.Collections.IEnumerable.GetEnumerator()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table" File="ExcelTableColumnCollection.cs" Line="115">Make 'ExcelTableColumnCollection' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IEnumerable.GetEnumerator()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RowFunctions" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'RowFunctions' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CountNums" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Nums" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Nums' in member name 'RowFunctions.CountNums' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StdDev" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in member name 'RowFunctions.StdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TableStyles" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'TableStyles' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.Table.PivotTable">
       <Types>
        <Type Name="DataFieldFunctions" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'DataFieldFunctions' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CountNums" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Nums" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Nums' in member name 'DataFieldFunctions.CountNums' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StdDev" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in member name 'DataFieldFunctions.StdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StdDevP" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in member name 'DataFieldFunctions.StdDevP' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="eDateGroupBy" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If enumeration name 'eDateGroupBy' is singular, change it to a plural form.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eDateGroupBy' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ePivotFieldAxis" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'ePivotFieldAxis' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eShowDataAs" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eShowDataAs' by changing it to 'E'.</Issue>
          </Message>
          <Message TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Error">If the name 'eShowDataAs' is plural, change it to its singular form.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eSortType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eSortType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eSourceType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eSourceType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eSubTotalFunctions" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="SubTotal" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'SubTotal' in type name 'eSubTotalFunctions' exists as a discrete term. If your usage is intended to be single word, case it as 'Subtotal'.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eSubTotalFunctions' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Avg" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Avg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Avg' in member name 'eSubTotalFunctions.Avg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StdDev" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in member name 'eSubTotalFunctions.StdDev' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StdDevP" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Std" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Std' in member name 'eSubTotalFunctions.StdDevP' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotCacheDefinition" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CacheDefinitionXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotCacheDefinition.cs" Line="126">Modify member 'ExcelPivotCacheDefinition.CacheDefinitionXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CacheSource" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CacheSource()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotCacheDefinition.cs" Line="225">Replace the call to 'string.operator ==(string, string)' in 'ExcelPivotCacheDefinition.CacheSource.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetStartXml(OfficeOpenXml.ExcelRangeBase)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotCacheDefinition.cs" Line="242">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotCacheDefinition.GetStartXml(ExcelRangeBase)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotCacheDefinition.cs" Line="248">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotCacheDefinition.GetStartXml(ExcelRangeBase)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotCacheDefinition.cs" Line="252">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotCacheDefinition.GetStartXml(ExcelRangeBase)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotCacheDefinition.cs" Line="240">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotCacheDefinition.GetStartXml(ExcelRangeBase)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotCacheDefinition.cs" Line="246">Replace the call to 'string.operator ==(string, string)' in 'ExcelPivotCacheDefinition.GetStartXml(ExcelRangeBase)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SourceRange" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_SourceRange()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotCacheDefinition.cs" Line="194">'ExcelPivotCacheDefinition.SourceRange.get()' creates an exception of type 'ArgumentException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_SourceRange(OfficeOpenXml.ExcelRangeBase)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotCacheDefinition.cs" Line="201">In externally visible method 'ExcelPivotCacheDefinition.SourceRange.set(ExcelRangeBase)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotTable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelWorksheet,OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.ExcelRangeBase,System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="149">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.ExcelPivotTable(ExcelWorksheet, ExcelAddressBase, ExcelRangeBase, string, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CacheID" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_CacheID(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="942">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.CacheID.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#cleanDisplayName(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="283">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelPivotTable.cleanDisplayName(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FirstDataCol" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_FirstDataCol(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="799">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.FirstDataCol.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#FirstDataRow" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_FirstDataRow(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="784">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.FirstDataRow.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#FirstHeaderRow" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_FirstHeaderRow(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="769">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.FirstHeaderRow.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetStartXml(System.String,System.Int32,OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.ExcelAddressBase)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="190">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelPivotTable.GetStartXml(string, int, ExcelAddressBase, ExcelAddressBase)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="193">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.GetStartXml(string, int, ExcelAddressBase, ExcelAddressBase)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="194">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.GetStartXml(string, int, ExcelAddressBase, ExcelAddressBase)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="191">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.GetStartXml(string, int, ExcelAddressBase, ExcelAddressBase)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Id" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_Id(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="236">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.Id.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Indent" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Indent(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="642">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.Indent.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#PageWrap" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_PageWrap(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="598">'ExcelPivotTable.PageWrap.set(int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="600">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.PageWrap.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#PivotTableXml" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Xml.XmlNode" TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Xml" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="213">Modify member 'ExcelPivotTable.PivotTableXml' so that it no longer exposes the concrete type 'XmlDocument'. Use IXPathNavigable to represent XML data sources.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowCalcMember" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Calc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="408">Correct the spelling of 'Calc' in member name 'ExcelPivotTable.ShowCalcMember' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StyleName" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_StyleName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="895">Modify 'ExcelPivotTable.StyleName.set(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
              </Message>
              <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="889">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTable.StyleName.set(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="889">In externally visible method 'ExcelPivotTable.StyleName.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#WorkSheet" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="WorkSheet" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTable.cs" Line="293">The compound word 'WorkSheet' in member name 'ExcelPivotTable.WorkSheet' exists as a discrete term. If your usage is intended to be single word, case it as 'Worksheet' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotTableCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="pck" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableCollection.cs" Line="49">'ExcelPivotTableCollection.ExcelPivotTableCollection(ExcelWorksheet)' declares a variable, 'pck', of type 'ZipPackage', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(OfficeOpenXml.ExcelAddressBase,OfficeOpenXml.ExcelRangeBase,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableCollection.cs" Line="88">'ExcelPivotTableCollection.Add(ExcelAddressBase, ExcelRangeBase, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableCollection.cs" Line="81">In member 'ExcelPivotTableCollection.Add(ExcelAddressBase, ExcelRangeBase, string)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="Range" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableCollection.cs" Line="81">In member 'ExcelPivotTableCollection.Add(ExcelAddressBase, ExcelRangeBase, string)', correct the casing of 'Range' in parameter name 'Range' by changing it to 'range'.</Issue>
            </Message>
            <Message Id="Source" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableCollection.cs" Line="81">In member 'ExcelPivotTableCollection.Add(ExcelAddressBase, ExcelRangeBase, string)', correct the casing of 'Source' in parameter name 'Source' by changing it to 'source'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableCollection.cs" Line="98">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableCollection.Add(ExcelAddressBase, ExcelRangeBase, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableCollection.cs" Line="86">In externally visible method 'ExcelPivotTableCollection.Add(ExcelAddressBase, ExcelRangeBase, string)', validate parameter 'Range' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNewTableName()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableCollection.cs" Line="110">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableCollection.GetNewTableName()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableCollection.cs" Line="129">In member 'ExcelPivotTableCollection.this[int]', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Item(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableCollection.cs" Line="132">Method 'ExcelPivotTableCollection.this.get(int)' passes 'PivotTable index out of range' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableCollection.cs" Line="145">In member 'ExcelPivotTableCollection.this[string]', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotTableDataField" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BaseField" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_BaseField(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableDataField.cs" Line="108">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableDataField.BaseField.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#BaseItem" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_BaseItem(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableDataField.cs" Line="122">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableDataField.BaseItem.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Function" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Function()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableDataField.cs" Line="176">Replace the call to 'string.operator ==(string, string)' in 'ExcelPivotTableDataField.Function.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Function(OfficeOpenXml.Table.PivotTable.DataFieldFunctions)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableDataField.cs" Line="203">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableDataField.Function.set(DataFieldFunctions)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Index" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Index(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableDataField.cs" Line="76">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableDataField.Index.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Name" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Name(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="datafield" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableDataField.cs" Line="92">Correct the spelling of the unrecognized token 'datafield' in the literal '"Duplicate datafield name"'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#NumFmtId" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_NumFmtId(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableDataField.cs" Line="136">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableDataField.NumFmtId.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotTableDataFieldCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="269">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableDataFieldCollection.Add(ExcelPivotTableField)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="261">In externally visible method 'ExcelPivotTableDataFieldCollection.Add(ExcelPivotTableField)', validate parameter 'field' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExistsDfName(System.String,OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="298">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableDataFieldCollection.ExistsDfName(string, ExcelPivotTableDataField)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="301">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableDataFieldCollection.ExistsDfName(string, ExcelPivotTableDataField)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="301">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableDataFieldCollection.ExistsDfName(string, ExcelPivotTableDataField)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="315">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableDataFieldCollection.Remove(ExcelPivotTableDataField)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="315">In externally visible method 'ExcelPivotTableDataFieldCollection.Remove(ExcelPivotTableDataField)', validate parameter 'dataField' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateDupName(OfficeOpenXml.Table.PivotTable.ExcelPivotTableDataField)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="289">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableDataFieldCollection.ValidateDupName(ExcelPivotTableDataField)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotTableField" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddDateGrouping(OfficeOpenXml.Table.PivotTable.eDateGroupBy,System.DateTime,System.DateTime,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="921">Method 'ExcelPivotTableField.AddDateGrouping(eDateGroupBy, DateTime, DateTime, int)' passes 'Group interval is out of range' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="967">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AddDateGrouping(eDateGroupBy, DateTime, DateTime, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="970">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AddDateGrouping(eDateGroupBy, DateTime, DateTime, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddDateGroupItems(OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldGroup,OfficeOpenXml.Table.PivotTable.eDateGroupBy,System.DateTime,System.DateTime,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="806">'ExcelPivotTableField.AddDateGroupItems(ExcelPivotTableFieldGroup, eDateGroupBy, DateTime, DateTime, int)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="756">Because the behavior of 'DateTime.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AddDateGroupItems(ExcelPivotTableFieldGroup, eDateGroupBy, DateTime, DateTime, int)' with a call to 'DateTime.ToString(string, IFormatProvider)'. If the result of 'DateTime.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="767">Because the behavior of 'DateTime.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AddDateGroupItems(ExcelPivotTableFieldGroup, eDateGroupBy, DateTime, DateTime, int)' with a call to 'DateTime.ToString(string, IFormatProvider)'. If the result of 'DateTime.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="800">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AddDateGroupItems(ExcelPivotTableFieldGroup, eDateGroupBy, DateTime, DateTime, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddField(OfficeOpenXml.Table.PivotTable.eDateGroupBy,System.DateTime,System.DateTime,System.Boolean&amp;,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="1031">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AddField(eDateGroupBy, DateTime, DateTime, ref bool, int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFieldItems(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="718">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AddFieldItems(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="729">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AddFieldItems(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddGroupItem(System.Xml.XmlElement,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="823">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelPivotTableField.AddGroupItem(XmlElement, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddNumericGrouping(System.Double,System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="End" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="885">In member 'ExcelPivotTableField.AddNumericGrouping(double, double, double)', correct the casing of 'End' in parameter name 'End' by changing it to 'end'.</Issue>
            </Message>
            <Message Id="Interval" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="885">In member 'ExcelPivotTableField.AddNumericGrouping(double, double, double)', correct the casing of 'Interval' in parameter name 'Interval' by changing it to 'interval'.</Issue>
            </Message>
            <Message Id="Start" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="885">In member 'ExcelPivotTableField.AddNumericGrouping(double, double, double)', correct the casing of 'Start' in parameter name 'Start' by changing it to 'start'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddNumericGroupItems(OfficeOpenXml.Table.PivotTable.ExcelPivotTableFieldNumericGroup,System.Double,System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="686">'ExcelPivotTableField.AddNumericGroupItems(ExcelPivotTableFieldNumericGroup, double, double, double)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="690">'ExcelPivotTableField.AddNumericGroupItems(ExcelPivotTableFieldNumericGroup, double, double, double)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="positiv" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="686">Correct the spelling of the unrecognized token 'positiv' in the literal '"The interval must be a positiv"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="702">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AddNumericGroupItems(ExcelPivotTableFieldNumericGroup, double, double, double)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddTimeSerie(System.Int32,System.Xml.XmlElement)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="818">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AddTimeSerie(int, XmlElement)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AppendField(System.Xml.XmlNode,System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="581">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelPivotTableField.AppendField(XmlNode, int, string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="596">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AppendField(XmlNode, int, string, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="603">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.AppendField(XmlNode, int, string, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsColumnField" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_IsColumnField()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="471">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.IsColumnField.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_IsColumnField(System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="496">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.IsColumnField.set(bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#IsPageField" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_IsPageField(System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="542">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.IsPageField.set(bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#IsRowField" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_IsRowField()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="431">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.IsRowField.get()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_IsRowField(System.Boolean)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="456">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.IsRowField.set(bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Items" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Items()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="843">Replace the call to 'string.operator ==(string, string)' in 'ExcelPivotTableField.Items.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Name" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Name()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="202">Replace the call to 'string.operator ==(string, string)' in 'ExcelPivotTableField.Name.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SetDateGroup(OfficeOpenXml.Table.PivotTable.eDateGroupBy,System.DateTime,System.DateTime,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="637">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.SetDateGroup(eDateGroupBy, DateTime, DateTime, int)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="637">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.SetDateGroup(eDateGroupBy, DateTime, DateTime, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetNumericGroup(System.Double,System.Double,System.Double)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="674">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.SetNumericGroup(double, double, double)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Sort" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Sort()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="280">Replace the call to 'string.operator ==(string, string)' in 'ExcelPivotTableField.Sort.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_Sort(OfficeOpenXml.Table.PivotTable.eSortType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="290">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.Sort.set(eSortType)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SubTotalFunctions" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SubTotal" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="314">The compound word 'SubTotal' in member name 'ExcelPivotTableField.SubTotalFunctions' exists as a discrete term. If your usage is intended to be single word, case it as 'Subtotal' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_SubTotalFunctions()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="326">'ExcelPivotTableField.SubTotalFunctions.get()' creates an exception of type 'ArgumentException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_SubTotalFunctions(OfficeOpenXml.Table.PivotTable.eSubTotalFunctions)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Char.ToLower(System.Char)" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="370">Because the behavior of 'char.ToLower(char)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.SubTotalFunctions.set(eSubTotalFunctions)' with a call to 'char.ToLower(char, CultureInfo)'. If the result of 'char.ToLower(char, CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="377">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableField.SubTotalFunctions.set(eSubTotalFunctions)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ValidateGrouping()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="983">'ExcelPivotTableField.ValidateGrouping()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableField.cs" Line="989">'ExcelPivotTableField.ValidateGrouping()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotTableFieldCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(OfficeOpenXml.Table.PivotTable.ExcelPivotTable,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="topNode" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="90">Parameter 'topNode' of 'ExcelPivotTableFieldCollection.ExcelPivotTableFieldCollection(ExcelPivotTable, string)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDateGroupField(OfficeOpenXml.Table.PivotTable.eDateGroupBy)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Group" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="119">In member 'ExcelPivotTableFieldCollection.GetDateGroupField(eDateGroupBy)', correct the casing of 'Group' in parameter name 'GroupBy' by changing it to 'group'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNumericGroupField()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="134">Change 'ExcelPivotTableFieldCollection.GetNumericGroupField()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotTableFieldCollectionBase`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ExcelPivotTableFieldCollectionBase&lt;T&gt;' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#_table" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelPivotTableFieldCollectionBase&lt;T&gt;._table' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="78">In member 'ExcelPivotTableFieldCollectionBase&lt;T&gt;.this[int]', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Item(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="81">Method 'ExcelPivotTableFieldCollectionBase&lt;T&gt;.this.get(int)' passes 'Index out of range' as the 'paramName' argument to a 'ArgumentOutOfRangeException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotTableFieldDateGroup" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GroupBy" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_GroupBy()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldGroup.cs" Line="76">'ExcelPivotTableFieldDateGroup.GroupBy.get()' creates an exception of type 'Exception', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
              <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
               <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldGroup.cs" Line="76">'ExcelPivotTableFieldDateGroup.GroupBy.get()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
              </Message>
              <Message Id="Groupby" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldGroup.cs" Line="76">Correct the spelling of the unrecognized token 'Groupby' in the literal '"Invalid date Groupby"'.</Issue>
              </Message>
              <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldGroup.cs" Line="70">Replace the call to 'string.operator !=(string, string)' in 'ExcelPivotTableFieldDateGroup.GroupBy.get()' with a call to 'String.IsNullOrEmpty'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_GroupBy(OfficeOpenXml.Table.PivotTable.eDateGroupBy)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldGroup.cs" Line="80">'ExcelPivotTableFieldDateGroup.GroupBy.set(eDateGroupBy)' appears to have no upstream public or protected callers.</Issue>
              </Message>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldGroup.cs" Line="81">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableFieldDateGroup.GroupBy.set(eDateGroupBy)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotTableFieldNumericGroup" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#End" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_End(System.Double)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldGroup.cs" Line="140">'ExcelPivotTableFieldNumericGroup.End.set(double)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Interval" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Interval(System.Double)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldGroup.cs" Line="155">'ExcelPivotTableFieldNumericGroup.Interval.set(double)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Start" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Start(System.Double)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldGroup.cs" Line="125">'ExcelPivotTableFieldNumericGroup.Start.set(double)' appears to have no upstream public or protected callers.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotTablePageFieldSettings" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Xml.XmlNamespaceManager,System.Xml.XmlNode,OfficeOpenXml.Table.PivotTable.ExcelPivotTableField,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="index" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTablePageFieldSettings.cs" Line="46">Parameter 'index' of 'ExcelPivotTablePageFieldSettings.ExcelPivotTablePageFieldSettings(XmlNamespaceManager, XmlNode, ExcelPivotTableField, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTablePageFieldSettings.cs" Line="48">Replace the call to 'string.operator ==(string, string)' in 'ExcelPivotTablePageFieldSettings.ExcelPivotTablePageFieldSettings(XmlNamespaceManager, XmlNode, ExcelPivotTableField, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_field" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelPivotTablePageFieldSettings._field' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Hier" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_Hier(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTablePageFieldSettings.cs" Line="114">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTablePageFieldSettings.Hier.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Index" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_Index(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTablePageFieldSettings.cs" Line="62">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTablePageFieldSettings.Index.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#NumFmtId" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#set_NumFmtId(System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTablePageFieldSettings.cs" Line="103">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTablePageFieldSettings.NumFmtId.set(int)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelPivotTableRowColumnFieldCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Field" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="163">In member 'ExcelPivotTableRowColumnFieldCollection.Add(ExcelPivotTableField)', correct the casing of 'Field' in parameter name 'Field' by changing it to 'field'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Field" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="222">In member 'ExcelPivotTableRowColumnFieldCollection.Remove(ExcelPivotTableField)', correct the casing of 'Field' in parameter name 'Field' by changing it to 'field'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveAt(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Reserved" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="238">'ExcelPivotTableRowColumnFieldCollection.RemoveAt(int)' creates an exception of type 'IndexOutOfRangeException', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="235">In member 'ExcelPivotTableRowColumnFieldCollection.RemoveAt(int)', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetFlag(OfficeOpenXml.Table.PivotTable.ExcelPivotTableField,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="187">'ExcelPivotTableRowColumnFieldCollection.SetFlag(ExcelPivotTableField, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="195">'ExcelPivotTableRowColumnFieldCollection.SetFlag(ExcelPivotTableField, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="203">'ExcelPivotTableRowColumnFieldCollection.SetFlag(ExcelPivotTableField, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="207">'ExcelPivotTableRowColumnFieldCollection.SetFlag(ExcelPivotTableField, bool)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="ColumnFields" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="195">Correct the spelling of the unrecognized token 'ColumnFields' in the literal '"This field is a row or page field. Can\'t add it to the ColumnFields collection"'.</Issue>
            </Message>
            <Message Id="Currenct" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="207">Correct the spelling of the unrecognized token 'Currenct' in the literal '"A pivot table with page fields must be located above row 3. Currenct location is..."'.</Issue>
            </Message>
            <Message Id="PageFields" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="203">Correct the spelling of the unrecognized token 'PageFields' in the literal '"Field is a column or row field. Can\'t add it to the PageFields collection"'.</Issue>
            </Message>
            <Message Id="RowFields" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="187">Correct the spelling of the unrecognized token 'RowFields' in the literal '"This field is a column or page field. Can\'t add it to the RowFields collection"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Table\PivotTable" File="ExcelPivotTableFieldCollection.cs" Line="207">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'ExcelPivotTableRowColumnFieldCollection.SetFlag(ExcelPivotTableField, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.Utils">
       <Types>
        <Type Name="AddressUtility" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddRowNumbersToEntireColumnRange(System.String&amp;,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="AddressUtility.cs" Line="24">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'AddressUtility.AddRowNumbersToEntireColumnRange(ref string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="AddressUtility.cs" Line="26">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'AddressUtility.AddRowNumbersToEntireColumnRange(ref string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ArgumentExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#IsInRange`1(OfficeOpenXml.Utils.IArgument`1&lt;!!0&gt;,!!0,!!0,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="ArgumentExtensions.cs" Line="89">In externally visible method 'ArgumentExtensions.IsInRange&lt;T&gt;(this IArgument&lt;T&gt;, T, T, string)', validate parameter 'argument' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNotNull`1(OfficeOpenXml.Utils.IArgument`1&lt;!!0&gt;,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="ArgumentExtensions.cs" Line="57">In externally visible method 'ArgumentExtensions.IsNotNull&lt;T&gt;(this IArgument&lt;T&gt;, string)', validate parameter 'argument' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNotNullOrEmpty(OfficeOpenXml.Utils.IArgument`1&lt;System.String&gt;,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="ArgumentExtensions.cs" Line="71">In externally visible method 'ArgumentExtensions.IsNotNullOrEmpty(this IArgument&lt;string&gt;, string)', validate parameter 'argument' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CompoundDocument" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#CompressChunk(System.Byte[],System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="offsetMask" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="199">'CompoundDocument.CompressChunk(byte[], ref int)' declares a variable, 'offsetMask', of type 'ushort', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompressPart(System.Byte[])" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="121">In method 'CompoundDocument.CompressPart(byte[])', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateILockBytesOnHGlobal(System.IntPtr,System.Boolean,OfficeOpenXml.Utils.CompoundDocument+ILockBytes&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Warning">Add the MarshalAsAttribute to parameter 'fDeleteOnRelease' of P/Invoke 'CompoundDocument.CreateILockBytesOnHGlobal(IntPtr, bool, out CompoundDocument.ILockBytes)'. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'CompoundDocument.CreateILockBytesOnHGlobal(IntPtr, bool, out CompoundDocument.ILockBytes)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeSafeCriticalFxCopRule" Category="Microsoft.Security" CheckId="CA5122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Warning">P/Invoke method 'CompoundDocument.CreateILockBytesOnHGlobal(IntPtr, bool, out CompoundDocument.ILockBytes)' is marked safe-critical.  Since P/Invokes may only be called by critical code, this declaration should either be marked as security critical, or have its annotation removed entirely to avoid being misleading.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateStreams(OfficeOpenXml.Utils.CompoundDocument+StoragePart,OfficeOpenXml.Utils.CompoundDocument+IStorage)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="730">The 'this' parameter (or 'Me' in Visual Basic) of 'CompoundDocument.CreateStreams(CompoundDocument.StoragePart, CompoundDocument.IStorage)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DecompressPart(System.Byte[],System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="244">In method 'CompoundDocument.DecompressPart(byte[], int)', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetChunk(System.Byte[],System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="a" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="265">'CompoundDocument.GetChunk(byte[], ref int)' declares a variable, 'a', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetLockbyte(System.IO.MemoryStream)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="568">'CompoundDocument.GetLockbyte(MemoryStream)' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'CompoundDocument.GetLockbyte(MemoryStream)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, string)'</Issue>
            </Message>
            <Message Id="iret" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="570">'CompoundDocument.GetLockbyte(MemoryStream)' declares a variable, 'iret', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetOleStream(OfficeOpenXml.Utils.CompoundDocument+IStorage,System.Runtime.InteropServices.ComTypes.STATSTG)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.CreateVBAProject()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.VbaProject.get()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool, string)'</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="664">The 'this' parameter (or 'Me' in Visual Basic) of 'CompoundDocument.GetOleStream(CompoundDocument.IStorage, STATSTG)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Read(OfficeOpenXml.Utils.CompoundDocument+ILockBytes)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.CreateVBAProject()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.VbaProject.get()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="90">'CompoundDocument.Read(CompoundDocument.ILockBytes)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool, string)'</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="109">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'CompoundDocument.Read(CompoundDocument.ILockBytes)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Read(System.Byte[])" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.CreateVBAProject()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.VbaProject.get()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.CreateVBAProject()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.VbaProject.get()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.Copy(byte[], int, IntPtr, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(byte[], int, IntPtr, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.CreateVBAProject()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.VbaProject.get()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="76">'CompoundDocument.Read(byte[])' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool, string)'</Issue>
            </Message>
            <Message Id="iret" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="78">'CompoundDocument.Read(byte[])' declares a variable, 'iret', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadParts(OfficeOpenXml.Utils.CompoundDocument+IStorage,OfficeOpenXml.Utils.CompoundDocument+StoragePart)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream, Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(MemoryStream, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.Load(Stream, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.CreateVBAProject()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(byte[])'&#xD;&#xA;   -&gt;'ExcelVbaProject.GetProject()'&#xD;&#xA;   -&gt;'ExcelVbaProject.ExcelVbaProject(ExcelWorkbook)'&#xD;&#xA;   -&gt;'ExcelWorkbook.VbaProject.get()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.ConstructNewFile(Stream, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, FileInfo, string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="582">'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.ReadParts(CompoundDocument.IStorage, CompoundDocument.StoragePart)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(CompoundDocument.ILockBytes)'&#xD;&#xA;   -&gt;'CompoundDocument.Read(byte[])'&#xD;&#xA;   -&gt;'CompoundDocument.Read(FileInfo)'&#xD;&#xA;   -&gt;'CompoundDocument.CompoundDocument(FileInfo)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.DecryptPackage(FileInfo, ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.CreateFromTemplate(FileInfo, string)'&#xD;&#xA;   -&gt;'ExcelPackage.ExcelPackage(FileInfo, bool, string)'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.SaveAs(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.AllocHGlobal(int)' which has a LinkDemand. By making this call, 'Marshal.AllocHGlobal(int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'ExcelVbaProject.Save()'&#xD;&#xA;   -&gt;'ExcelWorkbook.Save()'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.Copy(IntPtr, byte[], int, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(IntPtr, byte[], int, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.Copy(IntPtr, byte[], int, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(IntPtr, byte[], int, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.Copy(IntPtr, byte[], int, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(IntPtr, byte[], int, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.Copy(IntPtr, byte[], int, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(IntPtr, byte[], int, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.Copy(IntPtr, byte[], int, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(IntPtr, byte[], int, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.SaveAs(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.Copy(IntPtr, byte[], int, int)' which has a LinkDemand. By making this call, 'Marshal.Copy(IntPtr, byte[], int, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'ExcelVbaProject.Save()'&#xD;&#xA;   -&gt;'ExcelWorkbook.Save()'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.SaveAs(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.FreeHGlobal(IntPtr)' which has a LinkDemand. By making this call, 'Marshal.FreeHGlobal(IntPtr)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'ExcelVbaProject.Save()'&#xD;&#xA;   -&gt;'ExcelWorkbook.Save()'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(string)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.GetAsByteArray(bool)'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackageAgile(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'EncryptedPackageHandler.EncryptPackage(byte[], ExcelEncryption)'&#xD;&#xA;   -&gt;'ExcelPackage.SaveAs(Stream)'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="679">'CompoundDocument.Save()' calls into 'Marshal.ReleaseComObject(object)' which has a LinkDemand. By making this call, 'Marshal.ReleaseComObject(object)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'CompoundDocument.Save()'&#xD;&#xA;   -&gt;'ExcelVbaProject.Save()'&#xD;&#xA;   -&gt;'ExcelWorkbook.Save()'&#xD;&#xA;   -&gt;'ExcelPackage.Save()'</Issue>
            </Message>
            <Message Id="iret" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="CompoundDocument.cs" Line="681">'CompoundDocument.Save()' declares a variable, 'iret', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StgCreateDocfileOnILockBytes(OfficeOpenXml.Utils.CompoundDocument+ILockBytes,OfficeOpenXml.Utils.CompoundDocument+STGM,System.Int32,OfficeOpenXml.Utils.CompoundDocument+IStorage&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'CompoundDocument.StgCreateDocfileOnILockBytes(CompoundDocument.ILockBytes, CompoundDocument.STGM, int, out CompoundDocument.IStorage)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeSafeCriticalFxCopRule" Category="Microsoft.Security" CheckId="CA5122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Warning">P/Invoke method 'CompoundDocument.StgCreateDocfileOnILockBytes(CompoundDocument.ILockBytes, CompoundDocument.STGM, int, out CompoundDocument.IStorage)' is marked safe-critical.  Since P/Invokes may only be called by critical code, this declaration should either be marked as security critical, or have its annotation removed entirely to avoid being misleading.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StgIsStorageFile(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'CompoundDocument.StgIsStorageFile(string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeSafeCriticalFxCopRule" Category="Microsoft.Security" CheckId="CA5122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Warning">P/Invoke method 'CompoundDocument.StgIsStorageFile(string)' is marked safe-critical.  Since P/Invokes may only be called by critical code, this declaration should either be marked as security critical, or have its annotation removed entirely to avoid being misleading.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StgIsStorageILockBytes(OfficeOpenXml.Utils.CompoundDocument+ILockBytes)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'CompoundDocument.StgIsStorageILockBytes(CompoundDocument.ILockBytes)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeSafeCriticalFxCopRule" Category="Microsoft.Security" CheckId="CA5122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Warning">P/Invoke method 'CompoundDocument.StgIsStorageILockBytes(CompoundDocument.ILockBytes)' is marked safe-critical.  Since P/Invokes may only be called by critical code, this declaration should either be marked as security critical, or have its annotation removed entirely to avoid being misleading.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StgOpenStorage(System.String,OfficeOpenXml.Utils.CompoundDocument+IStorage,OfficeOpenXml.Utils.CompoundDocument+STGM,System.IntPtr,System.UInt32,OfficeOpenXml.Utils.CompoundDocument+IStorage&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">'CompoundDocument.StgOpenStorage(string, CompoundDocument.IStorage, CompoundDocument.STGM, IntPtr, uint, out CompoundDocument.IStorage)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'CompoundDocument.StgOpenStorage(string, CompoundDocument.IStorage, CompoundDocument.STGM, IntPtr, uint, out CompoundDocument.IStorage)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeSafeCriticalFxCopRule" Category="Microsoft.Security" CheckId="CA5122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Warning">P/Invoke method 'CompoundDocument.StgOpenStorage(string, CompoundDocument.IStorage, CompoundDocument.STGM, IntPtr, uint, out CompoundDocument.IStorage)' is marked safe-critical.  Since P/Invokes may only be called by critical code, this declaration should either be marked as security critical, or have its annotation removed entirely to avoid being misleading.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StgOpenStorageOnILockBytes(OfficeOpenXml.Utils.CompoundDocument+ILockBytes,OfficeOpenXml.Utils.CompoundDocument+IStorage,OfficeOpenXml.Utils.CompoundDocument+STGM,System.IntPtr,System.UInt32,OfficeOpenXml.Utils.CompoundDocument+IStorage&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'CompoundDocument.StgOpenStorageOnILockBytes(CompoundDocument.ILockBytes, CompoundDocument.IStorage, CompoundDocument.STGM, IntPtr, uint, out CompoundDocument.IStorage)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeSafeCriticalFxCopRule" Category="Microsoft.Security" CheckId="CA5122" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Warning">P/Invoke method 'CompoundDocument.StgOpenStorageOnILockBytes(CompoundDocument.ILockBytes, CompoundDocument.IStorage, CompoundDocument.STGM, IntPtr, uint, out CompoundDocument.IStorage)' is marked safe-critical.  Since P/Invokes may only be called by critical code, this declaration should either be marked as security critical, or have its annotation removed entirely to avoid being misleading.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConvertUtil" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetValueDouble(System.Object,System.Boolean)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="ConvertUtil.cs" Line="64">Modify 'ConvertUtil.GetValueDouble(object, bool)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Require" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Argument`1(!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="Require.cs" Line="46">Change either member or parameter name 'argument' so that one differs from the other.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SqRefUtility" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Sq" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Sq' in type name 'SqRefUtility' by changing it to 'SQ'.</Issue>
          </Message>
          <Message Id="Sq" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Sq' in type name 'SqRefUtility'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#FromSqRefAddress(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Sq" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="SqRefUtility.cs" Line="33">Correct the casing of 'Sq' in member name 'SqRefUtility.FromSqRefAddress(string)' by changing it to 'SQ'.</Issue>
            </Message>
            <Message Id="Sq" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="SqRefUtility.cs" Line="33">Correct the spelling of 'Sq' in member name 'SqRefUtility.FromSqRefAddress(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="SqRefUtility.cs" Line="35">In externally visible method 'SqRefUtility.FromSqRefAddress(string)', validate parameter 'address' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToSqRefAddress(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Sq" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="SqRefUtility.cs" Line="20">Correct the casing of 'Sq' in member name 'SqRefUtility.ToSqRefAddress(string)' by changing it to 'SQ'.</Issue>
            </Message>
            <Message Id="Sq" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="SqRefUtility.cs" Line="20">Correct the spelling of 'Sq' in member name 'SqRefUtility.ToSqRefAddress(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="SqRefUtility.cs" Line="22">In externally visible method 'SqRefUtility.ToSqRefAddress(string)', validate parameter 'address' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UriHelper" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetRelativeUri(System.Uri,System.Uri)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="UriHelper.cs" Line="64">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'UriHelper.GetRelativeUri(Uri, Uri)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="UriHelper.cs" Line="86">Replace the call to 'string.operator ==(string, string)' in 'UriHelper.GetRelativeUri(Uri, Uri)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResolvePartUri(System.Uri,System.Uri)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="UriHelper.cs" Line="21">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'UriHelper.ResolvePartUri(Uri, Uri)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\Utils" File="UriHelper.cs" Line="12">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UriHelper.ResolvePartUri(Uri, Uri)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OfficeOpenXml.VBA">
       <Types>
        <Type Name="eAttributeDataType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eAttributeDataType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="eModuleType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'eModuleType' by changing it to 'E'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelVBACollectionBase`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="VBA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'VBA' in type name 'ExcelVBACollectionBase&lt;T&gt;' by changing it to 'Vba'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ExcelVBACollectionBase&lt;T&gt;' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#_list" Kind="Field" Static="False" Accessibility="FamilyOrAssembly" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ExcelVBACollectionBase&lt;T&gt;._list' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;T&gt;' in 'ExcelVBACollectionBase&lt;T&gt;._list' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Exists(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="91">In member 'ExcelVBACollectionBase&lt;T&gt;.Exists(string)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="92">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelVBACollectionBase&lt;T&gt;.Exists(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="92">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelVBACollectionBase&lt;T&gt;.Exists(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="74">In member 'ExcelVBACollectionBase&lt;T&gt;.this[int]', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.String]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="62">In member 'ExcelVBACollectionBase&lt;T&gt;.this[string]', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Item(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="63">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelVBACollectionBase&lt;T&gt;.this.get(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="63">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'ExcelVBACollectionBase&lt;T&gt;.this.get(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Remove(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Item" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="99">In member 'ExcelVBACollectionBase&lt;T&gt;.Remove(T)', correct the casing of 'Item' in parameter name 'Item' by changing it to 'item'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVBAModule" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="VBA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'VBA' in type name 'ExcelVBAModule' by changing it to 'Vba'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Code" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Code(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.StartsWith(System.String,System.StringComparison)" TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
               <Issue Name="StringComparison" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModule.cs" Line="120">'ExcelVBAModule.Code.set(string)' passes 'StringComparison.InvariantCultureIgnoreCase' as the 'StringComparison' parameter to 'string.StartsWith(string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
               <Issue Name="StringComparison" Certainty="75" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModule.cs" Line="120">'ExcelVBAModule.Code.set(string)' passes 'StringComparison.InvariantCultureIgnoreCase' as the 'StringComparison' parameter to 'string.StartsWith(string, StringComparison)'. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModule.cs" Line="120">In externally visible method 'ExcelVBAModule.Code.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Name" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_Name(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="Vba" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModule.cs" Line="91">Correct the spelling of the unrecognized token 'Vba' in the literal '"Vba module names can\'t contain unicode characters"'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModule.cs" Line="138">The property name 'ExcelVBAModule.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVbaModuleAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vba" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vba' in type name 'ExcelVbaModuleAttribute'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'ExcelVbaModuleAttribute' so that it does not end in 'Attribute'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelVbaModuleAttributesCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vba" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vba' in type name 'ExcelVbaModuleAttributesCollection'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelVbaModuleCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vba" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vba' in type name 'ExcelVbaModuleCollection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#_project" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ExcelVbaModuleCollection._project' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddClass(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Exposed" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="156">In member 'ExcelVbaModuleCollection.AddClass(string, bool)', correct the casing of 'Exposed' in parameter name 'Exposed' by changing it to 'exposed'.</Issue>
            </Message>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="156">In member 'ExcelVbaModuleCollection.AddClass(string, bool)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddModule(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="136">In member 'ExcelVbaModuleCollection.AddModule(string)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVbaProject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vba" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vba' in type name 'ExcelVbaProject'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Create()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="VBAProject" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="1025">Correct the spelling of the unrecognized token 'VBAProject' in the literal '"Package already contains a VBAProject"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateDirStream()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="635">In method 'ExcelVbaProject.CreateDirStream()', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateProjectStream()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Text.StringBuilder.AppendFormat(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="908">Because the behavior of 'StringBuilder.AppendFormat(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.CreateProjectStream()' with a call to 'StringBuilder.AppendFormat(IFormatProvider, string, params object[])'. If the result of 'StringBuilder.AppendFormat(IFormatProvider, string, params object[])' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="897">Replace the call to 'string.operator !=(string, string)' in 'ExcelVbaProject.CreateProjectStream()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateProjectwmStream()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="860">In method 'ExcelVbaProject.CreateProjectwmStream()', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateVBAProjectStream()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="622">In method 'ExcelVbaProject.CreateVBAProjectStream()', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="621">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVbaProject.CreateVBAProjectStream()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Decrypt(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="projKey" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="330">'ExcelVbaProject.Decrypt(string)' declares a variable, 'projKey', of type 'byte', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="version" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="329">'ExcelVbaProject.Decrypt(string)' declares a variable, 'version', of type 'byte', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encrypt(System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="347">In method 'ExcelVbaProject.Encrypt(byte[])', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetByte(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="395">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVbaProject.GetByte(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Byte.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="399">Because the behavior of 'byte.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.GetByte(string)' with a call to 'byte.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'byte.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDocumentAttributes(System.String,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="1063">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVbaProject.GetDocumentAttributes(string, string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetModuleNameFromWorksheet(OfficeOpenXml.ExcelWorksheet)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="1054">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.GetModuleNameFromWorksheet(ExcelWorksheet)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="1057">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.GetModuleNameFromWorksheet(ExcelWorksheet)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetString(System.Byte[],System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="379">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVbaProject.GetString(byte[], int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="392">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.GetString(byte[], int)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Byte.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="385">Because the behavior of 'byte.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.GetString(byte[], int)' with a call to 'byte.ToString(string, IFormatProvider)'. If the result of 'byte.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="389">Because the behavior of 'byte.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.GetString(byte[], int)' with a call to 'byte.ToString(string, IFormatProvider)'. If the result of 'byte.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetString(System.IO.BinaryReader,System.UInt32,System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="995">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVbaProject.GetString(BinaryReader, uint, Encoding)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetUnicodeString(System.IO.BinaryReader,System.UInt32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="reserved" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="1010">'ExcelVbaProject.GetUnicodeString(BinaryReader, uint)' declares a variable, 'reserved', of type 'int', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HelpContextID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="99">Correct the casing of 'ID' in member name 'ExcelVbaProject.HelpContextID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadDirStream()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="404">'ExcelVbaProject.ReadDirStream()' has a cyclomatic complexity of 35. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="406">In method 'ExcelVbaProject.ReadDirStream()', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="cookie" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="478">'ExcelVbaProject.ReadDirStream()' declares a variable, 'cookie', of type 'ushort', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="modualCount" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="475">'ExcelVbaProject.ReadDirStream()' declares a variable, 'modualCount', of type 'ushort', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="r1" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="537">'ExcelVbaProject.ReadDirStream()' declares a variable, 'r1', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="r2" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="538">'ExcelVbaProject.ReadDirStream()' declares a variable, 'r2', of type 'ushort', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="reserved1" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="458">'ExcelVbaProject.ReadDirStream()' declares a variable, 'reserved1', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="reserved2" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="459">'ExcelVbaProject.ReadDirStream()' declares a variable, 'reserved2', of type 'ushort', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="reserved4" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="519">'ExcelVbaProject.ReadDirStream()' declares a variable, 'reserved4', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="reserved5" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="520">'ExcelVbaProject.ReadDirStream()' declares a variable, 'reserved5', of type 'ushort', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadModules()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.IndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="179">Because the behavior of 'string.IndexOf(string, int)' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.ReadModules()' with a call to 'string.IndexOf(string, int, StringComparison)'. If the result of 'string.IndexOf(string, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="192">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.ReadModules()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="192">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.ReadModules()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadProjectProperties()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="208">'ExcelVbaProject.ReadProjectProperties()' has a cyclomatic complexity of 44. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="reserved" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="264">'ExcelVbaProject.ReadProjectProperties()' declares a variable, 'reserved', of type 'byte', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="231">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.ReadProjectProperties()' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="214">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.ReadProjectProperties()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="221">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'ExcelVbaProject.ReadProjectProperties()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="rel" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="596">'ExcelVbaProject.Save()' declares a variable, 'rel', of type 'ZipPackageRelationship', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WritePassword()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProject.cs" Line="976">In method 'ExcelVbaProject.WritePassword()', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVbaProject+eSyskind" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="e" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'e' in type name 'ExcelVbaProject.eSyskind' by changing it to 'E'.</Issue>
          </Message>
          <Message Id="Syskind" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Syskind' in type name 'ExcelVbaProject.eSyskind'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelVbaProtection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vba" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vba' in type name 'ExcelVbaProtection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#SetPassword(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProtection.cs" Line="102">In method 'ExcelVbaProtection.SetPassword(string)', call System.IDisposable.Dispose on object 'provider' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Password" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProtection.cs" Line="74">In member 'ExcelVbaProtection.SetPassword(string)', correct the casing of 'Password' in parameter name 'Password' by changing it to 'password'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VbeProtected" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Vbe" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaProtection.cs" Line="61">Correct the spelling of 'Vbe' in member name 'ExcelVbaProtection.VbeProtected' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVbaReference" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vba" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vba' in type name 'ExcelVbaReference'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Libid" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Libid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaReference.cs" Line="63">Correct the spelling of 'Libid' in member name 'ExcelVbaReference.Libid' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReferenceRecordID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaReference.cs" Line="54">Correct the casing of 'ID' in member name 'ExcelVbaReference.ReferenceRecordID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVbaReferenceCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vba" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vba' in type name 'ExcelVbaReferenceCollection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Add(OfficeOpenXml.VBA.ExcelVbaReference)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Item" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaModuleCollection.cs" Line="190">In member 'ExcelVbaReferenceCollection.Add(ExcelVbaReference)', correct the casing of 'Item' in parameter name 'Item' by changing it to 'item'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExcelVbaReferenceControl" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vba" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vba' in type name 'ExcelVbaReferenceControl'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelVbaReferenceProject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vba" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vba' in type name 'ExcelVbaReferenceProject'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExcelVbaSignature" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Vba" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Vba' in type name 'ExcelVbaSignature'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetCertFromStore(System.Security.Cryptography.X509Certificates.StoreLocation)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="237">Modify 'ExcelVbaSignature.GetCertFromStore(StoreLocation)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCertStore()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="245">In method 'ExcelVbaSignature.GetCertStore()', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetContentHash(OfficeOpenXml.VBA.ExcelVbaProject)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="363">In method 'ExcelVbaSignature.GetContentHash(ExcelVbaProject)', call System.IDisposable.Dispose on object 'hp' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="319">In method 'ExcelVbaSignature.GetContentHash(ExcelVbaProject)', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="316">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVbaSignature.GetContentHash(ExcelVbaProject)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSignature()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="cbProjectName" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="69">'ExcelVbaSignature.GetSignature()' declares a variable, 'cbProjectName', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="cbSigningCertStore" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="67">'ExcelVbaSignature.GetSignature()' declares a variable, 'cbSigningCertStore', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="cbTimestampUrl" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="72">'ExcelVbaSignature.GetSignature()' declares a variable, 'cbTimestampUrl', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="certStoreOffset" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="68">'ExcelVbaSignature.GetSignature()' declares a variable, 'certStoreOffset', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="encodingType" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="81">'ExcelVbaSignature.GetSignature()' declares a variable, 'encodingType', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="endel1" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="98">'ExcelVbaSignature.GetSignature()' declares a variable, 'endel1', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="endel2" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="99">'ExcelVbaSignature.GetSignature()' declares a variable, 'endel2', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="fTimestamp" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="71">'ExcelVbaSignature.GetSignature()' declares a variable, 'fTimestamp', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="fileType" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="76">'ExcelVbaSignature.GetSignature()' declares a variable, 'fileType', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="projectNameOffset" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="70">'ExcelVbaSignature.GetSignature()' declares a variable, 'projectNameOffset', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="rgchProjectNameBuffer" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="100">'ExcelVbaSignature.GetSignature()' declares a variable, 'rgchProjectNameBuffer', of type 'ushort', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="rgchTimestampBuffer" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="101">'ExcelVbaSignature.GetSignature()' declares a variable, 'rgchTimestampBuffer', of type 'ushort', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="signatureOffset" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="66">'ExcelVbaSignature.GetSignature()' declares a variable, 'signatureOffset', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="timestampUrlOffset" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="73">'ExcelVbaSignature.GetSignature()' declares a variable, 'timestampUrlOffset', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="version" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="75">'ExcelVbaSignature.GetSignature()' declares a variable, 'version', of type 'uint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(OfficeOpenXml.VBA.ExcelVbaProject)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="172">In method 'ExcelVbaSignature.Save(ExcelVbaProject)', call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SignProject(OfficeOpenXml.VBA.ExcelVbaProject)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="283">In method 'ExcelVbaSignature.SignProject(ExcelVbaProject)', call System.IDisposable.Dispose on object 'new MemoryStream()' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteProp(System.IO.BinaryWriter,System.Int32,System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="267">'ExcelVbaSignature.WriteProp(BinaryWriter, int, byte[])' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-08-24 14:56:48Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="C:\Projects\TravelLeaders\AgentMate\AM.Components\EPPlus\VBA" File="ExcelVbaSignature.cs" Line="267">The 'this' parameter (or 'Me' in Visual Basic) of 'ExcelVbaSignature.WriteProp(BinaryWriter, int, byte[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
   <Name>Abstract types should not have constructors</Name>
   <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
   <Resolution Name="Default">Change the accessibility of all public constructors in {0} to protected.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182126.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040">
   <Name>Avoid empty interfaces</Name>
   <Description>Interfaces are meant to contain members that specify a set of behaviors. To mark or label a class, use an attribute instead of an empty interface.</Description>
   <Resolution Name="Default">Define a custom attribute to replace {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182128.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506">
   <Name>Avoid excessive class coupling</Name>
   <Description>Types and methods with a high degree of class coupling can be difficult to maintain.</Description>
   <Resolution Name="Method">{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor the method to decrease its class coupling, or consider moving the method to one of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability.</Resolution>
   <Resolution Name="Type">{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb397994.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveLocals" Category="Microsoft.Performance" CheckId="CA1809">
   <Name>Avoid excessive locals</Name>
   <Description>Method implementations should not contain more than 64 local variables. In order for the run-time to enregister local variables most efficiently, there should be 64 or fewer of them. Enregistering based on flow analysis will not occur for locals in excess of 64, which may result in slower performance.</Description>
   <Resolution Name="Compiler">{0} has {1} local variables, {2} of which were generated by the compiler. Refactor {0} so that it uses fewer than 64 local variables.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182263.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be an out parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182131.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUninstantiatedInternalClasses" Category="Microsoft.Performance" CheckId="CA1812">
   <Name>Avoid uninstantiated internal classes</Name>
   <Description>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</Description>
   <Resolution Name="Default">{0} is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static methods, consider adding a private constructor to prevent the compiler from generating a default constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182265.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505">
   <Name>Avoid unmaintainable code</Name>
   <Description>Types and methods with a high degree of class coupling, cyclomatic complexity and/or program length can be difficult to maintain.</Description>
   <Resolution Name="Method">{0} has a maintainability index of {1}. Rewrite or refactor the method to increase its maintainability index (MI). An MI below {2} indicates poor maintainability, an MI between {2} and {3} indicates moderate maintainability, and an MI above {3} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386043.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="CallGCSuppressFinalizeCorrectly" Category="Microsoft.Usage" CheckId="CA1816">
   <Name>Call GC.SuppressFinalize correctly</Name>
   <Description>Call GC.SuppressFinalize to suppress finalization of your instance once Dispose has been called. Objects that implement IDisposable should call SuppressFinalize from the IDisposable.Dispose method to prevent the garbage collector from calling Object.Finalize on an object that does not require it.</Description>
   <Resolution Name="NotCalled">Change {0} to call {1}. This will prevent derived types that introduce a finalizer from needing to re-implement 'IDisposable' to call it.</Resolution>
   <Resolution Name="NotCalledWithFinalizer">Change {0} to call {1}. This will prevent unnecessary finalization of the object once it has been disposed and it has fallen out of scope.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182269.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010">
   <Name>Collections should implement generic interface</Name>
   <Description>Non-generic strongly typed collections should implement one of the generic collection interfaces. This will allow better integration of the collection with generic API.</Description>
   <Resolution Name="Default">{0} appears to be a non-generic, strongly typed collection. Add an implementation to the instance of {1}&lt;T&gt; where T is the underlying element type of {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182132.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeDiscreteTerm">In member {0}, the compound word '{1}' in parameter name {2} exists as a discrete term. If your usage is intended to be single word, case it as '{3}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="TypeShouldBeDiscreteTerm">The compound word '{0}' in type name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DeclareTypesInNamespaces" Category="Microsoft.Design" CheckId="CA1050">
   <Name>Declare types in namespaces</Name>
   <Description>A type should be defined inside a namespace to avoid duplication.</Description>
   <Resolution Name="Default">{0} should be declared inside a namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182134.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DisposableFieldsShouldBeDisposed" Category="Microsoft.Usage" CheckId="CA2213">
   <Name>Disposable fields should be disposed</Name>
   <Description>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</Description>
   <Resolution Name="Default">{0} contains field {1} that is of IDisposable type: {2}. Change the Dispose method on {0} to call Dispose or Close on this field.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182328.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose methods should call base class dispose" Category="Microsoft.Usage" CheckId="CA2215">
   <Name>Dispose methods should call base class dispose</Name>
   <Description>If a type inherits from a disposable type, it must call the Dispose method of the base type from within its own Dispose method.</Description>
   <Resolution Name="Default">Ensure that method {0} calls base.{0} in all possible control flow paths.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182330.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 977</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareReadOnlyMutableReferenceTypes" Category="Microsoft.Security" CheckId="CA2104">
   <Name>Do not declare read only mutable reference types</Name>
   <Description>A read-only declaration for a mutable reference type does not prevent the field's instance data from being modified. For example, a read-only StringBuilder field declaration does not make sense, since the data encapsulated by the StringBuilder can be modified using the read-only reference.</Description>
   <Resolution Name="Default">Remove the read-only designation from {0} or change the field to one that is an immutable reference type. If the reference type {1} is, in fact, immutable, exclude this message.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182302.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Error</MessageLevel>
   <File Name="securityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="TryParse">{0} calls {1} but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182273.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045">
   <Name>Do not pass types by reference</Name>
   <Description>Although there are legitimate times to use reference parameters, such use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be a reference parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182146.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="NoAllowedExceptions">{0} creates an exception of type {1}. Exceptions should not be raised in this type of method. If this exception instance might be raised, change this method's logic so it no longer raises an exception.</Resolution>
   <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="Reserved">{0} creates an exception of type {1}, an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008">
   <Name>Enums should have zero value</Name>
   <Description>An enum should generally have a zero value. If the enum is not decorated with the Flags attribute, it should have a member with a value of zero that represents the empty state. Optionally, this value is named 'None'. For a Flags-attributed enum, a zero-valued member is optional and, if it exists, should always be named 'None'. This value should indicate that no values have been set in the enum. Using a zero-valued member for other purposes is contrary to the use of the Flags attribute in that the bitwise AND and OR operators are useless with the member.</Description>
   <Resolution Name="NotFlagsNoZeroValue">Add a member to {0} that has a value of zero with a suggested name of 'None'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182149.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="FlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1714">
   <Name>Flags enums should have plural names</Name>
   <Description>An enumeration marked with FlagsAttribute should have a plural name.</Description>
   <Resolution Name="Default">If enumeration name {0} is singular, change it to a plural form.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberAbbreviation">Correct the casing of '{0}' in member name {1} by changing it to '{2}'. '{2}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="MemberParameterAbbreviation">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'. '{3}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="Namespace">Correct the casing of '{0}' in namespace name '{1}' by changing it to '{2}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberMoreMeaningfulName">Consider providing a more meaningful name than member name {0}.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Resolution Name="TypeMoreMeaningfulName">Consider providing a more meaningful name than type name {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
   <Name>Identifiers should have correct suffix</Name>
   <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
   <Resolution Name="Default">Rename {0} to end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182244.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Resolution Name="LanguageSpecificMember">Consider replacing the language-specific data type identifier '{0}' in member name {1} with either a language-independent equivalent or a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove the underscores from member name {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectPrefix" Category="Microsoft.Naming" CheckId="CA1722">
   <Name>Identifiers should not have incorrect prefix</Name>
   <Description>Do not use 'C' as a prefix for type names. Do not use any prefix for naming types. Consider using the name of the base class as the suffix when naming derived types. For example: ApplicationException is a kind of Exception. SerializableAttribute is a kind of Attribute.</Description>
   <Resolution Name="Default">Remove the leading 'C' from type name {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182246.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182247.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Resolution Name="MemberParameter">In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Resolution Name="Type">Rename type {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Resolution Name="DisposeSignature">Ensure that {0} is declared as public and sealed.</Resolution>
   <Resolution Name="FinalizeImplementation">Modify {0} so that it calls Dispose(false) and then returns.</Resolution>
   <Resolution Name="ProvideDisposeBool">Provide an overridable implementation of Dispose(bool) on {0} or mark the type as sealed. A call to Dispose(false) should only clean up native resources. A call to Dispose(true) should clean up both managed and native resources.</Resolution>
   <Resolution Name="RenameDispose">Rename {0} to 'Dispose' and ensure that it is declared as public and sealed.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182151.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IndexersShouldNotBeMultidimensional" Category="Microsoft.Design" CheckId="CA1023">
   <Name>Indexers should not be multidimensional</Name>
   <Description>Indexers (indexed properties) should use a single value (either an integer or string types) for indexing values. Multidimensional indexers can significantly reduce the usability of the library. For example, public object this [int index1, int index2] is a non-intuitive indexer.</Description>
   <Resolution Name="Default">Redesign indexer {0} to use a single string or integer value as its index.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182152.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="IncorrectMessage">Method {0} passes parameter name '{1}' as the {2} argument to a {3} constructor. Replace this argument with a descriptive message and pass the parameter name in the correct position.</Resolution>
   <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182153.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkBooleanPInvokeArgumentsWithMarshalAs" Category="Microsoft.Interoperability" CheckId="CA1414">
   <Name>Mark boolean P/Invoke arguments with MarshalAs</Name>
   <Description>All boolean P/Invoke parameters and return types should be explicitly marked with the MarshalAs attribute. By default, the system will marshal all booleans as 4-byte UnmanagedType.Bool. This is the correct behavior for Win32 'BOOL' arguments but incorrect for C++ 'bool' arguments, which should be marshaled as 1-byte UnmanagedType.U1. For code maintainability reasons, always explicitly specify the marshaling information for boolean arguments and return values.</Description>
   <Resolution Name="Default">Add the MarshalAsAttribute to parameter {0} of P/Invoke {1}. If the corresponding unmanaged parameter is a 4-byte Win32 'BOOL', use [MarshalAs(UnmanagedType.Bool)]. For a 1-byte C++ 'bool', use MarshalAs(UnmanagedType.U1).</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182206.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkEnumsWithFlags" Category="Microsoft.Design" CheckId="CA1027">
   <Name>Mark enums with FlagsAttribute</Name>
   <Description>The enumeration appears to be made up of combinable flags. If this true, apply the Flags attribute to the enumeration.</Description>
   <Resolution Name="Default">The constituent members of {0} appear to represent flags that can be combined rather than discrete values. If this is correct, mark the enumeration with FlagsAttribute.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182159.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MembersShouldNotExposeCertainConcreteTypes" Category="Microsoft.Design" CheckId="CA1059">
   <Name>Members should not expose certain concrete types</Name>
   <Description>Members should not expose certain concrete types.</Description>
   <Resolution Name="Xml">Modify member {0} so that it no longer exposes the concrete type {1}. Use IXPathNavigable to represent XML data sources.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182160.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182162.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308">
   <Name>Normalize strings to uppercase</Name>
   <Description>Strings should be normalized to upper-case.</Description>
   <Resolution Name="ToUpperInvariant">In method {0}, replace the call to {1} with String.ToUpperInvariant().</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="OnlyFlagsEnumsShouldHavePluralNames" Category="Microsoft.Naming" CheckId="CA1717">
   <Name>Only FlagsAttribute enums should have plural names</Name>
   <Description>Plural names indicate that the values of the enumeration can be combined. For example, an enumeration named 'Day' indicates a single day, and an enumeration named 'Days' indicates multiple days. Enumeration values should be combined using the bit-wise OR operator only if the Flags attribute is present on the enumeration.</Description>
   <Resolution Name="Default">If the name {0} is plural, change it to its singular form.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264487.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
   <Name>Operations should not overflow</Name>
   <Description>Arithmetic operations should not be done without first validating the operands to prevent overflow.</Description>
   <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182354.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225">
   <Name>Operator overloads have named alternates</Name>
   <Description>When redefining operators, implement named methods to provide access to the operator functionality from languages that do not support operator overloading. For example, the functionality of the '+' operator should also be accessible using an 'Add' method.</Description>
   <Resolution Name="Default">Provide a method named '{0}' as a friendly alternate for operator {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182355.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="OverloadOperatorEqualsOnOverloadingAddAndSubtract" Category="Microsoft.Design" CheckId="CA1013">
   <Name>Overload operator equals on overloading add and subtract</Name>
   <Description>When overloading the addition and subtraction operators, make sure that the equality operator (==) is defined in a consistent manner.</Description>
   <Resolution Name="Default">Consider adding an overload of the equality operator for {0} that takes the same parameters as {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182164.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokesShouldNotBeSafeCriticalFxCopRule" Category="Microsoft.Security" CheckId="CA5122">
   <Name>P/Invoke declarations should not be safe-critical.</Name>
   <Description>Since P/Invokes may not be called by transparent code, they should not be marked as safe-critical methods.  Doing so can lead to confusion on the part of developers who may believe that their transparent code should be able to call the P/Invoke method since it is marked safe-critical.</Description>
   <Resolution Name="Default">P/Invoke method {0} is marked safe-critical.  Since P/Invokes may only be called by critical code, this declaration should either be marked as security critical, or have its annotation removed entirely to avoid being misleading.</Resolution>
   <Owner />
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="securitytransparencyrules.dll" Version="4.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldNotMatchMemberNames" Category="Microsoft.Naming" CheckId="CA1719">
   <Name>Parameter names should not match member names</Name>
   <Description>Parameter names should be distinct from member names.</Description>
   <Resolution Name="Default">Change either member or parameter name {0} so that one differs from the other.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182252.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="PreferJaggedArraysOverMultidimensional" Category="Microsoft.Performance" CheckId="CA1814">
   <Name>Prefer jagged arrays over multidimensional</Name>
   <Description>Multidimensional arrays can have a negative impact on performance. Use a jagged array if possible.</Description>
   <Resolution Name="Body">{0} uses a multidimensional array of {1}. Replace it with a jagged array if possible.</Resolution>
   <Resolution Name="Default">{0} is a multidimensional array. Replace it with a jagged array if possible.</Resolution>
   <Resolution Name="Return">{0} returns a multidimensional array of {1}. Replace it with a jagged array if possible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182277.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/0fss9skc.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721">
   <Name>Property names should not match get methods</Name>
   <Description>A Get method was found with the same name as a property. Get methods and properties should have names that clearly distinguish their function. See the design guidelines for information regarding choosing properties over methods.</Description>
   <Resolution Name="BaseType">The property name {0} is confusing given the existence of inherited method {1}. Rename or remove this property.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182253.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ProvideObsoleteAttributeMessage" Category="Microsoft.Design" CheckId="CA1041">
   <Name>Provide ObsoleteAttribute message</Name>
   <Description>The ObsoleteAttribute.Message property provides the text message displayed when an obsolete type or member is compiled. This message should provide information on the replacement for the obsolete element.</Description>
   <Resolution Name="Default">Provide a message for the ObsoleteAttribute that marks {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182166.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveEmptyFinalizers" Category="Microsoft.Performance" CheckId="CA1821">
   <Name>Remove empty finalizers</Name>
   <Description>Finalizers should be avoided where possible, to avoid the additional performance overhead involved in tracking object lifetime.</Description>
   <Resolution Name="Default">{0} implements a finalizer that only calls conditionally emitted methods or the base type finalizer. Remove the finalizer or ensure that it is only conditionally compiled into the assembly. If this violation occurs against a finalizer that is entirely wrapped in a conditionally-emitted block of code, suppress this message.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264476.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="CSharp2_0">Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="TypeNamesShouldNotMatchNamespaces" Category="Microsoft.Naming" CheckId="CA1724">
   <Name>Type names should not match namespaces</Name>
   <Description>Identifiers which conflict in whole or in part with namespace names should be avoided. Names that describe the purpose or contents of a type are preferred.</Description>
   <Resolution Name="Default">The type name {0} conflicts in whole or in part with the namespace name '{1}'. Change either name to eliminate the conflict.</Resolution>
   <Resolution Name="System">The type name {0} conflicts in whole or in part with the namespace name '{1}' defined in the .NET Framework. Rename the type to eliminate the conflict.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182257.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="NonBreaking">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054">
   <Name>URI parameters should not be strings</Name>
   <Description>If a parameter name contains "uri" or "url" or "urn", and it's typed as string, the parameter type should be changed to System.Uri, unless there is an overload method where the same parameter is typed as System.Uri.</Description>
   <Resolution Name="Default">Change the type of parameter {0} of method {1} from string to System.Uri, or provide an overload of {1}, that allows {0} to be passed as a System.Uri object.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182174.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="UseIntegralOrStringArgumentForIndexers" Category="Microsoft.Design" CheckId="CA1043">
   <Name>Use integral or string argument for indexers</Name>
   <Description>Indexers (indexed properties) should use either integer or string types for indexing values. These types are easy to use and commonly used for indexing data structures; using other types can significantly reduce the usability of the library. For example, public char this [int index] is the C# signature for the String type's indexer.</Description>
   <Resolution Name="Default">Use an integral value or string as the parameter to indexer {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182180.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="UseLiteralsWhereAppropriate" Category="Microsoft.Performance" CheckId="CA1802">
   <Name>Use literals where appropriate</Name>
   <Description>Prefer literals over InitOnly fields if values do not have to be calculated at runtime.</Description>
   <Resolution Name="Default">Field {0} is declared as 'static readonly' but is initialized with a constant value '{1}'. Mark this field as 'const' instead.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182280.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="UseOrdinalStringComparison" Category="Microsoft.Globalization" CheckId="CA1309">
   <Name>Use ordinal StringComparison</Name>
   <Description>For non-linguistic comparisons, StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase should be used instead of the linguistically-sensitive StringComparison.InvariantCulture.</Description>
   <Resolution Name="StringComparison">{0} passes '{1}' as the 'StringComparison' parameter to {2}. To perform a non-linguistic comparison, specify 'StringComparison.Ordinal' or 'StringComparison.OrdinalIgnoreCase' instead.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385972.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="MemberNoAlternate">Replace the term '{0}' in member name {1} with an appropriate alternate or remove it entirely.</Resolution>
   <Resolution Name="MemberParameterNoAlternate">In member {0}, replace the term '{1}' in parameter name {2} with an appropriate alternate or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182258.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500">
   <Name>Variable names should not match field names</Name>
   <Description>Instance field and variable names should not be identical within the same scope.</Description>
   <Resolution Name="Local">{0}, a variable declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Resolution Name="Parameter">{0}, a parameter declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182216.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
